<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="5122"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0195%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0195%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>publisher`tokio::runtime::driver::Driver::new (1 samples, 0.02%)</title><rect x="0.0195%" y="325" width="0.0195%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2695%" y="335.50"></text></g><g><title>publisher`tokio::util::once_cell::OnceCell&lt;T&gt;::do_init (1 samples, 0.02%)</title><rect x="0.0195%" y="309" width="0.0195%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2695%" y="319.50"></text></g><g><title>publisher`std::sys::sync::once::queue::Once::call (1 samples, 0.02%)</title><rect x="0.0195%" y="293" width="0.0195%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2695%" y="303.50"></text></g><g><title>publisher`&lt;tokio::signal::unix::OsExtraData as tokio::signal::registry::Init&gt;::init (1 samples, 0.02%)</title><rect x="0.0195%" y="277" width="0.0195%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2695%" y="287.50"></text></g><g><title>publisher`&lt;risc0_zkvm::host::api::ParentProcessConnector as risc0_zkvm::host::api::Connector&gt;::connect (1 samples, 0.02%)</title><rect x="0.0390%" y="277" width="0.0195%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2890%" y="287.50"></text></g><g><title>publisher`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.02%)</title><rect x="0.0390%" y="261" width="0.0195%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2890%" y="271.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.02%)</title><rect x="0.0390%" y="245" width="0.0195%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2890%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.02%)</title><rect x="0.0390%" y="229" width="0.0195%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2890%" y="239.50"></text></g><g><title>publisher`risc0_zkvm::host::api::client::Client::execute (2 samples, 0.04%)</title><rect x="0.0390%" y="293" width="0.0390%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="0.2890%" y="303.50"></text></g><g><title>publisher`risc0_zkvm::host::api::ConnectionWrapper::close (1 samples, 0.02%)</title><rect x="0.0586%" y="277" width="0.0195%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3086%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__wait4 (1 samples, 0.02%)</title><rect x="0.0586%" y="261" width="0.0195%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.3086%" y="271.50"></text></g><g><title>publisher`&lt;risc0_zkvm::host::client::prove::external::ExternalProver as risc0_zkvm::host::client::prove::Executor&gt;::execute (3 samples, 0.06%)</title><rect x="0.0390%" y="309" width="0.0586%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="3"/><text x="0.2890%" y="319.50"></text></g><g><title>publisher`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.02%)</title><rect x="0.0781%" y="293" width="0.0195%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.3281%" y="303.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.02%)</title><rect x="0.0781%" y="277" width="0.0195%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.3281%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.02%)</title><rect x="0.0781%" y="261" width="0.0195%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.3281%" y="271.50"></text></g><g><title>publisher`&lt;http_cache::managers::cacache::CACacheManager as http_cache::CacheManager&gt;::get::_{{closure}} (19 samples, 0.37%)</title><rect x="0.0976%" y="277" width="0.3709%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="19"/><text x="0.3476%" y="287.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (18 samples, 0.35%)</title><rect x="0.1171%" y="261" width="0.3514%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="18"/><text x="0.3671%" y="271.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.04%)</title><rect x="0.4295%" y="245" width="0.0390%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="2"/><text x="0.6795%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="0.4295%" y="229" width="0.0390%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="2"/><text x="0.6795%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.04%)</title><rect x="0.4295%" y="213" width="0.0390%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="2"/><text x="0.6795%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.04%)</title><rect x="0.4295%" y="197" width="0.0390%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="2"/><text x="0.6795%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="0.4295%" y="181" width="0.0390%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="2"/><text x="0.6795%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.04%)</title><rect x="0.4295%" y="165" width="0.0390%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="0.6795%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.04%)</title><rect x="0.4295%" y="149" width="0.0390%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="2"/><text x="0.6795%" y="159.50"></text></g><g><title>publisher`&lt;http_cache_reqwest::Cache&lt;T&gt; as reqwest_middleware::middleware::Middleware&gt;::handle::_{{closure}} (65 samples, 1.27%)</title><rect x="0.0976%" y="293" width="1.2690%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="65"/><text x="0.3476%" y="303.50"></text></g><g><title>publisher`sha2::sha256::compress256 (46 samples, 0.90%)</title><rect x="0.4686%" y="277" width="0.8981%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="46"/><text x="0.7186%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="1.3667%" y="245" width="0.0195%" height="15" fill="rgb(214,148,48)" fg:x="70" fg:w="1"/><text x="1.6167%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="1.3862%" y="245" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="71" fg:w="1"/><text x="1.6362%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="1.3862%" y="229" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="71" fg:w="1"/><text x="1.6362%" y="239.50"></text></g><g><title>publisher`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="1.3667%" y="277" width="0.0781%" height="15" fill="rgb(229,88,8)" fg:x="70" fg:w="4"/><text x="1.6167%" y="287.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (4 samples, 0.08%)</title><rect x="1.3667%" y="261" width="0.0781%" height="15" fill="rgb(213,181,19)" fg:x="70" fg:w="4"/><text x="1.6167%" y="271.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.04%)</title><rect x="1.4057%" y="245" width="0.0390%" height="15" fill="rgb(254,191,54)" fg:x="72" fg:w="2"/><text x="1.6557%" y="255.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.04%)</title><rect x="1.4057%" y="229" width="0.0390%" height="15" fill="rgb(241,83,37)" fg:x="72" fg:w="2"/><text x="1.6557%" y="239.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.02%)</title><rect x="1.4252%" y="213" width="0.0195%" height="15" fill="rgb(233,36,39)" fg:x="73" fg:w="1"/><text x="1.6752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="1.4447%" y="245" width="0.0195%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="1.6947%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="1.4643%" y="229" width="0.0195%" height="15" fill="rgb(245,192,40)" fg:x="75" fg:w="1"/><text x="1.7143%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="1.4838%" y="229" width="0.0390%" height="15" fill="rgb(238,167,29)" fg:x="76" fg:w="2"/><text x="1.7338%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="1.5228%" y="213" width="0.0586%" height="15" fill="rgb(232,182,51)" fg:x="78" fg:w="3"/><text x="1.7728%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="1.5814%" y="213" width="0.0195%" height="15" fill="rgb(231,60,39)" fg:x="81" fg:w="1"/><text x="1.8314%" y="223.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.14%)</title><rect x="1.5228%" y="229" width="0.1367%" height="15" fill="rgb(208,69,12)" fg:x="78" fg:w="7"/><text x="1.7728%" y="239.50"></text></g><g><title>publisher`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.06%)</title><rect x="1.6009%" y="213" width="0.0586%" height="15" fill="rgb(235,93,37)" fg:x="82" fg:w="3"/><text x="1.8509%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="1.6205%" y="197" width="0.0390%" height="15" fill="rgb(213,116,39)" fg:x="83" fg:w="2"/><text x="1.8705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="1.6205%" y="181" width="0.0390%" height="15" fill="rgb(222,207,29)" fg:x="83" fg:w="2"/><text x="1.8705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.02%)</title><rect x="1.6400%" y="165" width="0.0195%" height="15" fill="rgb(206,96,30)" fg:x="84" fg:w="1"/><text x="1.8900%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="1.6400%" y="149" width="0.0195%" height="15" fill="rgb(218,138,4)" fg:x="84" fg:w="1"/><text x="1.8900%" y="159.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.23%)</title><rect x="1.4447%" y="261" width="0.2343%" height="15" fill="rgb(250,191,14)" fg:x="74" fg:w="12"/><text x="1.6947%" y="271.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.21%)</title><rect x="1.4643%" y="245" width="0.2148%" height="15" fill="rgb(239,60,40)" fg:x="75" fg:w="11"/><text x="1.7143%" y="255.50"></text></g><g><title>publisher`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect x="1.6595%" y="229" width="0.0195%" height="15" fill="rgb(206,27,48)" fg:x="85" fg:w="1"/><text x="1.9095%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="1.6595%" y="213" width="0.0195%" height="15" fill="rgb(225,35,8)" fg:x="85" fg:w="1"/><text x="1.9095%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1.6595%" y="197" width="0.0195%" height="15" fill="rgb(250,213,24)" fg:x="85" fg:w="1"/><text x="1.9095%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="1.6595%" y="181" width="0.0195%" height="15" fill="rgb(247,123,22)" fg:x="85" fg:w="1"/><text x="1.9095%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="1.6986%" y="229" width="0.0390%" height="15" fill="rgb(231,138,38)" fg:x="87" fg:w="2"/><text x="1.9486%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1.7766%" y="213" width="0.0390%" height="15" fill="rgb(231,145,46)" fg:x="91" fg:w="2"/><text x="2.0266%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="1.8157%" y="213" width="0.0195%" height="15" fill="rgb(251,118,11)" fg:x="93" fg:w="1"/><text x="2.0657%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="1.8157%" y="197" width="0.0195%" height="15" fill="rgb(217,147,25)" fg:x="93" fg:w="1"/><text x="2.0657%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="1.8352%" y="213" width="0.0195%" height="15" fill="rgb(247,81,37)" fg:x="94" fg:w="1"/><text x="2.0852%" y="223.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="1.8547%" y="213" width="0.0195%" height="15" fill="rgb(209,12,38)" fg:x="95" fg:w="1"/><text x="2.1047%" y="223.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect x="1.8547%" y="197" width="0.0195%" height="15" fill="rgb(227,1,9)" fg:x="95" fg:w="1"/><text x="2.1047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="1.8547%" y="181" width="0.0195%" height="15" fill="rgb(248,47,43)" fg:x="95" fg:w="1"/><text x="2.1047%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="1.8743%" y="213" width="0.0195%" height="15" fill="rgb(221,10,30)" fg:x="96" fg:w="1"/><text x="2.1243%" y="223.50"></text></g><g><title>publisher`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.04%)</title><rect x="1.8938%" y="213" width="0.0390%" height="15" fill="rgb(210,229,1)" fg:x="97" fg:w="2"/><text x="2.1438%" y="223.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.23%)</title><rect x="1.7376%" y="229" width="0.2343%" height="15" fill="rgb(222,148,37)" fg:x="89" fg:w="12"/><text x="1.9876%" y="239.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.04%)</title><rect x="1.9328%" y="213" width="0.0390%" height="15" fill="rgb(234,67,33)" fg:x="99" fg:w="2"/><text x="2.1828%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.04%)</title><rect x="1.9328%" y="197" width="0.0390%" height="15" fill="rgb(247,98,35)" fg:x="99" fg:w="2"/><text x="2.1828%" y="207.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.31%)</title><rect x="1.6790%" y="261" width="0.3124%" height="15" fill="rgb(247,138,52)" fg:x="86" fg:w="16"/><text x="1.9290%" y="271.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.31%)</title><rect x="1.6790%" y="245" width="0.3124%" height="15" fill="rgb(213,79,30)" fg:x="86" fg:w="16"/><text x="1.9290%" y="255.50"></text></g><g><title>publisher`&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect x="1.9719%" y="229" width="0.0195%" height="15" fill="rgb(246,177,23)" fg:x="101" fg:w="1"/><text x="2.2219%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="2.1086%" y="229" width="0.0195%" height="15" fill="rgb(230,62,27)" fg:x="108" fg:w="1"/><text x="2.3586%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.08%)</title><rect x="2.1281%" y="229" width="0.0781%" height="15" fill="rgb(216,154,8)" fg:x="109" fg:w="4"/><text x="2.3781%" y="239.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="2.2062%" y="229" width="0.0586%" height="15" fill="rgb(244,35,45)" fg:x="113" fg:w="3"/><text x="2.4562%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="2.2647%" y="213" width="0.0195%" height="15" fill="rgb(251,115,12)" fg:x="116" fg:w="1"/><text x="2.5147%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="2.2843%" y="213" width="0.0195%" height="15" fill="rgb(240,54,50)" fg:x="117" fg:w="1"/><text x="2.5343%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="2.2843%" y="197" width="0.0195%" height="15" fill="rgb(233,84,52)" fg:x="117" fg:w="1"/><text x="2.5343%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="2.3038%" y="213" width="0.0195%" height="15" fill="rgb(207,117,47)" fg:x="118" fg:w="1"/><text x="2.5538%" y="223.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (54 samples, 1.05%)</title><rect x="2.4014%" y="197" width="1.0543%" height="15" fill="rgb(249,43,39)" fg:x="123" fg:w="54"/><text x="2.6514%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="3.4947%" y="133" width="0.0586%" height="15" fill="rgb(209,38,44)" fg:x="179" fg:w="3"/><text x="3.7447%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="3.5338%" y="117" width="0.0195%" height="15" fill="rgb(236,212,23)" fg:x="181" fg:w="1"/><text x="3.7838%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.12%)</title><rect x="3.4557%" y="165" width="0.1171%" height="15" fill="rgb(242,79,21)" fg:x="177" fg:w="6"/><text x="3.7057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.10%)</title><rect x="3.4752%" y="149" width="0.0976%" height="15" fill="rgb(211,96,35)" fg:x="178" fg:w="5"/><text x="3.7252%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="3.5533%" y="133" width="0.0195%" height="15" fill="rgb(253,215,40)" fg:x="182" fg:w="1"/><text x="3.8033%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (67 samples, 1.31%)</title><rect x="2.3233%" y="213" width="1.3081%" height="15" fill="rgb(211,81,21)" fg:x="119" fg:w="67"/><text x="2.5733%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.18%)</title><rect x="3.4557%" y="197" width="0.1757%" height="15" fill="rgb(208,190,38)" fg:x="177" fg:w="9"/><text x="3.7057%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (9 samples, 0.18%)</title><rect x="3.4557%" y="181" width="0.1757%" height="15" fill="rgb(235,213,38)" fg:x="177" fg:w="9"/><text x="3.7057%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.06%)</title><rect x="3.5728%" y="165" width="0.0586%" height="15" fill="rgb(237,122,38)" fg:x="183" fg:w="3"/><text x="3.8228%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (72 samples, 1.41%)</title><rect x="2.2647%" y="229" width="1.4057%" height="15" fill="rgb(244,218,35)" fg:x="116" fg:w="72"/><text x="2.5147%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.04%)</title><rect x="3.6314%" y="213" width="0.0390%" height="15" fill="rgb(240,68,47)" fg:x="186" fg:w="2"/><text x="3.8814%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="3.7095%" y="213" width="0.0195%" height="15" fill="rgb(210,16,53)" fg:x="190" fg:w="1"/><text x="3.9595%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="3.7290%" y="213" width="0.0586%" height="15" fill="rgb(235,124,12)" fg:x="191" fg:w="3"/><text x="3.9790%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="3.7876%" y="213" width="0.0195%" height="15" fill="rgb(224,169,11)" fg:x="194" fg:w="1"/><text x="4.0376%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="3.8071%" y="213" width="0.0195%" height="15" fill="rgb(250,166,2)" fg:x="195" fg:w="1"/><text x="4.0571%" y="223.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (12 samples, 0.23%)</title><rect x="3.6704%" y="229" width="0.2343%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="12"/><text x="3.9204%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (4 samples, 0.08%)</title><rect x="3.8266%" y="213" width="0.0781%" height="15" fill="rgb(230,116,27)" fg:x="196" fg:w="4"/><text x="4.0766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.06%)</title><rect x="3.8462%" y="197" width="0.0586%" height="15" fill="rgb(228,99,48)" fg:x="197" fg:w="3"/><text x="4.0962%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="3.8852%" y="181" width="0.0195%" height="15" fill="rgb(253,11,6)" fg:x="199" fg:w="1"/><text x="4.1352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="3.8852%" y="165" width="0.0195%" height="15" fill="rgb(247,143,39)" fg:x="199" fg:w="1"/><text x="4.1352%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (1 samples, 0.02%)</title><rect x="3.9047%" y="229" width="0.0195%" height="15" fill="rgb(236,97,10)" fg:x="200" fg:w="1"/><text x="4.1547%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="3.9242%" y="213" width="0.0390%" height="15" fill="rgb(233,208,19)" fg:x="201" fg:w="2"/><text x="4.1742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="3.9633%" y="213" width="0.0195%" height="15" fill="rgb(216,164,2)" fg:x="203" fg:w="1"/><text x="4.2133%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="3.9633%" y="197" width="0.0195%" height="15" fill="rgb(220,129,5)" fg:x="203" fg:w="1"/><text x="4.2133%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="3.9633%" y="181" width="0.0195%" height="15" fill="rgb(242,17,10)" fg:x="203" fg:w="1"/><text x="4.2133%" y="191.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 0.47%)</title><rect x="4.0414%" y="197" width="0.4686%" height="15" fill="rgb(242,107,0)" fg:x="207" fg:w="24"/><text x="4.2914%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="4.5685%" y="117" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="234" fg:w="1"/><text x="4.8185%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.10%)</title><rect x="4.5100%" y="165" width="0.0976%" height="15" fill="rgb(233,223,10)" fg:x="231" fg:w="5"/><text x="4.7600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.10%)</title><rect x="4.5100%" y="149" width="0.0976%" height="15" fill="rgb(215,21,27)" fg:x="231" fg:w="5"/><text x="4.7600%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.08%)</title><rect x="4.5295%" y="133" width="0.0781%" height="15" fill="rgb(232,23,21)" fg:x="232" fg:w="4"/><text x="4.7795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="4.5881%" y="117" width="0.0195%" height="15" fill="rgb(244,5,23)" fg:x="235" fg:w="1"/><text x="4.8381%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (33 samples, 0.64%)</title><rect x="3.9828%" y="213" width="0.6443%" height="15" fill="rgb(226,81,46)" fg:x="204" fg:w="33"/><text x="4.2328%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.12%)</title><rect x="4.5100%" y="197" width="0.1171%" height="15" fill="rgb(247,70,30)" fg:x="231" fg:w="6"/><text x="4.7600%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (6 samples, 0.12%)</title><rect x="4.5100%" y="181" width="0.1171%" height="15" fill="rgb(212,68,19)" fg:x="231" fg:w="6"/><text x="4.7600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="4.6076%" y="165" width="0.0195%" height="15" fill="rgb(240,187,13)" fg:x="236" fg:w="1"/><text x="4.8576%" y="175.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (137 samples, 2.67%)</title><rect x="1.9914%" y="245" width="2.6747%" height="15" fill="rgb(223,113,26)" fg:x="102" fg:w="137"/><text x="2.2414%" y="255.50">pu..</text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (38 samples, 0.74%)</title><rect x="3.9242%" y="229" width="0.7419%" height="15" fill="rgb(206,192,2)" fg:x="201" fg:w="38"/><text x="4.1742%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.04%)</title><rect x="4.6271%" y="213" width="0.0390%" height="15" fill="rgb(241,108,4)" fg:x="237" fg:w="2"/><text x="4.8771%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="4.6466%" y="197" width="0.0195%" height="15" fill="rgb(247,173,49)" fg:x="238" fg:w="1"/><text x="4.8966%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::list::ListVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.04%)</title><rect x="4.6661%" y="229" width="0.0390%" height="15" fill="rgb(224,114,35)" fg:x="239" fg:w="2"/><text x="4.9161%" y="239.50"></text></g><g><title>publisher`alloy_primitives::bits::serde::_&lt;impl serde::de::Deserialize for alloy_primitives::bits::fixed::FixedBytes&lt;_&gt;&gt;::deserialize (2 samples, 0.04%)</title><rect x="4.6661%" y="213" width="0.0390%" height="15" fill="rgb(245,159,27)" fg:x="239" fg:w="2"/><text x="4.9161%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="4.7052%" y="229" width="0.0195%" height="15" fill="rgb(245,172,44)" fg:x="241" fg:w="1"/><text x="4.9552%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="4.7247%" y="213" width="0.0195%" height="15" fill="rgb(236,23,11)" fg:x="242" fg:w="1"/><text x="4.9747%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.12%)</title><rect x="4.7442%" y="213" width="0.1171%" height="15" fill="rgb(205,117,38)" fg:x="243" fg:w="6"/><text x="4.9942%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.06%)</title><rect x="4.8614%" y="213" width="0.0586%" height="15" fill="rgb(237,72,25)" fg:x="249" fg:w="3"/><text x="5.1114%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="4.9004%" y="197" width="0.0195%" height="15" fill="rgb(244,70,9)" fg:x="251" fg:w="1"/><text x="5.1504%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="4.9200%" y="213" width="0.0195%" height="15" fill="rgb(217,125,39)" fg:x="252" fg:w="1"/><text x="5.1700%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="5.0176%" y="197" width="0.0195%" height="15" fill="rgb(235,36,10)" fg:x="257" fg:w="1"/><text x="5.2676%" y="207.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.84%)</title><rect x="5.0371%" y="197" width="0.8395%" height="15" fill="rgb(251,123,47)" fg:x="258" fg:w="43"/><text x="5.2871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.04%)</title><rect x="5.8961%" y="181" width="0.0390%" height="15" fill="rgb(221,13,13)" fg:x="302" fg:w="2"/><text x="6.1461%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="5.9938%" y="133" width="0.0195%" height="15" fill="rgb(238,131,9)" fg:x="307" fg:w="1"/><text x="6.2438%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.10%)</title><rect x="6.0133%" y="133" width="0.0976%" height="15" fill="rgb(211,50,8)" fg:x="308" fg:w="5"/><text x="6.2633%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="6.1109%" y="133" width="0.0390%" height="15" fill="rgb(245,182,24)" fg:x="313" fg:w="2"/><text x="6.3609%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="6.1109%" y="117" width="0.0390%" height="15" fill="rgb(242,14,37)" fg:x="313" fg:w="2"/><text x="6.3609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.04%)</title><rect x="6.1109%" y="101" width="0.0390%" height="15" fill="rgb(246,228,12)" fg:x="313" fg:w="2"/><text x="6.3609%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.04%)</title><rect x="6.1109%" y="85" width="0.0390%" height="15" fill="rgb(213,55,15)" fg:x="313" fg:w="2"/><text x="6.3609%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.23%)</title><rect x="5.9547%" y="149" width="0.2343%" height="15" fill="rgb(209,9,3)" fg:x="305" fg:w="12"/><text x="6.2047%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="6.1499%" y="133" width="0.0390%" height="15" fill="rgb(230,59,30)" fg:x="315" fg:w="2"/><text x="6.3999%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (14 samples, 0.27%)</title><rect x="5.9352%" y="165" width="0.2733%" height="15" fill="rgb(209,121,21)" fg:x="304" fg:w="14"/><text x="6.1852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="6.1890%" y="149" width="0.0195%" height="15" fill="rgb(220,109,13)" fg:x="317" fg:w="1"/><text x="6.4390%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.35%)</title><rect x="5.8766%" y="197" width="0.3514%" height="15" fill="rgb(232,18,1)" fg:x="301" fg:w="18"/><text x="6.1266%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (15 samples, 0.29%)</title><rect x="5.9352%" y="181" width="0.2929%" height="15" fill="rgb(215,41,42)" fg:x="304" fg:w="15"/><text x="6.1852%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="6.2085%" y="165" width="0.0195%" height="15" fill="rgb(224,123,36)" fg:x="318" fg:w="1"/><text x="6.4585%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (67 samples, 1.31%)</title><rect x="4.9395%" y="213" width="1.3081%" height="15" fill="rgb(240,125,3)" fg:x="253" fg:w="67"/><text x="5.1895%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="6.2280%" y="197" width="0.0195%" height="15" fill="rgb(205,98,50)" fg:x="319" fg:w="1"/><text x="6.4780%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (82 samples, 1.60%)</title><rect x="4.6661%" y="245" width="1.6009%" height="15" fill="rgb(205,185,37)" fg:x="239" fg:w="82"/><text x="4.9161%" y="255.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (79 samples, 1.54%)</title><rect x="4.7247%" y="229" width="1.5424%" height="15" fill="rgb(238,207,15)" fg:x="242" fg:w="79"/><text x="4.9747%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.02%)</title><rect x="6.2476%" y="213" width="0.0195%" height="15" fill="rgb(213,199,42)" fg:x="320" fg:w="1"/><text x="6.4976%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="6.2671%" y="245" width="0.0195%" height="15" fill="rgb(235,201,11)" fg:x="321" fg:w="1"/><text x="6.5171%" y="255.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;32_usize&gt;&gt;&gt; (3 samples, 0.06%)</title><rect x="6.2866%" y="245" width="0.0586%" height="15" fill="rgb(207,46,11)" fg:x="322" fg:w="3"/><text x="6.5366%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="6.2866%" y="229" width="0.0586%" height="15" fill="rgb(241,35,35)" fg:x="322" fg:w="3"/><text x="6.5366%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="6.3452%" y="229" width="0.0390%" height="15" fill="rgb(243,32,47)" fg:x="325" fg:w="2"/><text x="6.5952%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;::deserialize_any (227 samples, 4.43%)</title><rect x="1.9914%" y="261" width="4.4319%" height="15" fill="rgb(247,202,23)" fg:x="102" fg:w="227"/><text x="2.2414%" y="271.50">publi..</text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::list::List&lt;ethereum_consensus::phase0::validator::Validator,1099511627776_usize&gt;&gt; (4 samples, 0.08%)</title><rect x="6.3452%" y="245" width="0.0781%" height="15" fill="rgb(219,102,11)" fg:x="325" fg:w="4"/><text x="6.5952%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.04%)</title><rect x="6.3842%" y="229" width="0.0390%" height="15" fill="rgb(243,110,44)" fg:x="327" fg:w="2"/><text x="6.6342%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.04%)</title><rect x="6.3842%" y="213" width="0.0390%" height="15" fill="rgb(222,74,54)" fg:x="327" fg:w="2"/><text x="6.6342%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="6.3842%" y="197" width="0.0390%" height="15" fill="rgb(216,99,12)" fg:x="327" fg:w="2"/><text x="6.6342%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="6.4818%" y="229" width="0.0195%" height="15" fill="rgb(226,22,26)" fg:x="332" fg:w="1"/><text x="6.7318%" y="239.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="6.5014%" y="229" width="0.0195%" height="15" fill="rgb(217,163,10)" fg:x="333" fg:w="1"/><text x="6.7514%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="6.5209%" y="213" width="0.0195%" height="15" fill="rgb(213,25,53)" fg:x="334" fg:w="1"/><text x="6.7709%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="6.5209%" y="197" width="0.0195%" height="15" fill="rgb(252,105,26)" fg:x="334" fg:w="1"/><text x="6.7709%" y="207.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.25%)</title><rect x="6.5599%" y="197" width="0.2538%" height="15" fill="rgb(220,39,43)" fg:x="336" fg:w="13"/><text x="6.8099%" y="207.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (17 samples, 0.33%)</title><rect x="6.5209%" y="229" width="0.3319%" height="15" fill="rgb(229,68,48)" fg:x="334" fg:w="17"/><text x="6.7709%" y="239.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (16 samples, 0.31%)</title><rect x="6.5404%" y="213" width="0.3124%" height="15" fill="rgb(252,8,32)" fg:x="335" fg:w="16"/><text x="6.7904%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.04%)</title><rect x="6.8137%" y="197" width="0.0390%" height="15" fill="rgb(223,20,43)" fg:x="349" fg:w="2"/><text x="7.0637%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="6.8333%" y="181" width="0.0195%" height="15" fill="rgb(229,81,49)" fg:x="350" fg:w="1"/><text x="7.0833%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="6.8333%" y="165" width="0.0195%" height="15" fill="rgb(236,28,36)" fg:x="350" fg:w="1"/><text x="7.0833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="6.8723%" y="213" width="0.0195%" height="15" fill="rgb(249,185,26)" fg:x="352" fg:w="1"/><text x="7.1223%" y="223.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (3 samples, 0.06%)</title><rect x="6.8528%" y="229" width="0.0586%" height="15" fill="rgb(249,174,33)" fg:x="351" fg:w="3"/><text x="7.1028%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.02%)</title><rect x="6.8918%" y="213" width="0.0195%" height="15" fill="rgb(233,201,37)" fg:x="353" fg:w="1"/><text x="7.1418%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="6.8918%" y="197" width="0.0195%" height="15" fill="rgb(221,78,26)" fg:x="353" fg:w="1"/><text x="7.1418%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="6.9309%" y="197" width="0.0195%" height="15" fill="rgb(250,127,30)" fg:x="355" fg:w="1"/><text x="7.1809%" y="207.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.10%)</title><rect x="6.9504%" y="197" width="0.0976%" height="15" fill="rgb(230,49,44)" fg:x="356" fg:w="5"/><text x="7.2004%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (34 samples, 0.66%)</title><rect x="6.4233%" y="245" width="0.6638%" height="15" fill="rgb(229,67,23)" fg:x="329" fg:w="34"/><text x="6.6733%" y="255.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (9 samples, 0.18%)</title><rect x="6.9114%" y="229" width="0.1757%" height="15" fill="rgb(249,83,47)" fg:x="354" fg:w="9"/><text x="7.1614%" y="239.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (9 samples, 0.18%)</title><rect x="6.9114%" y="213" width="0.1757%" height="15" fill="rgb(215,43,3)" fg:x="354" fg:w="9"/><text x="7.1614%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.04%)</title><rect x="7.0480%" y="197" width="0.0390%" height="15" fill="rgb(238,154,13)" fg:x="361" fg:w="2"/><text x="7.2980%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="7.0480%" y="181" width="0.0390%" height="15" fill="rgb(219,56,2)" fg:x="361" fg:w="2"/><text x="7.2980%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.04%)</title><rect x="7.0480%" y="165" width="0.0390%" height="15" fill="rgb(233,0,4)" fg:x="361" fg:w="2"/><text x="7.2980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.04%)</title><rect x="7.0480%" y="149" width="0.0390%" height="15" fill="rgb(235,30,7)" fg:x="361" fg:w="2"/><text x="7.2980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="7.0480%" y="133" width="0.0390%" height="15" fill="rgb(250,79,13)" fg:x="361" fg:w="2"/><text x="7.2980%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="7.0676%" y="117" width="0.0195%" height="15" fill="rgb(211,146,34)" fg:x="362" fg:w="1"/><text x="7.3176%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="7.1066%" y="229" width="0.0195%" height="15" fill="rgb(228,22,38)" fg:x="364" fg:w="1"/><text x="7.3566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="7.1261%" y="229" width="0.0195%" height="15" fill="rgb(235,168,5)" fg:x="365" fg:w="1"/><text x="7.3761%" y="239.50"></text></g><g><title>publisher`&lt;ssz_rs::list::ListVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.04%)</title><rect x="7.1456%" y="229" width="0.0390%" height="15" fill="rgb(221,155,16)" fg:x="366" fg:w="2"/><text x="7.3956%" y="239.50"></text></g><g><title>publisher`alloy_primitives::bits::serde::_&lt;impl serde::de::Deserialize for alloy_primitives::bits::fixed::FixedBytes&lt;_&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect x="7.1652%" y="213" width="0.0195%" height="15" fill="rgb(215,215,53)" fg:x="367" fg:w="1"/><text x="7.4152%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="7.1847%" y="213" width="0.0195%" height="15" fill="rgb(223,4,10)" fg:x="368" fg:w="1"/><text x="7.4347%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="7.2042%" y="213" width="0.0195%" height="15" fill="rgb(234,103,6)" fg:x="369" fg:w="1"/><text x="7.4542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="7.2237%" y="213" width="0.0195%" height="15" fill="rgb(227,97,0)" fg:x="370" fg:w="1"/><text x="7.4737%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="7.2237%" y="197" width="0.0195%" height="15" fill="rgb(234,150,53)" fg:x="370" fg:w="1"/><text x="7.4737%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="7.2237%" y="181" width="0.0195%" height="15" fill="rgb(228,201,54)" fg:x="370" fg:w="1"/><text x="7.4737%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="7.2433%" y="213" width="0.0195%" height="15" fill="rgb(222,22,37)" fg:x="371" fg:w="1"/><text x="7.4933%" y="223.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.08%)</title><rect x="7.2823%" y="197" width="0.0781%" height="15" fill="rgb(237,53,32)" fg:x="373" fg:w="4"/><text x="7.5323%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="7.3604%" y="181" width="0.0195%" height="15" fill="rgb(233,25,53)" fg:x="377" fg:w="1"/><text x="7.6104%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="7.3995%" y="117" width="0.0195%" height="15" fill="rgb(210,40,34)" fg:x="379" fg:w="1"/><text x="7.6495%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.04%)</title><rect x="7.3995%" y="149" width="0.0390%" height="15" fill="rgb(241,220,44)" fg:x="379" fg:w="2"/><text x="7.6495%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="7.3995%" y="133" width="0.0390%" height="15" fill="rgb(235,28,35)" fg:x="379" fg:w="2"/><text x="7.6495%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="7.4190%" y="117" width="0.0195%" height="15" fill="rgb(210,56,17)" fg:x="380" fg:w="1"/><text x="7.6690%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (10 samples, 0.20%)</title><rect x="7.2628%" y="213" width="0.1952%" height="15" fill="rgb(224,130,29)" fg:x="372" fg:w="10"/><text x="7.5128%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.10%)</title><rect x="7.3604%" y="197" width="0.0976%" height="15" fill="rgb(235,212,8)" fg:x="377" fg:w="5"/><text x="7.6104%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (4 samples, 0.08%)</title><rect x="7.3799%" y="181" width="0.0781%" height="15" fill="rgb(223,33,50)" fg:x="378" fg:w="4"/><text x="7.6299%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.06%)</title><rect x="7.3995%" y="165" width="0.0586%" height="15" fill="rgb(219,149,13)" fg:x="379" fg:w="3"/><text x="7.6495%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="7.4385%" y="149" width="0.0195%" height="15" fill="rgb(250,156,29)" fg:x="381" fg:w="1"/><text x="7.6885%" y="159.50"></text></g><g><title>publisher`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (310 samples, 6.05%)</title><rect x="1.4447%" y="277" width="6.0523%" height="15" fill="rgb(216,193,19)" fg:x="74" fg:w="310"/><text x="1.6947%" y="287.50">publishe..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_struct (55 samples, 1.07%)</title><rect x="6.4233%" y="261" width="1.0738%" height="15" fill="rgb(216,135,14)" fg:x="329" fg:w="55"/><text x="6.6733%" y="271.50"></text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (21 samples, 0.41%)</title><rect x="7.0871%" y="245" width="0.4100%" height="15" fill="rgb(241,47,5)" fg:x="363" fg:w="21"/><text x="7.3371%" y="255.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (16 samples, 0.31%)</title><rect x="7.1847%" y="229" width="0.3124%" height="15" fill="rgb(233,42,35)" fg:x="368" fg:w="16"/><text x="7.4347%" y="239.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.04%)</title><rect x="7.4580%" y="213" width="0.0390%" height="15" fill="rgb(231,13,6)" fg:x="382" fg:w="2"/><text x="7.7080%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="7.4775%" y="197" width="0.0195%" height="15" fill="rgb(207,181,40)" fg:x="383" fg:w="1"/><text x="7.7275%" y="207.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (7 samples, 0.14%)</title><rect x="7.5556%" y="229" width="0.1367%" height="15" fill="rgb(254,173,49)" fg:x="387" fg:w="7"/><text x="7.8056%" y="239.50"></text></g><g><title>publisher`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.12%)</title><rect x="7.5752%" y="213" width="0.1171%" height="15" fill="rgb(221,1,38)" fg:x="388" fg:w="6"/><text x="7.8252%" y="223.50"></text></g><g><title>publisher`core::str::converts::from_utf8 (2 samples, 0.04%)</title><rect x="7.6533%" y="197" width="0.0390%" height="15" fill="rgb(206,124,46)" fg:x="392" fg:w="2"/><text x="7.9033%" y="207.50"></text></g><g><title>publisher`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.02%)</title><rect x="7.6923%" y="229" width="0.0195%" height="15" fill="rgb(249,21,11)" fg:x="394" fg:w="1"/><text x="7.9423%" y="239.50"></text></g><g><title>publisher`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.06%)</title><rect x="7.7118%" y="229" width="0.0586%" height="15" fill="rgb(222,201,40)" fg:x="395" fg:w="3"/><text x="7.9618%" y="239.50"></text></g><g><title>publisher`core::str::converts::from_utf8 (3 samples, 0.06%)</title><rect x="7.7118%" y="213" width="0.0586%" height="15" fill="rgb(235,61,29)" fg:x="395" fg:w="3"/><text x="7.9618%" y="223.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::get_state::_{{closure}} (394 samples, 7.69%)</title><rect x="0.0976%" y="309" width="7.6923%" height="15" fill="rgb(219,207,3)" fg:x="5" fg:w="394"/><text x="0.3476%" y="319.50">publisher`a..</text></g><g><title>publisher`serde_json::de::from_slice (329 samples, 6.42%)</title><rect x="1.3667%" y="293" width="6.4233%" height="15" fill="rgb(222,56,46)" fg:x="70" fg:w="329"/><text x="1.6167%" y="303.50">publishe..</text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (15 samples, 0.29%)</title><rect x="7.4971%" y="277" width="0.2929%" height="15" fill="rgb(239,76,54)" fg:x="384" fg:w="15"/><text x="7.7471%" y="287.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (15 samples, 0.29%)</title><rect x="7.4971%" y="261" width="0.2929%" height="15" fill="rgb(231,124,27)" fg:x="384" fg:w="15"/><text x="7.7471%" y="271.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (14 samples, 0.27%)</title><rect x="7.5166%" y="245" width="0.2733%" height="15" fill="rgb(249,195,6)" fg:x="385" fg:w="14"/><text x="7.7666%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="7.7704%" y="229" width="0.0195%" height="15" fill="rgb(237,174,47)" fg:x="398" fg:w="1"/><text x="8.0204%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="7.7704%" y="213" width="0.0195%" height="15" fill="rgb(206,201,31)" fg:x="398" fg:w="1"/><text x="8.0204%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="7.7704%" y="197" width="0.0195%" height="15" fill="rgb(231,57,52)" fg:x="398" fg:w="1"/><text x="8.0204%" y="207.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::new_with_cache (1 samples, 0.02%)</title><rect x="7.7899%" y="309" width="0.0195%" height="15" fill="rgb(248,177,22)" fg:x="399" fg:w="1"/><text x="8.0399%" y="319.50"></text></g><g><title>publisher`reqwest::async_impl::client::ClientBuilder::build (1 samples, 0.02%)</title><rect x="7.7899%" y="293" width="0.0195%" height="15" fill="rgb(215,211,37)" fg:x="399" fg:w="1"/><text x="8.0399%" y="303.50"></text></g><g><title>SystemConfiguration`SCDynamicStoreCopyProxiesWithOptions (1 samples, 0.02%)</title><rect x="7.7899%" y="277" width="0.0195%" height="15" fill="rgb(241,128,51)" fg:x="399" fg:w="1"/><text x="8.0399%" y="287.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="7.7899%" y="261" width="0.0195%" height="15" fill="rgb(227,165,31)" fg:x="399" fg:w="1"/><text x="8.0399%" y="271.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="7.7899%" y="245" width="0.0195%" height="15" fill="rgb(228,167,24)" fg:x="399" fg:w="1"/><text x="8.0399%" y="255.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="7.7899%" y="229" width="0.0195%" height="15" fill="rgb(228,143,12)" fg:x="399" fg:w="1"/><text x="8.0399%" y="239.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="7.7899%" y="213" width="0.0195%" height="15" fill="rgb(249,149,8)" fg:x="399" fg:w="1"/><text x="8.0399%" y="223.50"></text></g><g><title>CoreFoundation`__76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke (1 samples, 0.02%)</title><rect x="7.7899%" y="197" width="0.0195%" height="15" fill="rgb(243,35,44)" fg:x="399" fg:w="1"/><text x="8.0399%" y="207.50"></text></g><g><title>CoreFoundation`-[CFPrefsSource copyValueForKey:] (1 samples, 0.02%)</title><rect x="7.7899%" y="181" width="0.0195%" height="15" fill="rgb(246,89,9)" fg:x="399" fg:w="1"/><text x="8.0399%" y="191.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_copyValueForKey:] (1 samples, 0.02%)</title><rect x="7.7899%" y="165" width="0.0195%" height="15" fill="rgb(233,213,13)" fg:x="399" fg:w="1"/><text x="8.0399%" y="175.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_getDictionary:] (1 samples, 0.02%)</title><rect x="7.7899%" y="149" width="0.0195%" height="15" fill="rgb(233,141,41)" fg:x="399" fg:w="1"/><text x="8.0399%" y="159.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:] (1 samples, 0.02%)</title><rect x="7.7899%" y="133" width="0.0195%" height="15" fill="rgb(239,167,4)" fg:x="399" fg:w="1"/><text x="8.0399%" y="143.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource createRequestNewContentMessageForDaemon:] (1 samples, 0.02%)</title><rect x="7.7899%" y="117" width="0.0195%" height="15" fill="rgb(209,217,16)" fg:x="399" fg:w="1"/><text x="8.0399%" y="127.50"></text></g><g><title>CoreFoundation`-[CFPrefsPlistSource createRequestNewContentMessageForDaemon:] (1 samples, 0.02%)</title><rect x="7.7899%" y="101" width="0.0195%" height="15" fill="rgb(219,88,35)" fg:x="399" fg:w="1"/><text x="8.0399%" y="111.50"></text></g><g><title>CoreFoundation`__62-[CFPrefsPlistSource createRequestNewContentMessageForDaemon:]_block_invoke (1 samples, 0.02%)</title><rect x="7.7899%" y="85" width="0.0195%" height="15" fill="rgb(220,193,23)" fg:x="399" fg:w="1"/><text x="8.0399%" y="95.50"></text></g><g><title>CoreFoundation`-[CFPrefsPlistSource createSynchronizeMessage] (1 samples, 0.02%)</title><rect x="7.7899%" y="69" width="0.0195%" height="15" fill="rgb(230,90,52)" fg:x="399" fg:w="1"/><text x="8.0399%" y="79.50"></text></g><g><title>CoreFoundation`_CFPrefsEncodeValueIntoMessage (1 samples, 0.02%)</title><rect x="7.7899%" y="53" width="0.0195%" height="15" fill="rgb(252,106,19)" fg:x="399" fg:w="1"/><text x="8.0399%" y="63.50"></text></g><g><title>CoreFoundation`CFStringGetLength (1 samples, 0.02%)</title><rect x="7.7899%" y="37" width="0.0195%" height="15" fill="rgb(206,74,20)" fg:x="399" fg:w="1"/><text x="8.0399%" y="47.50"></text></g><g><title>publisher`clap_builder::derive::Parser::parse (1 samples, 0.02%)</title><rect x="7.8094%" y="309" width="0.0195%" height="15" fill="rgb(230,138,44)" fg:x="400" fg:w="1"/><text x="8.0594%" y="319.50"></text></g><g><title>publisher`clap_builder::builder::command::Command::_do_parse (1 samples, 0.02%)</title><rect x="7.8094%" y="293" width="0.0195%" height="15" fill="rgb(235,182,43)" fg:x="400" fg:w="1"/><text x="8.0594%" y="303.50"></text></g><g><title>publisher`clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="7.8094%" y="277" width="0.0195%" height="15" fill="rgb(242,16,51)" fg:x="400" fg:w="1"/><text x="8.0594%" y="287.50"></text></g><g><title>publisher`clap_builder::util::graph::ChildGraph&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="7.8094%" y="261" width="0.0195%" height="15" fill="rgb(248,9,4)" fg:x="400" fg:w="1"/><text x="8.0594%" y="271.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (1 samples, 0.02%)</title><rect x="7.8290%" y="245" width="0.0195%" height="15" fill="rgb(210,31,22)" fg:x="401" fg:w="1"/><text x="8.0790%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="7.8485%" y="229" width="0.0195%" height="15" fill="rgb(239,54,39)" fg:x="402" fg:w="1"/><text x="8.0985%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="7.8680%" y="229" width="0.0390%" height="15" fill="rgb(230,99,41)" fg:x="403" fg:w="2"/><text x="8.1180%" y="239.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="7.9071%" y="229" width="0.0195%" height="15" fill="rgb(253,106,12)" fg:x="405" fg:w="1"/><text x="8.1571%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="7.9266%" y="165" width="0.0195%" height="15" fill="rgb(213,46,41)" fg:x="406" fg:w="1"/><text x="8.1766%" y="175.50"></text></g><g><title>publisher`&lt;ethereum_consensus::phase0::operations::Checkpoint as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (2 samples, 0.04%)</title><rect x="7.9266%" y="197" width="0.0390%" height="15" fill="rgb(215,133,35)" fg:x="406" fg:w="2"/><text x="8.1766%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (2 samples, 0.04%)</title><rect x="7.9266%" y="181" width="0.0390%" height="15" fill="rgb(213,28,5)" fg:x="406" fg:w="2"/><text x="8.1766%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="7.9461%" y="165" width="0.0195%" height="15" fill="rgb(215,77,49)" fg:x="407" fg:w="1"/><text x="8.1961%" y="175.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="7.9461%" y="149" width="0.0195%" height="15" fill="rgb(248,100,22)" fg:x="407" fg:w="1"/><text x="8.1961%" y="159.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::AttestationData::assemble_chunks (3 samples, 0.06%)</title><rect x="7.9266%" y="213" width="0.0586%" height="15" fill="rgb(208,67,9)" fg:x="406" fg:w="3"/><text x="8.1766%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (1 samples, 0.02%)</title><rect x="7.9656%" y="197" width="0.0195%" height="15" fill="rgb(219,133,21)" fg:x="408" fg:w="1"/><text x="8.2156%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="7.9656%" y="181" width="0.0195%" height="15" fill="rgb(246,46,29)" fg:x="408" fg:w="1"/><text x="8.2156%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="7.9656%" y="165" width="0.0195%" height="15" fill="rgb(246,185,52)" fg:x="408" fg:w="1"/><text x="8.2156%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::PendingAttestation&lt;_&gt;::assemble_chunks (4 samples, 0.08%)</title><rect x="7.9266%" y="229" width="0.0781%" height="15" fill="rgb(252,136,11)" fg:x="406" fg:w="4"/><text x="8.1766%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (1 samples, 0.02%)</title><rect x="7.9852%" y="213" width="0.0195%" height="15" fill="rgb(219,138,53)" fg:x="409" fg:w="1"/><text x="8.2352%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="7.9852%" y="197" width="0.0195%" height="15" fill="rgb(211,51,23)" fg:x="409" fg:w="1"/><text x="8.2352%" y="207.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="7.9852%" y="181" width="0.0195%" height="15" fill="rgb(247,221,28)" fg:x="409" fg:w="1"/><text x="8.2352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="8.0047%" y="213" width="0.0195%" height="15" fill="rgb(251,222,45)" fg:x="410" fg:w="1"/><text x="8.2547%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.02%)</title><rect x="8.0242%" y="197" width="0.0195%" height="15" fill="rgb(217,162,53)" fg:x="411" fg:w="1"/><text x="8.2742%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="8.0437%" y="197" width="0.0195%" height="15" fill="rgb(229,93,14)" fg:x="412" fg:w="1"/><text x="8.2937%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="8.0828%" y="181" width="0.0195%" height="15" fill="rgb(209,67,49)" fg:x="414" fg:w="1"/><text x="8.3328%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (5 samples, 0.10%)</title><rect x="8.1023%" y="181" width="0.0976%" height="15" fill="rgb(213,87,29)" fg:x="415" fg:w="5"/><text x="8.3523%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="8.1999%" y="165" width="0.0195%" height="15" fill="rgb(205,151,52)" fg:x="420" fg:w="1"/><text x="8.4499%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="8.2194%" y="165" width="0.0195%" height="15" fill="rgb(253,215,39)" fg:x="421" fg:w="1"/><text x="8.4694%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (14 samples, 0.27%)</title><rect x="8.0633%" y="197" width="0.2733%" height="15" fill="rgb(221,220,41)" fg:x="413" fg:w="14"/><text x="8.3133%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (7 samples, 0.14%)</title><rect x="8.1999%" y="181" width="0.1367%" height="15" fill="rgb(218,133,21)" fg:x="420" fg:w="7"/><text x="8.4499%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (5 samples, 0.10%)</title><rect x="8.2390%" y="165" width="0.0976%" height="15" fill="rgb(221,193,43)" fg:x="422" fg:w="5"/><text x="8.4890%" y="175.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (18 samples, 0.35%)</title><rect x="8.0242%" y="213" width="0.3514%" height="15" fill="rgb(240,128,52)" fg:x="411" fg:w="18"/><text x="8.2742%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (2 samples, 0.04%)</title><rect x="8.3366%" y="197" width="0.0390%" height="15" fill="rgb(253,114,12)" fg:x="427" fg:w="2"/><text x="8.5866%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="8.3561%" y="181" width="0.0195%" height="15" fill="rgb(215,223,47)" fg:x="428" fg:w="1"/><text x="8.6061%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="8.3952%" y="181" width="0.0195%" height="15" fill="rgb(248,225,23)" fg:x="430" fg:w="1"/><text x="8.6452%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.02%)</title><rect x="8.4537%" y="165" width="0.0195%" height="15" fill="rgb(250,108,0)" fg:x="433" fg:w="1"/><text x="8.7037%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (6 samples, 0.12%)</title><rect x="8.3756%" y="197" width="0.1171%" height="15" fill="rgb(228,208,7)" fg:x="429" fg:w="6"/><text x="8.6256%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (4 samples, 0.08%)</title><rect x="8.4147%" y="181" width="0.0781%" height="15" fill="rgb(244,45,10)" fg:x="431" fg:w="4"/><text x="8.6647%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="8.4733%" y="165" width="0.0195%" height="15" fill="rgb(207,125,25)" fg:x="434" fg:w="1"/><text x="8.7233%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="8.5123%" y="181" width="0.0195%" height="15" fill="rgb(210,195,18)" fg:x="436" fg:w="1"/><text x="8.7623%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="8.5123%" y="165" width="0.0195%" height="15" fill="rgb(249,80,12)" fg:x="436" fg:w="1"/><text x="8.7623%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="8.5123%" y="149" width="0.0195%" height="15" fill="rgb(221,65,9)" fg:x="436" fg:w="1"/><text x="8.7623%" y="159.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (29 samples, 0.57%)</title><rect x="8.0047%" y="229" width="0.5662%" height="15" fill="rgb(235,49,36)" fg:x="410" fg:w="29"/><text x="8.2547%" y="239.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (10 samples, 0.20%)</title><rect x="8.3756%" y="213" width="0.1952%" height="15" fill="rgb(225,32,20)" fg:x="429" fg:w="10"/><text x="8.6256%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (4 samples, 0.08%)</title><rect x="8.4928%" y="197" width="0.0781%" height="15" fill="rgb(215,141,46)" fg:x="435" fg:w="4"/><text x="8.7428%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="8.5318%" y="181" width="0.0390%" height="15" fill="rgb(250,160,47)" fg:x="437" fg:w="2"/><text x="8.7818%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="8.5709%" y="213" width="0.0390%" height="15" fill="rgb(216,222,40)" fg:x="439" fg:w="2"/><text x="8.8209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="8.6099%" y="213" width="0.0195%" height="15" fill="rgb(234,217,39)" fg:x="441" fg:w="1"/><text x="8.8599%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="8.6294%" y="213" width="0.0195%" height="15" fill="rgb(207,178,40)" fg:x="442" fg:w="1"/><text x="8.8794%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (29 samples, 0.57%)</title><rect x="8.6490%" y="213" width="0.5662%" height="15" fill="rgb(221,136,13)" fg:x="443" fg:w="29"/><text x="8.8990%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="9.2737%" y="197" width="0.0195%" height="15" fill="rgb(249,199,10)" fg:x="475" fg:w="1"/><text x="9.5237%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2 samples, 0.04%)</title><rect x="9.2932%" y="197" width="0.0390%" height="15" fill="rgb(249,222,13)" fg:x="476" fg:w="2"/><text x="9.5432%" y="207.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks (104 samples, 2.03%)</title><rect x="7.8485%" y="245" width="2.0305%" height="15" fill="rgb(244,185,38)" fg:x="402" fg:w="104"/><text x="8.0985%" y="255.50">p..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (67 samples, 1.31%)</title><rect x="8.5709%" y="229" width="1.3081%" height="15" fill="rgb(236,202,9)" fg:x="439" fg:w="67"/><text x="8.8209%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (34 samples, 0.66%)</title><rect x="9.2152%" y="213" width="0.6638%" height="15" fill="rgb(250,229,37)" fg:x="472" fg:w="34"/><text x="9.4652%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (28 samples, 0.55%)</title><rect x="9.3323%" y="197" width="0.5467%" height="15" fill="rgb(206,174,23)" fg:x="478" fg:w="28"/><text x="9.5823%" y="207.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (6 samples, 0.12%)</title><rect x="9.8985%" y="229" width="0.1171%" height="15" fill="rgb(211,33,43)" fg:x="507" fg:w="6"/><text x="10.1485%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="10.0547%" y="213" width="0.0195%" height="15" fill="rgb(245,58,50)" fg:x="515" fg:w="1"/><text x="10.3047%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="10.0742%" y="213" width="0.0195%" height="15" fill="rgb(244,68,36)" fg:x="516" fg:w="1"/><text x="10.3242%" y="223.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (121 samples, 2.36%)</title><rect x="7.8290%" y="261" width="2.3624%" height="15" fill="rgb(232,229,15)" fg:x="401" fg:w="121"/><text x="8.0790%" y="271.50">pu..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (16 samples, 0.31%)</title><rect x="9.8790%" y="245" width="0.3124%" height="15" fill="rgb(254,30,23)" fg:x="506" fg:w="16"/><text x="10.1290%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (9 samples, 0.18%)</title><rect x="10.0156%" y="229" width="0.1757%" height="15" fill="rgb(235,160,14)" fg:x="513" fg:w="9"/><text x="10.2656%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (5 samples, 0.10%)</title><rect x="10.0937%" y="213" width="0.0976%" height="15" fill="rgb(212,155,44)" fg:x="517" fg:w="5"/><text x="10.3437%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="10.1913%" y="245" width="0.0195%" height="15" fill="rgb(226,2,50)" fg:x="522" fg:w="1"/><text x="10.4413%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="10.2109%" y="245" width="0.0195%" height="15" fill="rgb(234,177,6)" fg:x="523" fg:w="1"/><text x="10.4609%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="10.2304%" y="213" width="0.0195%" height="15" fill="rgb(217,24,9)" fg:x="524" fg:w="1"/><text x="10.4804%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="10.2499%" y="213" width="0.0390%" height="15" fill="rgb(220,13,46)" fg:x="525" fg:w="2"/><text x="10.4999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="10.3085%" y="197" width="0.0195%" height="15" fill="rgb(239,221,27)" fg:x="528" fg:w="1"/><text x="10.5585%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="10.3280%" y="197" width="0.0390%" height="15" fill="rgb(222,198,25)" fg:x="529" fg:w="2"/><text x="10.5780%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="10.3670%" y="197" width="0.0195%" height="15" fill="rgb(211,99,13)" fg:x="531" fg:w="1"/><text x="10.6170%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="10.3866%" y="197" width="0.0195%" height="15" fill="rgb(232,111,31)" fg:x="532" fg:w="1"/><text x="10.6366%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="10.4061%" y="181" width="0.0195%" height="15" fill="rgb(245,82,37)" fg:x="533" fg:w="1"/><text x="10.6561%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (9 samples, 0.18%)</title><rect x="10.2889%" y="213" width="0.1757%" height="15" fill="rgb(227,149,46)" fg:x="527" fg:w="9"/><text x="10.5389%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (3 samples, 0.06%)</title><rect x="10.4061%" y="197" width="0.0586%" height="15" fill="rgb(218,36,50)" fg:x="533" fg:w="3"/><text x="10.6561%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2 samples, 0.04%)</title><rect x="10.4256%" y="181" width="0.0390%" height="15" fill="rgb(226,80,48)" fg:x="534" fg:w="2"/><text x="10.6756%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::elements_to_chunks (17 samples, 0.33%)</title><rect x="10.2304%" y="245" width="0.3319%" height="15" fill="rgb(238,224,15)" fg:x="524" fg:w="17"/><text x="10.4804%" y="255.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (17 samples, 0.33%)</title><rect x="10.2304%" y="229" width="0.3319%" height="15" fill="rgb(241,136,10)" fg:x="524" fg:w="17"/><text x="10.4804%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (5 samples, 0.10%)</title><rect x="10.4647%" y="213" width="0.0976%" height="15" fill="rgb(208,32,45)" fg:x="536" fg:w="5"/><text x="10.7147%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.04%)</title><rect x="10.5232%" y="197" width="0.0390%" height="15" fill="rgb(207,135,9)" fg:x="539" fg:w="2"/><text x="10.7732%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="10.5428%" y="181" width="0.0195%" height="15" fill="rgb(206,86,44)" fg:x="540" fg:w="1"/><text x="10.7928%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="10.5428%" y="165" width="0.0195%" height="15" fill="rgb(245,177,15)" fg:x="540" fg:w="1"/><text x="10.7928%" y="175.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (1 samples, 0.02%)</title><rect x="10.5623%" y="229" width="0.0195%" height="15" fill="rgb(206,64,50)" fg:x="541" fg:w="1"/><text x="10.8123%" y="239.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="10.5818%" y="229" width="0.0195%" height="15" fill="rgb(234,36,40)" fg:x="542" fg:w="1"/><text x="10.8318%" y="239.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="10.6013%" y="229" width="0.0195%" height="15" fill="rgb(213,64,8)" fg:x="543" fg:w="1"/><text x="10.8513%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (13 samples, 0.25%)</title><rect x="10.6209%" y="229" width="0.2538%" height="15" fill="rgb(210,75,36)" fg:x="544" fg:w="13"/><text x="10.8709%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="10.8747%" y="213" width="0.0390%" height="15" fill="rgb(229,88,21)" fg:x="557" fg:w="2"/><text x="11.1247%" y="223.50"></text></g><g><title>publisher`&lt;ethereum_consensus::types::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_,_,_,_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (181 samples, 3.53%)</title><rect x="7.8290%" y="293" width="3.5338%" height="15" fill="rgb(252,204,47)" fg:x="401" fg:w="181"/><text x="8.0790%" y="303.50">pub..</text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (181 samples, 3.53%)</title><rect x="7.8290%" y="277" width="3.5338%" height="15" fill="rgb(208,77,27)" fg:x="401" fg:w="181"/><text x="8.0790%" y="287.50">pub..</text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (60 samples, 1.17%)</title><rect x="10.1913%" y="261" width="1.1714%" height="15" fill="rgb(221,76,26)" fg:x="522" fg:w="60"/><text x="10.4413%" y="271.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (41 samples, 0.80%)</title><rect x="10.5623%" y="245" width="0.8005%" height="15" fill="rgb(225,139,18)" fg:x="541" fg:w="41"/><text x="10.8123%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (25 samples, 0.49%)</title><rect x="10.8747%" y="229" width="0.4881%" height="15" fill="rgb(230,137,11)" fg:x="557" fg:w="25"/><text x="11.1247%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (23 samples, 0.45%)</title><rect x="10.9137%" y="213" width="0.4490%" height="15" fill="rgb(212,28,1)" fg:x="559" fg:w="23"/><text x="11.1637%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="11.3627%" y="277" width="0.0195%" height="15" fill="rgb(248,164,17)" fg:x="582" fg:w="1"/><text x="11.6127%" y="287.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ethereum_consensus::phase0::beacon_state::BeaconState&lt;8192_usize,16777216_usize,2048_usize,1099511627776_usize,65536_usize,8192_usize,2048_usize,4096_usize&gt;&gt; (2 samples, 0.04%)</title><rect x="11.3627%" y="293" width="0.0390%" height="15" fill="rgb(222,171,42)" fg:x="582" fg:w="2"/><text x="11.6127%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="11.3823%" y="277" width="0.0195%" height="15" fill="rgb(243,84,45)" fg:x="583" fg:w="1"/><text x="11.6323%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="11.3823%" y="261" width="0.0195%" height="15" fill="rgb(252,49,23)" fg:x="583" fg:w="1"/><text x="11.6323%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="11.3823%" y="245" width="0.0195%" height="15" fill="rgb(215,19,7)" fg:x="583" fg:w="1"/><text x="11.6323%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="11.4018%" y="229" width="0.0195%" height="15" fill="rgb(238,81,41)" fg:x="584" fg:w="1"/><text x="11.6518%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="11.4213%" y="197" width="0.0195%" height="15" fill="rgb(210,199,37)" fg:x="585" fg:w="1"/><text x="11.6713%" y="207.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::PendingAttestation&lt;_&gt;::assemble_chunks (2 samples, 0.04%)</title><rect x="11.4213%" y="229" width="0.0390%" height="15" fill="rgb(244,192,49)" fg:x="585" fg:w="2"/><text x="11.6713%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (2 samples, 0.04%)</title><rect x="11.4213%" y="213" width="0.0390%" height="15" fill="rgb(226,211,11)" fg:x="585" fg:w="2"/><text x="11.6713%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="11.4408%" y="197" width="0.0195%" height="15" fill="rgb(236,162,54)" fg:x="586" fg:w="1"/><text x="11.6908%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="11.4604%" y="197" width="0.0195%" height="15" fill="rgb(220,229,9)" fg:x="587" fg:w="1"/><text x="11.7104%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="11.4799%" y="181" width="0.0195%" height="15" fill="rgb(250,87,22)" fg:x="588" fg:w="1"/><text x="11.7299%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="11.4994%" y="181" width="0.0390%" height="15" fill="rgb(239,43,17)" fg:x="589" fg:w="2"/><text x="11.7494%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (2 samples, 0.04%)</title><rect x="11.5385%" y="181" width="0.0390%" height="15" fill="rgb(231,177,25)" fg:x="591" fg:w="2"/><text x="11.7885%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (6 samples, 0.12%)</title><rect x="11.4799%" y="197" width="0.1171%" height="15" fill="rgb(219,179,1)" fg:x="588" fg:w="6"/><text x="11.7299%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="11.5775%" y="181" width="0.0195%" height="15" fill="rgb(238,219,53)" fg:x="593" fg:w="1"/><text x="11.8275%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="11.5775%" y="165" width="0.0195%" height="15" fill="rgb(232,167,36)" fg:x="593" fg:w="1"/><text x="11.8275%" y="175.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (10 samples, 0.20%)</title><rect x="11.4604%" y="213" width="0.1952%" height="15" fill="rgb(244,19,51)" fg:x="587" fg:w="10"/><text x="11.7104%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (3 samples, 0.06%)</title><rect x="11.5970%" y="197" width="0.0586%" height="15" fill="rgb(224,6,22)" fg:x="594" fg:w="3"/><text x="11.8470%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="11.6361%" y="181" width="0.0195%" height="15" fill="rgb(224,145,5)" fg:x="596" fg:w="1"/><text x="11.8861%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="11.6361%" y="165" width="0.0195%" height="15" fill="rgb(234,130,49)" fg:x="596" fg:w="1"/><text x="11.8861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="11.6361%" y="149" width="0.0195%" height="15" fill="rgb(254,6,2)" fg:x="596" fg:w="1"/><text x="11.8861%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="11.6361%" y="133" width="0.0195%" height="15" fill="rgb(208,96,46)" fg:x="596" fg:w="1"/><text x="11.8861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="11.6361%" y="117" width="0.0195%" height="15" fill="rgb(239,3,39)" fg:x="596" fg:w="1"/><text x="11.8861%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="11.6556%" y="197" width="0.0195%" height="15" fill="rgb(233,210,1)" fg:x="597" fg:w="1"/><text x="11.9056%" y="207.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="11.6751%" y="197" width="0.0195%" height="15" fill="rgb(244,137,37)" fg:x="598" fg:w="1"/><text x="11.9251%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (1 samples, 0.02%)</title><rect x="11.6947%" y="197" width="0.0195%" height="15" fill="rgb(240,136,2)" fg:x="599" fg:w="1"/><text x="11.9447%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.02%)</title><rect x="11.6947%" y="181" width="0.0195%" height="15" fill="rgb(239,18,37)" fg:x="599" fg:w="1"/><text x="11.9447%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.02%)</title><rect x="11.6947%" y="165" width="0.0195%" height="15" fill="rgb(218,185,22)" fg:x="599" fg:w="1"/><text x="11.9447%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (16 samples, 0.31%)</title><rect x="11.4604%" y="229" width="0.3124%" height="15" fill="rgb(225,218,4)" fg:x="587" fg:w="16"/><text x="11.7104%" y="239.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (6 samples, 0.12%)</title><rect x="11.6556%" y="213" width="0.1171%" height="15" fill="rgb(230,182,32)" fg:x="597" fg:w="6"/><text x="11.9056%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (3 samples, 0.06%)</title><rect x="11.7142%" y="197" width="0.0586%" height="15" fill="rgb(242,56,43)" fg:x="600" fg:w="3"/><text x="11.9642%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.04%)</title><rect x="11.7337%" y="181" width="0.0390%" height="15" fill="rgb(233,99,24)" fg:x="601" fg:w="2"/><text x="11.9837%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="11.7532%" y="165" width="0.0195%" height="15" fill="rgb(234,209,42)" fg:x="602" fg:w="1"/><text x="12.0032%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="11.7532%" y="149" width="0.0195%" height="15" fill="rgb(227,7,12)" fg:x="602" fg:w="1"/><text x="12.0032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="11.7727%" y="213" width="0.0195%" height="15" fill="rgb(245,203,43)" fg:x="603" fg:w="1"/><text x="12.0227%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (16 samples, 0.31%)</title><rect x="11.7923%" y="213" width="0.3124%" height="15" fill="rgb(238,205,33)" fg:x="604" fg:w="16"/><text x="12.0423%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="12.1242%" y="197" width="0.0195%" height="15" fill="rgb(231,56,7)" fg:x="621" fg:w="1"/><text x="12.3742%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="12.1437%" y="197" width="0.0195%" height="15" fill="rgb(244,186,29)" fg:x="622" fg:w="1"/><text x="12.3937%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="12.1632%" y="197" width="0.0390%" height="15" fill="rgb(234,111,31)" fg:x="623" fg:w="2"/><text x="12.4132%" y="207.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks (57 samples, 1.11%)</title><rect x="11.4018%" y="245" width="1.1128%" height="15" fill="rgb(241,149,10)" fg:x="584" fg:w="57"/><text x="11.6518%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (38 samples, 0.74%)</title><rect x="11.7727%" y="229" width="0.7419%" height="15" fill="rgb(249,206,44)" fg:x="603" fg:w="38"/><text x="12.0227%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (21 samples, 0.41%)</title><rect x="12.1046%" y="213" width="0.4100%" height="15" fill="rgb(251,153,30)" fg:x="620" fg:w="21"/><text x="12.3546%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (16 samples, 0.31%)</title><rect x="12.2023%" y="197" width="0.3124%" height="15" fill="rgb(239,152,38)" fg:x="625" fg:w="16"/><text x="12.4523%" y="207.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (4 samples, 0.08%)</title><rect x="12.5146%" y="229" width="0.0781%" height="15" fill="rgb(249,139,47)" fg:x="641" fg:w="4"/><text x="12.7646%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="12.5927%" y="213" width="0.0195%" height="15" fill="rgb(244,64,35)" fg:x="645" fg:w="1"/><text x="12.8427%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="12.5927%" y="197" width="0.0195%" height="15" fill="rgb(216,46,15)" fg:x="645" fg:w="1"/><text x="12.8427%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="12.6123%" y="213" width="0.0195%" height="15" fill="rgb(250,74,19)" fg:x="646" fg:w="1"/><text x="12.8623%" y="223.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (65 samples, 1.27%)</title><rect x="11.4018%" y="261" width="1.2690%" height="15" fill="rgb(249,42,33)" fg:x="584" fg:w="65"/><text x="11.6518%" y="271.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (8 samples, 0.16%)</title><rect x="12.5146%" y="245" width="0.1562%" height="15" fill="rgb(242,149,17)" fg:x="641" fg:w="8"/><text x="12.7646%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (4 samples, 0.08%)</title><rect x="12.5927%" y="229" width="0.0781%" height="15" fill="rgb(244,29,21)" fg:x="645" fg:w="4"/><text x="12.8427%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (2 samples, 0.04%)</title><rect x="12.6318%" y="213" width="0.0390%" height="15" fill="rgb(220,130,37)" fg:x="647" fg:w="2"/><text x="12.8818%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="12.6708%" y="229" width="0.0390%" height="15" fill="rgb(211,67,2)" fg:x="649" fg:w="2"/><text x="12.9208%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="12.7099%" y="213" width="0.0195%" height="15" fill="rgb(235,68,52)" fg:x="651" fg:w="1"/><text x="12.9599%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="12.7294%" y="213" width="0.0195%" height="15" fill="rgb(246,142,3)" fg:x="652" fg:w="1"/><text x="12.9794%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="12.7489%" y="197" width="0.0195%" height="15" fill="rgb(241,25,7)" fg:x="653" fg:w="1"/><text x="12.9989%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2 samples, 0.04%)</title><rect x="12.7684%" y="181" width="0.0390%" height="15" fill="rgb(242,119,39)" fg:x="654" fg:w="2"/><text x="13.0184%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (4 samples, 0.08%)</title><rect x="12.7489%" y="213" width="0.0781%" height="15" fill="rgb(241,98,45)" fg:x="653" fg:w="4"/><text x="12.9989%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (3 samples, 0.06%)</title><rect x="12.7684%" y="197" width="0.0586%" height="15" fill="rgb(254,28,30)" fg:x="654" fg:w="3"/><text x="13.0184%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="12.8075%" y="181" width="0.0195%" height="15" fill="rgb(241,142,54)" fg:x="656" fg:w="1"/><text x="13.0575%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::elements_to_chunks (9 samples, 0.18%)</title><rect x="12.6708%" y="245" width="0.1757%" height="15" fill="rgb(222,85,15)" fg:x="649" fg:w="9"/><text x="12.9208%" y="255.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (7 samples, 0.14%)</title><rect x="12.7099%" y="229" width="0.1367%" height="15" fill="rgb(210,85,47)" fg:x="651" fg:w="7"/><text x="12.9599%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (1 samples, 0.02%)</title><rect x="12.8270%" y="213" width="0.0195%" height="15" fill="rgb(224,206,25)" fg:x="657" fg:w="1"/><text x="13.0770%" y="223.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="12.8270%" y="197" width="0.0195%" height="15" fill="rgb(243,201,19)" fg:x="657" fg:w="1"/><text x="13.0770%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="12.8270%" y="181" width="0.0195%" height="15" fill="rgb(236,59,4)" fg:x="657" fg:w="1"/><text x="13.0770%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="12.8270%" y="165" width="0.0195%" height="15" fill="rgb(254,179,45)" fg:x="657" fg:w="1"/><text x="13.0770%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="12.8465%" y="229" width="0.0195%" height="15" fill="rgb(226,14,10)" fg:x="658" fg:w="1"/><text x="13.0965%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="12.8661%" y="229" width="0.0195%" height="15" fill="rgb(244,27,41)" fg:x="659" fg:w="1"/><text x="13.1161%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="12.8661%" y="213" width="0.0195%" height="15" fill="rgb(235,35,32)" fg:x="659" fg:w="1"/><text x="13.1161%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (7 samples, 0.14%)</title><rect x="12.8856%" y="229" width="0.1367%" height="15" fill="rgb(218,68,31)" fg:x="660" fg:w="7"/><text x="13.1356%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="13.0418%" y="213" width="0.0195%" height="15" fill="rgb(207,120,37)" fg:x="668" fg:w="1"/><text x="13.2918%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.0613%" y="213" width="0.0195%" height="15" fill="rgb(227,98,0)" fg:x="669" fg:w="1"/><text x="13.3113%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="13.0613%" y="197" width="0.0195%" height="15" fill="rgb(207,7,3)" fg:x="669" fg:w="1"/><text x="13.3113%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="13.0808%" y="213" width="0.0390%" height="15" fill="rgb(206,98,19)" fg:x="670" fg:w="2"/><text x="13.3308%" y="223.50"></text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (95 samples, 1.85%)</title><rect x="11.4018%" y="277" width="1.8547%" height="15" fill="rgb(217,5,26)" fg:x="584" fg:w="95"/><text x="11.6518%" y="287.50">p..</text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (30 samples, 0.59%)</title><rect x="12.6708%" y="261" width="0.5857%" height="15" fill="rgb(235,190,38)" fg:x="649" fg:w="30"/><text x="12.9208%" y="271.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (21 samples, 0.41%)</title><rect x="12.8465%" y="245" width="0.4100%" height="15" fill="rgb(247,86,24)" fg:x="658" fg:w="21"/><text x="13.0965%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (12 samples, 0.23%)</title><rect x="13.0223%" y="229" width="0.2343%" height="15" fill="rgb(205,101,16)" fg:x="667" fg:w="12"/><text x="13.2723%" y="239.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (7 samples, 0.14%)</title><rect x="13.1199%" y="213" width="0.1367%" height="15" fill="rgb(246,168,33)" fg:x="672" fg:w="7"/><text x="13.3699%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.08%)</title><rect x="13.2565%" y="245" width="0.0781%" height="15" fill="rgb(231,114,1)" fg:x="679" fg:w="4"/><text x="13.5065%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="13.3346%" y="245" width="0.0976%" height="15" fill="rgb(207,184,53)" fg:x="683" fg:w="5"/><text x="13.5846%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.10%)</title><rect x="13.4323%" y="245" width="0.0976%" height="15" fill="rgb(224,95,51)" fg:x="688" fg:w="5"/><text x="13.6823%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="13.5299%" y="245" width="0.0195%" height="15" fill="rgb(212,188,45)" fg:x="693" fg:w="1"/><text x="13.7799%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="13.5299%" y="229" width="0.0195%" height="15" fill="rgb(223,154,38)" fg:x="693" fg:w="1"/><text x="13.7799%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="13.5494%" y="245" width="0.0195%" height="15" fill="rgb(251,22,52)" fg:x="694" fg:w="1"/><text x="13.7994%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="13.5689%" y="245" width="0.0195%" height="15" fill="rgb(229,209,22)" fg:x="695" fg:w="1"/><text x="13.8189%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.14%)</title><rect x="13.5884%" y="245" width="0.1367%" height="15" fill="rgb(234,138,34)" fg:x="696" fg:w="7"/><text x="13.8384%" y="255.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="13.7251%" y="245" width="0.0195%" height="15" fill="rgb(212,95,11)" fg:x="703" fg:w="1"/><text x="13.9751%" y="255.50"></text></g><g><title>publisher`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="13.7446%" y="245" width="0.0586%" height="15" fill="rgb(240,179,47)" fg:x="704" fg:w="3"/><text x="13.9946%" y="255.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="13.8032%" y="245" width="0.0390%" height="15" fill="rgb(240,163,11)" fg:x="707" fg:w="2"/><text x="14.0532%" y="255.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="13.8422%" y="245" width="0.0390%" height="15" fill="rgb(236,37,12)" fg:x="709" fg:w="2"/><text x="14.0922%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="13.8813%" y="245" width="0.0195%" height="15" fill="rgb(232,164,16)" fg:x="711" fg:w="1"/><text x="14.1313%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="13.8813%" y="229" width="0.0195%" height="15" fill="rgb(244,205,15)" fg:x="711" fg:w="1"/><text x="14.1313%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="13.8813%" y="213" width="0.0195%" height="15" fill="rgb(223,117,47)" fg:x="711" fg:w="1"/><text x="14.1313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="13.8813%" y="197" width="0.0195%" height="15" fill="rgb(244,107,35)" fg:x="711" fg:w="1"/><text x="14.1313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="13.8813%" y="181" width="0.0195%" height="15" fill="rgb(205,140,8)" fg:x="711" fg:w="1"/><text x="14.1313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.8813%" y="165" width="0.0195%" height="15" fill="rgb(228,84,46)" fg:x="711" fg:w="1"/><text x="14.1313%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.8813%" y="149" width="0.0195%" height="15" fill="rgb(254,188,9)" fg:x="711" fg:w="1"/><text x="14.1313%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="13.8813%" y="133" width="0.0195%" height="15" fill="rgb(206,112,54)" fg:x="711" fg:w="1"/><text x="14.1313%" y="143.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (187 samples, 3.65%)</title><rect x="13.9008%" y="245" width="3.6509%" height="15" fill="rgb(216,84,49)" fg:x="712" fg:w="187"/><text x="14.1508%" y="255.50">publ..</text></g><g><title>libsystem_malloc.dylib`_free (16 samples, 0.31%)</title><rect x="17.5517%" y="229" width="0.3124%" height="15" fill="rgb(214,194,35)" fg:x="899" fg:w="16"/><text x="17.8017%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.51%)</title><rect x="17.8641%" y="229" width="0.5076%" height="15" fill="rgb(249,28,3)" fg:x="915" fg:w="26"/><text x="18.1141%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="18.3717%" y="229" width="0.0195%" height="15" fill="rgb(222,56,52)" fg:x="941" fg:w="1"/><text x="18.6217%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="18.3717%" y="213" width="0.0195%" height="15" fill="rgb(245,217,50)" fg:x="941" fg:w="1"/><text x="18.6217%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="18.3913%" y="229" width="0.0390%" height="15" fill="rgb(213,201,24)" fg:x="942" fg:w="2"/><text x="18.6413%" y="239.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (1 samples, 0.02%)</title><rect x="18.4303%" y="229" width="0.0195%" height="15" fill="rgb(248,116,28)" fg:x="944" fg:w="1"/><text x="18.6803%" y="239.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (1 samples, 0.02%)</title><rect x="18.4498%" y="229" width="0.0195%" height="15" fill="rgb(219,72,43)" fg:x="945" fg:w="1"/><text x="18.6998%" y="239.50"></text></g><g><title>publisher`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="18.4693%" y="229" width="0.0586%" height="15" fill="rgb(209,138,14)" fg:x="946" fg:w="3"/><text x="18.7193%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.04%)</title><rect x="18.5474%" y="213" width="0.0390%" height="15" fill="rgb(222,18,33)" fg:x="950" fg:w="2"/><text x="18.7974%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.08%)</title><rect x="18.5865%" y="213" width="0.0781%" height="15" fill="rgb(213,199,7)" fg:x="952" fg:w="4"/><text x="18.8365%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.14%)</title><rect x="18.6646%" y="213" width="0.1367%" height="15" fill="rgb(250,110,10)" fg:x="956" fg:w="7"/><text x="18.9146%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 0.78%)</title><rect x="18.8012%" y="213" width="0.7809%" height="15" fill="rgb(248,123,6)" fg:x="963" fg:w="40"/><text x="19.0512%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (7 samples, 0.14%)</title><rect x="19.5822%" y="213" width="0.1367%" height="15" fill="rgb(206,91,31)" fg:x="1003" fg:w="7"/><text x="19.8322%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.06%)</title><rect x="19.7189%" y="213" width="0.0586%" height="15" fill="rgb(211,154,13)" fg:x="1010" fg:w="3"/><text x="19.9689%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.25%)</title><rect x="19.7774%" y="213" width="0.2538%" height="15" fill="rgb(225,148,7)" fg:x="1013" fg:w="13"/><text x="20.0274%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (11 samples, 0.21%)</title><rect x="20.0508%" y="197" width="0.2148%" height="15" fill="rgb(220,160,43)" fg:x="1027" fg:w="11"/><text x="20.3008%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.31%)</title><rect x="20.2655%" y="197" width="0.3124%" height="15" fill="rgb(213,52,39)" fg:x="1038" fg:w="16"/><text x="20.5155%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (6 samples, 0.12%)</title><rect x="20.5779%" y="197" width="0.1171%" height="15" fill="rgb(243,137,7)" fg:x="1054" fg:w="6"/><text x="20.8279%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="20.6950%" y="197" width="0.0390%" height="15" fill="rgb(230,79,13)" fg:x="1060" fg:w="2"/><text x="20.9450%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.29%)</title><rect x="20.7341%" y="197" width="0.2929%" height="15" fill="rgb(247,105,23)" fg:x="1062" fg:w="15"/><text x="20.9841%" y="207.50"></text></g><g><title>publisher`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="21.0269%" y="197" width="0.0586%" height="15" fill="rgb(223,179,41)" fg:x="1077" fg:w="3"/><text x="21.2769%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.08%)</title><rect x="21.0855%" y="197" width="0.0781%" height="15" fill="rgb(218,9,34)" fg:x="1080" fg:w="4"/><text x="21.3355%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (6 samples, 0.12%)</title><rect x="21.1636%" y="197" width="0.1171%" height="15" fill="rgb(222,106,8)" fg:x="1084" fg:w="6"/><text x="21.4136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.04%)</title><rect x="21.4955%" y="181" width="0.0390%" height="15" fill="rgb(211,220,0)" fg:x="1101" fg:w="2"/><text x="21.7455%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.18%)</title><rect x="21.5346%" y="181" width="0.1757%" height="15" fill="rgb(229,52,16)" fg:x="1103" fg:w="9"/><text x="21.7846%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.14%)</title><rect x="21.7103%" y="181" width="0.1367%" height="15" fill="rgb(212,155,18)" fg:x="1112" fg:w="7"/><text x="21.9603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.25%)</title><rect x="21.8469%" y="181" width="0.2538%" height="15" fill="rgb(242,21,14)" fg:x="1119" fg:w="13"/><text x="22.0969%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.96%)</title><rect x="22.1007%" y="181" width="0.9567%" height="15" fill="rgb(222,19,48)" fg:x="1132" fg:w="49"/><text x="22.3507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2 samples, 0.04%)</title><rect x="23.0574%" y="181" width="0.0390%" height="15" fill="rgb(232,45,27)" fg:x="1181" fg:w="2"/><text x="23.3074%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.12%)</title><rect x="23.0964%" y="181" width="0.1171%" height="15" fill="rgb(249,103,42)" fg:x="1183" fg:w="6"/><text x="23.3464%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="23.2136%" y="181" width="0.0390%" height="15" fill="rgb(246,81,33)" fg:x="1189" fg:w="2"/><text x="23.4636%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="23.2526%" y="181" width="0.0976%" height="15" fill="rgb(252,33,42)" fg:x="1191" fg:w="5"/><text x="23.5026%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.06%)</title><rect x="23.3503%" y="181" width="0.0586%" height="15" fill="rgb(209,212,41)" fg:x="1196" fg:w="3"/><text x="23.6003%" y="191.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (1 samples, 0.02%)</title><rect x="23.4088%" y="181" width="0.0195%" height="15" fill="rgb(207,154,6)" fg:x="1199" fg:w="1"/><text x="23.6588%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.04%)</title><rect x="23.4283%" y="181" width="0.0390%" height="15" fill="rgb(223,64,47)" fg:x="1200" fg:w="2"/><text x="23.6783%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (4 samples, 0.08%)</title><rect x="23.4674%" y="181" width="0.0781%" height="15" fill="rgb(211,161,38)" fg:x="1202" fg:w="4"/><text x="23.7174%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (3 samples, 0.06%)</title><rect x="23.5455%" y="181" width="0.0586%" height="15" fill="rgb(219,138,40)" fg:x="1206" fg:w="3"/><text x="23.7955%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (6 samples, 0.12%)</title><rect x="23.6041%" y="181" width="0.1171%" height="15" fill="rgb(241,228,46)" fg:x="1209" fg:w="6"/><text x="23.8541%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (181 samples, 3.53%)</title><rect x="23.7212%" y="181" width="3.5338%" height="15" fill="rgb(223,209,38)" fg:x="1215" fg:w="181"/><text x="23.9712%" y="191.50">pub..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.06%)</title><rect x="27.7821%" y="165" width="0.0586%" height="15" fill="rgb(236,164,45)" fg:x="1423" fg:w="3"/><text x="28.0321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.35%)</title><rect x="27.8407%" y="165" width="0.3514%" height="15" fill="rgb(231,15,5)" fg:x="1426" fg:w="18"/><text x="28.0907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (13 samples, 0.25%)</title><rect x="28.1921%" y="165" width="0.2538%" height="15" fill="rgb(252,35,15)" fg:x="1444" fg:w="13"/><text x="28.4421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (21 samples, 0.41%)</title><rect x="28.4459%" y="165" width="0.4100%" height="15" fill="rgb(248,181,18)" fg:x="1457" fg:w="21"/><text x="28.6959%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="28.8559%" y="165" width="0.0390%" height="15" fill="rgb(233,39,42)" fg:x="1478" fg:w="2"/><text x="29.1059%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.29%)</title><rect x="28.8950%" y="165" width="0.2929%" height="15" fill="rgb(238,110,33)" fg:x="1480" fg:w="15"/><text x="29.1450%" y="175.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (1 samples, 0.02%)</title><rect x="29.1878%" y="165" width="0.0195%" height="15" fill="rgb(233,195,10)" fg:x="1495" fg:w="1"/><text x="29.4378%" y="175.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.06%)</title><rect x="29.2073%" y="165" width="0.0586%" height="15" fill="rgb(254,105,3)" fg:x="1496" fg:w="3"/><text x="29.4573%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (575 samples, 11.23%)</title><rect x="21.2807%" y="197" width="11.2261%" height="15" fill="rgb(221,225,9)" fg:x="1090" fg:w="575"/><text x="21.5307%" y="207.50">publisher`ssz_rs:..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (269 samples, 5.25%)</title><rect x="27.2550%" y="181" width="5.2519%" height="15" fill="rgb(224,227,45)" fg:x="1396" fg:w="269"/><text x="27.5050%" y="191.50">publis..</text></g><g><title>publisher`sha2::sha256::soft::compress (166 samples, 3.24%)</title><rect x="29.2659%" y="165" width="3.2409%" height="15" fill="rgb(229,198,43)" fg:x="1499" fg:w="166"/><text x="29.5159%" y="175.50">pub..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="33.1316%" y="165" width="0.0195%" height="15" fill="rgb(206,209,35)" fg:x="1697" fg:w="1"/><text x="33.3816%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.10%)</title><rect x="33.1511%" y="165" width="0.0976%" height="15" fill="rgb(245,195,53)" fg:x="1698" fg:w="5"/><text x="33.4011%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="33.2487%" y="165" width="0.0195%" height="15" fill="rgb(240,92,26)" fg:x="1703" fg:w="1"/><text x="33.4987%" y="175.50"></text></g><g><title>publisher`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="33.2683%" y="165" width="0.0195%" height="15" fill="rgb(207,40,23)" fg:x="1704" fg:w="1"/><text x="33.5183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.06%)</title><rect x="33.3854%" y="149" width="0.0586%" height="15" fill="rgb(223,111,35)" fg:x="1710" fg:w="3"/><text x="33.6354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="33.7173%" y="117" width="0.0586%" height="15" fill="rgb(229,147,28)" fg:x="1727" fg:w="3"/><text x="33.9673%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="33.7759%" y="117" width="0.0195%" height="15" fill="rgb(211,29,28)" fg:x="1730" fg:w="1"/><text x="34.0259%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.12%)</title><rect x="33.7954%" y="117" width="0.1171%" height="15" fill="rgb(228,72,33)" fg:x="1731" fg:w="6"/><text x="34.0454%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="33.9516%" y="101" width="0.0195%" height="15" fill="rgb(205,214,31)" fg:x="1739" fg:w="1"/><text x="34.2016%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.21%)</title><rect x="33.9711%" y="101" width="0.2148%" height="15" fill="rgb(224,111,15)" fg:x="1740" fg:w="11"/><text x="34.2211%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="34.1859%" y="101" width="0.0976%" height="15" fill="rgb(253,21,26)" fg:x="1751" fg:w="5"/><text x="34.4359%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="34.2835%" y="101" width="0.0195%" height="15" fill="rgb(245,139,43)" fg:x="1756" fg:w="1"/><text x="34.5335%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (23 samples, 0.45%)</title><rect x="33.9125%" y="117" width="0.4490%" height="15" fill="rgb(252,170,7)" fg:x="1737" fg:w="23"/><text x="34.1625%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.06%)</title><rect x="34.3030%" y="101" width="0.0586%" height="15" fill="rgb(231,118,14)" fg:x="1757" fg:w="3"/><text x="34.5530%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (50 samples, 0.98%)</title><rect x="33.4440%" y="149" width="0.9762%" height="15" fill="rgb(238,83,0)" fg:x="1713" fg:w="50"/><text x="33.6940%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (46 samples, 0.90%)</title><rect x="33.5221%" y="133" width="0.8981%" height="15" fill="rgb(221,39,39)" fg:x="1717" fg:w="46"/><text x="33.7721%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="34.3616%" y="117" width="0.0586%" height="15" fill="rgb(222,119,46)" fg:x="1760" fg:w="3"/><text x="34.6116%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="34.4201%" y="149" width="0.0195%" height="15" fill="rgb(222,165,49)" fg:x="1763" fg:w="1"/><text x="34.6701%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (81 samples, 1.58%)</title><rect x="33.0144%" y="181" width="1.5814%" height="15" fill="rgb(219,113,52)" fg:x="1691" fg:w="81"/><text x="33.2644%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (67 samples, 1.31%)</title><rect x="33.2878%" y="165" width="1.3081%" height="15" fill="rgb(214,7,15)" fg:x="1705" fg:w="67"/><text x="33.5378%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.16%)</title><rect x="34.4397%" y="149" width="0.1562%" height="15" fill="rgb(235,32,4)" fg:x="1764" fg:w="8"/><text x="34.6897%" y="159.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (749 samples, 14.62%)</title><rect x="20.0312%" y="213" width="14.6232%" height="15" fill="rgb(238,90,54)" fg:x="1026" fg:w="749"/><text x="20.2812%" y="223.50">publisher`&lt;ethereum_co..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (110 samples, 2.15%)</title><rect x="32.5068%" y="197" width="2.1476%" height="15" fill="rgb(213,208,19)" fg:x="1665" fg:w="110"/><text x="32.7568%" y="207.50">p..</text></g><g><title>publisher`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="34.5959%" y="181" width="0.0586%" height="15" fill="rgb(233,156,4)" fg:x="1772" fg:w="3"/><text x="34.8459%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="34.7130%" y="197" width="0.0195%" height="15" fill="rgb(207,194,5)" fg:x="1778" fg:w="1"/><text x="34.9630%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.10%)</title><rect x="34.7325%" y="197" width="0.0976%" height="15" fill="rgb(206,111,30)" fg:x="1779" fg:w="5"/><text x="34.9825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.23%)</title><rect x="34.8301%" y="197" width="0.2343%" height="15" fill="rgb(243,70,54)" fg:x="1784" fg:w="12"/><text x="35.0801%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (3 samples, 0.06%)</title><rect x="35.0644%" y="197" width="0.0586%" height="15" fill="rgb(242,28,8)" fg:x="1796" fg:w="3"/><text x="35.3144%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="35.1230%" y="197" width="0.0195%" height="15" fill="rgb(219,106,18)" fg:x="1799" fg:w="1"/><text x="35.3730%" y="207.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.08%)</title><rect x="35.1425%" y="197" width="0.0781%" height="15" fill="rgb(244,222,10)" fg:x="1800" fg:w="4"/><text x="35.3925%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (7 samples, 0.14%)</title><rect x="35.2206%" y="197" width="0.1367%" height="15" fill="rgb(236,179,52)" fg:x="1804" fg:w="7"/><text x="35.4706%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.08%)</title><rect x="35.5330%" y="181" width="0.0781%" height="15" fill="rgb(213,23,39)" fg:x="1820" fg:w="4"/><text x="35.7830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.06%)</title><rect x="35.6111%" y="181" width="0.0586%" height="15" fill="rgb(238,48,10)" fg:x="1824" fg:w="3"/><text x="35.8611%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.20%)</title><rect x="35.6697%" y="181" width="0.1952%" height="15" fill="rgb(251,196,23)" fg:x="1827" fg:w="10"/><text x="35.9197%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.49%)</title><rect x="35.8649%" y="181" width="0.4881%" height="15" fill="rgb(250,152,24)" fg:x="1837" fg:w="25"/><text x="36.1149%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2 samples, 0.04%)</title><rect x="36.3530%" y="181" width="0.0390%" height="15" fill="rgb(209,150,17)" fg:x="1862" fg:w="2"/><text x="36.6030%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="36.3920%" y="181" width="0.0586%" height="15" fill="rgb(234,202,34)" fg:x="1864" fg:w="3"/><text x="36.6420%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.08%)</title><rect x="36.4506%" y="181" width="0.0781%" height="15" fill="rgb(253,148,53)" fg:x="1867" fg:w="4"/><text x="36.7006%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$free (4 samples, 0.08%)</title><rect x="36.5287%" y="181" width="0.0781%" height="15" fill="rgb(218,129,16)" fg:x="1871" fg:w="4"/><text x="36.7787%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (4 samples, 0.08%)</title><rect x="36.6068%" y="181" width="0.0781%" height="15" fill="rgb(216,85,19)" fg:x="1875" fg:w="4"/><text x="36.8568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.14%)</title><rect x="36.8996%" y="165" width="0.1367%" height="15" fill="rgb(235,228,7)" fg:x="1890" fg:w="7"/><text x="37.1496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (6 samples, 0.12%)</title><rect x="37.0363%" y="165" width="0.1171%" height="15" fill="rgb(245,175,0)" fg:x="1897" fg:w="6"/><text x="37.2863%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (10 samples, 0.20%)</title><rect x="37.1535%" y="165" width="0.1952%" height="15" fill="rgb(208,168,36)" fg:x="1903" fg:w="10"/><text x="37.4035%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (106 samples, 2.07%)</title><rect x="35.3573%" y="197" width="2.0695%" height="15" fill="rgb(246,171,24)" fg:x="1811" fg:w="106"/><text x="35.6073%" y="207.50">p..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (38 samples, 0.74%)</title><rect x="36.6849%" y="181" width="0.7419%" height="15" fill="rgb(215,142,24)" fg:x="1879" fg:w="38"/><text x="36.9349%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.08%)</title><rect x="37.3487%" y="165" width="0.0781%" height="15" fill="rgb(250,187,7)" fg:x="1913" fg:w="4"/><text x="37.5987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="38.1296%" y="165" width="0.0586%" height="15" fill="rgb(228,66,33)" fg:x="1953" fg:w="3"/><text x="38.3796%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.06%)</title><rect x="38.1882%" y="165" width="0.0586%" height="15" fill="rgb(234,215,21)" fg:x="1956" fg:w="3"/><text x="38.4382%" y="175.50"></text></g><g><title>publisher`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="38.2468%" y="165" width="0.0195%" height="15" fill="rgb(222,191,20)" fg:x="1959" fg:w="1"/><text x="38.4968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.04%)</title><rect x="38.3249%" y="149" width="0.0390%" height="15" fill="rgb(245,79,54)" fg:x="1963" fg:w="2"/><text x="38.5749%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="38.5592%" y="117" width="0.0195%" height="15" fill="rgb(240,10,37)" fg:x="1975" fg:w="1"/><text x="38.8092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="38.5787%" y="117" width="0.0195%" height="15" fill="rgb(214,192,32)" fg:x="1976" fg:w="1"/><text x="38.8287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.06%)</title><rect x="38.5982%" y="117" width="0.0586%" height="15" fill="rgb(209,36,54)" fg:x="1977" fg:w="3"/><text x="38.8482%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.18%)</title><rect x="38.6763%" y="101" width="0.1757%" height="15" fill="rgb(220,10,11)" fg:x="1981" fg:w="9"/><text x="38.9263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.21%)</title><rect x="38.6568%" y="117" width="0.2148%" height="15" fill="rgb(221,106,17)" fg:x="1980" fg:w="11"/><text x="38.9068%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="38.8520%" y="101" width="0.0195%" height="15" fill="rgb(251,142,44)" fg:x="1990" fg:w="1"/><text x="39.1020%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.47%)</title><rect x="38.4615%" y="133" width="0.4686%" height="15" fill="rgb(238,13,15)" fg:x="1970" fg:w="24"/><text x="38.7115%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="38.8715%" y="117" width="0.0586%" height="15" fill="rgb(208,107,27)" fg:x="1991" fg:w="3"/><text x="39.1215%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="38.9301%" y="133" width="0.0390%" height="15" fill="rgb(205,136,37)" fg:x="1994" fg:w="2"/><text x="39.1801%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (32 samples, 0.62%)</title><rect x="38.3639%" y="149" width="0.6248%" height="15" fill="rgb(250,205,27)" fg:x="1965" fg:w="32"/><text x="38.6139%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="38.9692%" y="133" width="0.0195%" height="15" fill="rgb(210,80,43)" fg:x="1996" fg:w="1"/><text x="39.2192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.08%)</title><rect x="38.9887%" y="149" width="0.0781%" height="15" fill="rgb(247,160,36)" fg:x="1997" fg:w="4"/><text x="39.2387%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (60 samples, 1.17%)</title><rect x="38.0320%" y="181" width="1.1714%" height="15" fill="rgb(234,13,49)" fg:x="1948" fg:w="60"/><text x="38.2820%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (48 samples, 0.94%)</title><rect x="38.2663%" y="165" width="0.9371%" height="15" fill="rgb(234,122,0)" fg:x="1960" fg:w="48"/><text x="38.5163%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.14%)</title><rect x="39.0668%" y="149" width="0.1367%" height="15" fill="rgb(207,146,38)" fg:x="2001" fg:w="7"/><text x="39.3168%" y="159.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (234 samples, 4.57%)</title><rect x="34.6544%" y="213" width="4.5685%" height="15" fill="rgb(207,177,25)" fg:x="1775" fg:w="234"/><text x="34.9044%" y="223.50">publi..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (92 samples, 1.80%)</title><rect x="37.4268%" y="197" width="1.7962%" height="15" fill="rgb(211,178,42)" fg:x="1917" fg:w="92"/><text x="37.6768%" y="207.50">p..</text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="39.2034%" y="181" width="0.0195%" height="15" fill="rgb(230,69,54)" fg:x="2008" fg:w="1"/><text x="39.4534%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (2 samples, 0.04%)</title><rect x="39.2230%" y="213" width="0.0390%" height="15" fill="rgb(214,135,41)" fg:x="2009" fg:w="2"/><text x="39.4730%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (2 samples, 0.04%)</title><rect x="39.2620%" y="213" width="0.0390%" height="15" fill="rgb(237,67,25)" fg:x="2011" fg:w="2"/><text x="39.5120%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (2 samples, 0.04%)</title><rect x="39.3011%" y="213" width="0.0390%" height="15" fill="rgb(222,189,50)" fg:x="2013" fg:w="2"/><text x="39.5511%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.25%)</title><rect x="39.3791%" y="197" width="0.2538%" height="15" fill="rgb(245,148,34)" fg:x="2017" fg:w="13"/><text x="39.6291%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.04%)</title><rect x="39.6330%" y="197" width="0.0390%" height="15" fill="rgb(222,29,6)" fg:x="2030" fg:w="2"/><text x="39.8830%" y="207.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="39.6720%" y="197" width="0.0390%" height="15" fill="rgb(221,189,43)" fg:x="2032" fg:w="2"/><text x="39.9220%" y="207.50"></text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::merkleize::HashTreeRoot for u64&gt;::hash_tree_root (40 samples, 0.78%)</title><rect x="39.3401%" y="213" width="0.7809%" height="15" fill="rgb(207,36,27)" fg:x="2015" fg:w="40"/><text x="39.5901%" y="223.50"></text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::proofs::Prove for u64&gt;::chunks (21 samples, 0.41%)</title><rect x="39.7111%" y="197" width="0.4100%" height="15" fill="rgb(217,90,24)" fg:x="2034" fg:w="21"/><text x="39.9611%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (18 samples, 0.35%)</title><rect x="39.7696%" y="181" width="0.3514%" height="15" fill="rgb(224,66,35)" fg:x="2037" fg:w="18"/><text x="40.0196%" y="191.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (1,111 samples, 21.69%)</title><rect x="18.5279%" y="229" width="21.6907%" height="15" fill="rgb(221,13,50)" fg:x="949" fg:w="1111"/><text x="18.7779%" y="239.50">publisher`ethereum_consensus::phas..</text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::proofs::Prove for u64&gt;::chunks (5 samples, 0.10%)</title><rect x="40.1210%" y="213" width="0.0976%" height="15" fill="rgb(236,68,49)" fg:x="2055" fg:w="5"/><text x="40.3710%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="40.2968%" y="213" width="0.0195%" height="15" fill="rgb(229,146,28)" fg:x="2064" fg:w="1"/><text x="40.5468%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (16 samples, 0.31%)</title><rect x="40.3163%" y="213" width="0.3124%" height="15" fill="rgb(225,31,38)" fg:x="2065" fg:w="16"/><text x="40.5663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.18%)</title><rect x="40.6287%" y="213" width="0.1757%" height="15" fill="rgb(250,208,3)" fg:x="2081" fg:w="9"/><text x="40.8787%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.57%)</title><rect x="40.8044%" y="213" width="0.5662%" height="15" fill="rgb(246,54,23)" fg:x="2090" fg:w="29"/><text x="41.0544%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (45 samples, 0.88%)</title><rect x="41.3706%" y="213" width="0.8786%" height="15" fill="rgb(243,76,11)" fg:x="2119" fg:w="45"/><text x="41.6206%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (6 samples, 0.12%)</title><rect x="42.2491%" y="213" width="0.1171%" height="15" fill="rgb(245,21,50)" fg:x="2164" fg:w="6"/><text x="42.4991%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.14%)</title><rect x="42.3663%" y="213" width="0.1367%" height="15" fill="rgb(228,9,43)" fg:x="2170" fg:w="7"/><text x="42.6163%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.06%)</title><rect x="42.5029%" y="213" width="0.0586%" height="15" fill="rgb(208,100,47)" fg:x="2177" fg:w="3"/><text x="42.7529%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.61%)</title><rect x="42.5615%" y="213" width="0.6052%" height="15" fill="rgb(232,26,8)" fg:x="2180" fg:w="31"/><text x="42.8115%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.20%)</title><rect x="43.1667%" y="213" width="0.1952%" height="15" fill="rgb(216,166,38)" fg:x="2211" fg:w="10"/><text x="43.4167%" y="223.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (1 samples, 0.02%)</title><rect x="43.3620%" y="213" width="0.0195%" height="15" fill="rgb(251,202,51)" fg:x="2221" fg:w="1"/><text x="43.6120%" y="223.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (8 samples, 0.16%)</title><rect x="43.3815%" y="213" width="0.1562%" height="15" fill="rgb(254,216,34)" fg:x="2222" fg:w="8"/><text x="43.6315%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (1 samples, 0.02%)</title><rect x="43.5377%" y="213" width="0.0195%" height="15" fill="rgb(251,32,27)" fg:x="2230" fg:w="1"/><text x="43.7877%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="43.5572%" y="213" width="0.0586%" height="15" fill="rgb(208,127,28)" fg:x="2231" fg:w="3"/><text x="43.8072%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (5 samples, 0.10%)</title><rect x="43.6158%" y="213" width="0.0976%" height="15" fill="rgb(224,137,22)" fg:x="2234" fg:w="5"/><text x="43.8658%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (6 samples, 0.12%)</title><rect x="43.7134%" y="213" width="0.1171%" height="15" fill="rgb(254,70,32)" fg:x="2239" fg:w="6"/><text x="43.9634%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (1,187 samples, 23.17%)</title><rect x="43.8305%" y="213" width="23.1745%" height="15" fill="rgb(229,75,37)" fg:x="2245" fg:w="1187"/><text x="44.0805%" y="223.50">publisher`sha2::sha256::soft::compress</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.08%)</title><rect x="68.3913%" y="197" width="0.0781%" height="15" fill="rgb(252,64,23)" fg:x="3503" fg:w="4"/><text x="68.6413%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (74 samples, 1.44%)</title><rect x="68.4693%" y="197" width="1.4447%" height="15" fill="rgb(232,162,48)" fg:x="3507" fg:w="74"/><text x="68.7193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (14 samples, 0.27%)</title><rect x="69.9141%" y="197" width="0.2733%" height="15" fill="rgb(246,160,12)" fg:x="3581" fg:w="14"/><text x="70.1641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (48 samples, 0.94%)</title><rect x="70.1874%" y="197" width="0.9371%" height="15" fill="rgb(247,166,0)" fg:x="3595" fg:w="48"/><text x="70.4374%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (10 samples, 0.20%)</title><rect x="71.1246%" y="197" width="0.1952%" height="15" fill="rgb(249,219,21)" fg:x="3643" fg:w="10"/><text x="71.3746%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (55 samples, 1.07%)</title><rect x="71.3198%" y="197" width="1.0738%" height="15" fill="rgb(205,209,3)" fg:x="3653" fg:w="55"/><text x="71.5698%" y="207.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (10 samples, 0.20%)</title><rect x="72.3936%" y="197" width="0.1952%" height="15" fill="rgb(243,44,1)" fg:x="3708" fg:w="10"/><text x="72.6436%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (10 samples, 0.20%)</title><rect x="72.5888%" y="197" width="0.1952%" height="15" fill="rgb(206,159,16)" fg:x="3718" fg:w="10"/><text x="72.8388%" y="207.50"></text></g><g><title>publisher`DYLD-STUB$$bzero (1 samples, 0.02%)</title><rect x="72.7841%" y="197" width="0.0195%" height="15" fill="rgb(244,77,30)" fg:x="3728" fg:w="1"/><text x="73.0341%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (2,838 samples, 55.41%)</title><rect x="40.2187%" y="229" width="55.4080%" height="15" fill="rgb(218,69,12)" fg:x="2060" fg:w="2838"/><text x="40.4687%" y="239.50">publisher`ssz_rs::merkleization::merkleize::merkleize</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1,466 samples, 28.62%)</title><rect x="67.0051%" y="213" width="28.6216%" height="15" fill="rgb(212,87,7)" fg:x="3432" fg:w="1466"/><text x="67.2551%" y="223.50">publisher`ssz_rs::merkleization::merkleize::Tr..</text></g><g><title>publisher`sha2::sha256::soft::compress (1,169 samples, 22.82%)</title><rect x="72.8036%" y="197" width="22.8231%" height="15" fill="rgb(245,114,25)" fg:x="3729" fg:w="1169"/><text x="73.0536%" y="207.50">publisher`sha2::sha256::soft::compre..</text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks (4,003 samples, 78.15%)</title><rect x="17.5517%" y="245" width="78.1531%" height="15" fill="rgb(210,61,42)" fg:x="899" fg:w="4003"/><text x="17.8017%" y="255.50">publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks</text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::merkleize::HashTreeRoot for u64&gt;::hash_tree_root (4 samples, 0.08%)</title><rect x="95.6267%" y="229" width="0.0781%" height="15" fill="rgb(211,52,33)" fg:x="4898" fg:w="4"/><text x="95.8767%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.18%)</title><rect x="96.0758%" y="229" width="0.1757%" height="15" fill="rgb(234,58,33)" fg:x="4921" fg:w="9"/><text x="96.3258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="96.2515%" y="229" width="0.0195%" height="15" fill="rgb(220,115,36)" fg:x="4930" fg:w="1"/><text x="96.5015%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="96.2515%" y="213" width="0.0195%" height="15" fill="rgb(243,153,54)" fg:x="4930" fg:w="1"/><text x="96.5015%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.08%)</title><rect x="96.2710%" y="229" width="0.0781%" height="15" fill="rgb(251,47,18)" fg:x="4931" fg:w="4"/><text x="96.5210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="96.3491%" y="229" width="0.0586%" height="15" fill="rgb(242,102,42)" fg:x="4935" fg:w="3"/><text x="96.5991%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.06%)</title><rect x="96.3491%" y="213" width="0.0586%" height="15" fill="rgb(234,31,38)" fg:x="4935" fg:w="3"/><text x="96.5991%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.21%)</title><rect x="96.4077%" y="229" width="0.2148%" height="15" fill="rgb(221,117,51)" fg:x="4938" fg:w="11"/><text x="96.6577%" y="239.50"></text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (2 samples, 0.04%)</title><rect x="96.6224%" y="229" width="0.0390%" height="15" fill="rgb(212,20,18)" fg:x="4949" fg:w="2"/><text x="96.8724%" y="239.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.06%)</title><rect x="96.6615%" y="229" width="0.0586%" height="15" fill="rgb(245,133,36)" fg:x="4951" fg:w="3"/><text x="96.9115%" y="239.50"></text></g><g><title>dyld`start (5,117 samples, 99.90%)</title><rect x="0.0000%" y="389" width="99.9024%" height="15" fill="rgb(212,6,19)" fg:x="0" fg:w="5117"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>publisher`main (5,116 samples, 99.88%)</title><rect x="0.0195%" y="373" width="99.8829%" height="15" fill="rgb(218,1,36)" fg:x="1" fg:w="5116"/><text x="0.2695%" y="383.50">publisher`main</text></g><g><title>publisher`std::sys::backtrace::__rust_begin_short_backtrace (5,116 samples, 99.88%)</title><rect x="0.0195%" y="357" width="99.8829%" height="15" fill="rgb(246,84,54)" fg:x="1" fg:w="5116"/><text x="0.2695%" y="367.50">publisher`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>publisher`publisher::main (5,116 samples, 99.88%)</title><rect x="0.0195%" y="341" width="99.8829%" height="15" fill="rgb(242,110,6)" fg:x="1" fg:w="5116"/><text x="0.2695%" y="351.50">publisher`publisher::main</text></g><g><title>publisher`tokio::runtime::park::CachedParkThread::block_on (5,115 samples, 99.86%)</title><rect x="0.0390%" y="325" width="99.8633%" height="15" fill="rgb(214,47,5)" fg:x="2" fg:w="5115"/><text x="0.2890%" y="335.50">publisher`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>publisher`lido_oracle_core::io::validator_membership::Input::build_continuation (4,716 samples, 92.07%)</title><rect x="7.8290%" y="309" width="92.0734%" height="15" fill="rgb(218,159,25)" fg:x="401" fg:w="4716"/><text x="8.0790%" y="319.50">publisher`lido_oracle_core::io::validator_membership::Input::build_continuation</text></g><g><title>publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build (4,533 samples, 88.50%)</title><rect x="11.4018%" y="293" width="88.5006%" height="15" fill="rgb(215,211,28)" fg:x="584" fg:w="4533"/><text x="11.6518%" y="303.50">publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree (4,438 samples, 86.65%)</title><rect x="13.2565%" y="277" width="86.6458%" height="15" fill="rgb(238,59,32)" fg:x="679" fg:w="4438"/><text x="13.5065%" y="287.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (4,438 samples, 86.65%)</title><rect x="13.2565%" y="261" width="86.6458%" height="15" fill="rgb(226,82,3)" fg:x="679" fg:w="4438"/><text x="13.5065%" y="271.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (215 samples, 4.20%)</title><rect x="95.7048%" y="245" width="4.1976%" height="15" fill="rgb(240,164,32)" fg:x="4902" fg:w="215"/><text x="95.9548%" y="255.50">publi..</text></g><g><title>publisher`sha2::sha256::soft::compress (163 samples, 3.18%)</title><rect x="96.7200%" y="229" width="3.1824%" height="15" fill="rgb(232,46,7)" fg:x="4954" fg:w="163"/><text x="96.9700%" y="239.50">pub..</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.04%)</title><rect x="99.9024%" y="389" width="0.0390%" height="15" fill="rgb(229,129,53)" fg:x="5117" fg:w="2"/><text x="100.1524%" y="399.50"></text></g><g><title>all (5,122 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="5122"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3 samples, 0.06%)</title><rect x="99.9414%" y="389" width="0.0586%" height="15" fill="rgb(246,141,4)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (3 samples, 0.06%)</title><rect x="99.9414%" y="373" width="0.0586%" height="15" fill="rgb(229,23,39)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="383.50"></text></g><g><title>publisher`std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.06%)</title><rect x="99.9414%" y="357" width="0.0586%" height="15" fill="rgb(206,12,3)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="367.50"></text></g><g><title>publisher`core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.06%)</title><rect x="99.9414%" y="341" width="0.0586%" height="15" fill="rgb(252,226,20)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="351.50"></text></g><g><title>publisher`std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.06%)</title><rect x="99.9414%" y="325" width="0.0586%" height="15" fill="rgb(216,123,35)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="335.50"></text></g><g><title>publisher`tokio::runtime::task::raw::poll (3 samples, 0.06%)</title><rect x="99.9414%" y="309" width="0.0586%" height="15" fill="rgb(212,68,40)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (3 samples, 0.06%)</title><rect x="99.9414%" y="293" width="0.0586%" height="15" fill="rgb(254,125,32)" fg:x="5119" fg:w="3"/><text x="100.1914%" y="303.50"></text></g></svg></svg>