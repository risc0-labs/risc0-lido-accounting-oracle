<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="127682"><g><title>publisher`&lt;http_cache::managers::cacache::CACacheManager as http_cache::CacheManager&gt;::get::_{{closure}} (35 samples, 0.03%)</title><rect x="0.0078%" y="165" width="0.0274%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="35"/><text x="0.2578%" y="175.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (34 samples, 0.03%)</title><rect x="0.0086%" y="149" width="0.0266%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="34"/><text x="0.2586%" y="159.50"></text></g><g><title>publisher`&lt;http_cache_reqwest::Cache&lt;T&gt; as reqwest_middleware::middleware::Middleware&gt;::handle::_{{closure}} (131 samples, 0.10%)</title><rect x="0.0078%" y="181" width="0.1026%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="131"/><text x="0.2578%" y="191.50"></text></g><g><title>publisher`sha2::sha256::compress256 (96 samples, 0.08%)</title><rect x="0.0352%" y="165" width="0.0752%" height="15" fill="rgb(248,212,6)" fg:x="45" fg:w="96"/><text x="0.2852%" y="175.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="0.1253%" y="117" width="0.0164%" height="15" fill="rgb(208,68,35)" fg:x="160" fg:w="21"/><text x="0.3753%" y="127.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="0.1198%" y="149" width="0.0243%" height="15" fill="rgb(232,128,0)" fg:x="153" fg:w="31"/><text x="0.3698%" y="159.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (29 samples, 0.02%)</title><rect x="0.1214%" y="133" width="0.0227%" height="15" fill="rgb(207,160,47)" fg:x="155" fg:w="29"/><text x="0.3714%" y="143.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (39 samples, 0.03%)</title><rect x="0.1449%" y="117" width="0.0305%" height="15" fill="rgb(228,23,34)" fg:x="185" fg:w="39"/><text x="0.3949%" y="127.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (42 samples, 0.03%)</title><rect x="0.1441%" y="149" width="0.0329%" height="15" fill="rgb(218,30,26)" fg:x="184" fg:w="42"/><text x="0.3941%" y="159.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (42 samples, 0.03%)</title><rect x="0.1441%" y="133" width="0.0329%" height="15" fill="rgb(220,122,19)" fg:x="184" fg:w="42"/><text x="0.3941%" y="143.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (159 samples, 0.12%)</title><rect x="0.2271%" y="85" width="0.1245%" height="15" fill="rgb(250,228,42)" fg:x="290" fg:w="159"/><text x="0.4771%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (19 samples, 0.01%)</title><rect x="0.3540%" y="37" width="0.0149%" height="15" fill="rgb(240,193,28)" fg:x="452" fg:w="19"/><text x="0.6040%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (23 samples, 0.02%)</title><rect x="0.3532%" y="53" width="0.0180%" height="15" fill="rgb(216,20,37)" fg:x="451" fg:w="23"/><text x="0.6032%" y="63.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.02%)</title><rect x="0.3517%" y="85" width="0.0243%" height="15" fill="rgb(206,188,39)" fg:x="449" fg:w="31"/><text x="0.6017%" y="95.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (31 samples, 0.02%)</title><rect x="0.3517%" y="69" width="0.0243%" height="15" fill="rgb(217,207,13)" fg:x="449" fg:w="31"/><text x="0.6017%" y="79.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (203 samples, 0.16%)</title><rect x="0.2177%" y="101" width="0.1590%" height="15" fill="rgb(231,73,38)" fg:x="278" fg:w="203"/><text x="0.4677%" y="111.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (219 samples, 0.17%)</title><rect x="0.2060%" y="117" width="0.1715%" height="15" fill="rgb(225,20,46)" fg:x="263" fg:w="219"/><text x="0.4560%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (43 samples, 0.03%)</title><rect x="0.3791%" y="117" width="0.0337%" height="15" fill="rgb(210,31,41)" fg:x="484" fg:w="43"/><text x="0.6291%" y="127.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (13 samples, 0.01%)</title><rect x="0.4026%" y="101" width="0.0102%" height="15" fill="rgb(221,200,47)" fg:x="514" fg:w="13"/><text x="0.6526%" y="111.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.07%)</title><rect x="0.4284%" y="85" width="0.0681%" height="15" fill="rgb(226,26,5)" fg:x="547" fg:w="87"/><text x="0.6784%" y="95.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.01%)</title><rect x="0.4965%" y="85" width="0.0117%" height="15" fill="rgb(249,33,26)" fg:x="634" fg:w="15"/><text x="0.7465%" y="95.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (121 samples, 0.09%)</title><rect x="0.4143%" y="117" width="0.0948%" height="15" fill="rgb(235,183,28)" fg:x="529" fg:w="121"/><text x="0.6643%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (110 samples, 0.09%)</title><rect x="0.4229%" y="101" width="0.0862%" height="15" fill="rgb(221,5,38)" fg:x="540" fg:w="110"/><text x="0.6729%" y="111.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (427 samples, 0.33%)</title><rect x="0.1770%" y="133" width="0.3344%" height="15" fill="rgb(247,18,42)" fg:x="226" fg:w="427"/><text x="0.4270%" y="143.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.03%)</title><rect x="0.5216%" y="85" width="0.0313%" height="15" fill="rgb(241,131,45)" fg:x="666" fg:w="40"/><text x="0.7716%" y="95.50"></text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (58 samples, 0.05%)</title><rect x="0.5114%" y="133" width="0.0454%" height="15" fill="rgb(249,31,29)" fg:x="653" fg:w="58"/><text x="0.7614%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (56 samples, 0.04%)</title><rect x="0.5130%" y="117" width="0.0439%" height="15" fill="rgb(225,111,53)" fg:x="655" fg:w="56"/><text x="0.7630%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (49 samples, 0.04%)</title><rect x="0.5185%" y="101" width="0.0384%" height="15" fill="rgb(238,160,17)" fg:x="662" fg:w="49"/><text x="0.7685%" y="111.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;::deserialize_any (503 samples, 0.39%)</title><rect x="0.1770%" y="149" width="0.3939%" height="15" fill="rgb(214,148,48)" fg:x="226" fg:w="503"/><text x="0.4270%" y="159.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="0.5803%" y="85" width="0.0360%" height="15" fill="rgb(232,36,49)" fg:x="741" fg:w="46"/><text x="0.8303%" y="95.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (60 samples, 0.05%)</title><rect x="0.5756%" y="117" width="0.0470%" height="15" fill="rgb(209,103,24)" fg:x="735" fg:w="60"/><text x="0.8256%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (56 samples, 0.04%)</title><rect x="0.5788%" y="101" width="0.0439%" height="15" fill="rgb(229,88,8)" fg:x="739" fg:w="56"/><text x="0.8288%" y="111.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="0.6344%" y="85" width="0.0157%" height="15" fill="rgb(213,181,19)" fg:x="810" fg:w="20"/><text x="0.8844%" y="95.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (104 samples, 0.08%)</title><rect x="0.5709%" y="133" width="0.0815%" height="15" fill="rgb(254,191,54)" fg:x="729" fg:w="104"/><text x="0.8209%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (28 samples, 0.02%)</title><rect x="0.6305%" y="117" width="0.0219%" height="15" fill="rgb(241,83,37)" fg:x="805" fg:w="28"/><text x="0.8805%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (26 samples, 0.02%)</title><rect x="0.6320%" y="101" width="0.0204%" height="15" fill="rgb(233,36,39)" fg:x="807" fg:w="26"/><text x="0.8820%" y="111.50"></text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (16 samples, 0.01%)</title><rect x="0.6524%" y="133" width="0.0125%" height="15" fill="rgb(226,3,54)" fg:x="833" fg:w="16"/><text x="0.9024%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (14 samples, 0.01%)</title><rect x="0.6540%" y="117" width="0.0110%" height="15" fill="rgb(245,192,40)" fg:x="835" fg:w="14"/><text x="0.9040%" y="127.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (13 samples, 0.01%)</title><rect x="0.6548%" y="101" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="836" fg:w="13"/><text x="0.9048%" y="111.50"></text></g><g><title>publisher`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (697 samples, 0.55%)</title><rect x="0.1198%" y="165" width="0.5459%" height="15" fill="rgb(232,182,51)" fg:x="153" fg:w="697"/><text x="0.3698%" y="175.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_struct (121 samples, 0.09%)</title><rect x="0.5709%" y="149" width="0.0948%" height="15" fill="rgb(231,60,39)" fg:x="729" fg:w="121"/><text x="0.8209%" y="159.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (30 samples, 0.02%)</title><rect x="0.6681%" y="133" width="0.0235%" height="15" fill="rgb(208,69,12)" fg:x="853" fg:w="30"/><text x="0.9181%" y="143.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::get_state::_{{closure}} (878 samples, 0.69%)</title><rect x="0.0078%" y="197" width="0.6876%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="878"/><text x="0.2578%" y="207.50"></text></g><g><title>publisher`serde_json::de::from_slice (746 samples, 0.58%)</title><rect x="0.1112%" y="181" width="0.5843%" height="15" fill="rgb(213,116,39)" fg:x="142" fg:w="746"/><text x="0.3612%" y="191.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (38 samples, 0.03%)</title><rect x="0.6657%" y="165" width="0.0298%" height="15" fill="rgb(222,207,29)" fg:x="850" fg:w="38"/><text x="0.9157%" y="175.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (38 samples, 0.03%)</title><rect x="0.6657%" y="149" width="0.0298%" height="15" fill="rgb(206,96,30)" fg:x="850" fg:w="38"/><text x="0.9157%" y="159.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (14 samples, 0.01%)</title><rect x="0.7221%" y="69" width="0.0110%" height="15" fill="rgb(218,138,4)" fg:x="922" fg:w="14"/><text x="0.9721%" y="79.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (45 samples, 0.04%)</title><rect x="0.7135%" y="85" width="0.0352%" height="15" fill="rgb(250,191,14)" fg:x="911" fg:w="45"/><text x="0.9635%" y="95.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (20 samples, 0.02%)</title><rect x="0.7331%" y="69" width="0.0157%" height="15" fill="rgb(239,60,40)" fg:x="936" fg:w="20"/><text x="0.9831%" y="79.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (64 samples, 0.05%)</title><rect x="0.7088%" y="101" width="0.0501%" height="15" fill="rgb(206,27,48)" fg:x="905" fg:w="64"/><text x="0.9588%" y="111.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::assemble_chunks (13 samples, 0.01%)</title><rect x="0.7487%" y="85" width="0.0102%" height="15" fill="rgb(225,35,8)" fg:x="956" fg:w="13"/><text x="0.9987%" y="95.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (24 samples, 0.02%)</title><rect x="0.7589%" y="101" width="0.0188%" height="15" fill="rgb(250,213,24)" fg:x="969" fg:w="24"/><text x="1.0089%" y="111.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (97 samples, 0.08%)</title><rect x="0.7057%" y="117" width="0.0760%" height="15" fill="rgb(247,123,22)" fg:x="901" fg:w="97"/><text x="0.9557%" y="127.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (96 samples, 0.08%)</title><rect x="0.7957%" y="101" width="0.0752%" height="15" fill="rgb(231,138,38)" fg:x="1016" fg:w="96"/><text x="1.0457%" y="111.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (214 samples, 0.17%)</title><rect x="0.7816%" y="117" width="0.1676%" height="15" fill="rgb(231,145,46)" fg:x="998" fg:w="214"/><text x="1.0316%" y="127.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (100 samples, 0.08%)</title><rect x="0.8709%" y="101" width="0.0783%" height="15" fill="rgb(251,118,11)" fg:x="1112" fg:w="100"/><text x="1.1209%" y="111.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (76 samples, 0.06%)</title><rect x="0.8897%" y="85" width="0.0595%" height="15" fill="rgb(217,147,25)" fg:x="1136" fg:w="76"/><text x="1.1397%" y="95.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks (323 samples, 0.25%)</title><rect x="0.6970%" y="133" width="0.2530%" height="15" fill="rgb(247,81,37)" fg:x="890" fg:w="323"/><text x="0.9470%" y="143.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (16 samples, 0.01%)</title><rect x="0.9531%" y="117" width="0.0125%" height="15" fill="rgb(209,12,38)" fg:x="1217" fg:w="16"/><text x="1.2031%" y="127.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (364 samples, 0.29%)</title><rect x="0.6970%" y="149" width="0.2851%" height="15" fill="rgb(227,1,9)" fg:x="890" fg:w="364"/><text x="0.9470%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (41 samples, 0.03%)</title><rect x="0.9500%" y="133" width="0.0321%" height="15" fill="rgb(248,47,43)" fg:x="1213" fg:w="41"/><text x="1.2000%" y="143.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (21 samples, 0.02%)</title><rect x="0.9657%" y="117" width="0.0164%" height="15" fill="rgb(221,10,30)" fg:x="1233" fg:w="21"/><text x="1.2157%" y="127.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (19 samples, 0.01%)</title><rect x="0.9672%" y="101" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="1235" fg:w="19"/><text x="1.2172%" y="111.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (19 samples, 0.01%)</title><rect x="0.9821%" y="133" width="0.0149%" height="15" fill="rgb(222,148,37)" fg:x="1254" fg:w="19"/><text x="1.2321%" y="143.50"></text></g><g><title>publisher`&lt;ethereum_consensus::types::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_,_,_,_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (394 samples, 0.31%)</title><rect x="0.6970%" y="181" width="0.3086%" height="15" fill="rgb(234,67,33)" fg:x="890" fg:w="394"/><text x="0.9470%" y="191.50"></text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (394 samples, 0.31%)</title><rect x="0.6970%" y="165" width="0.3086%" height="15" fill="rgb(247,98,35)" fg:x="890" fg:w="394"/><text x="0.9470%" y="175.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (30 samples, 0.02%)</title><rect x="0.9821%" y="149" width="0.0235%" height="15" fill="rgb(247,138,52)" fg:x="1254" fg:w="30"/><text x="1.2321%" y="159.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (40 samples, 0.03%)</title><rect x="1.0135%" y="149" width="0.0313%" height="15" fill="rgb(213,79,30)" fg:x="1294" fg:w="40"/><text x="1.2635%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (39 samples, 0.03%)</title><rect x="1.0142%" y="133" width="0.0305%" height="15" fill="rgb(246,177,23)" fg:x="1295" fg:w="39"/><text x="1.2642%" y="143.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (25 samples, 0.02%)</title><rect x="1.0252%" y="117" width="0.0196%" height="15" fill="rgb(230,62,27)" fg:x="1309" fg:w="25"/><text x="1.2752%" y="127.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (19 samples, 0.01%)</title><rect x="1.0299%" y="101" width="0.0149%" height="15" fill="rgb(216,154,8)" fg:x="1315" fg:w="19"/><text x="1.2799%" y="111.50"></text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (60 samples, 0.05%)</title><rect x="1.0135%" y="165" width="0.0470%" height="15" fill="rgb(244,35,45)" fg:x="1294" fg:w="60"/><text x="1.2635%" y="175.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (20 samples, 0.02%)</title><rect x="1.0448%" y="149" width="0.0157%" height="15" fill="rgb(251,115,12)" fg:x="1334" fg:w="20"/><text x="1.2948%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (20 samples, 0.02%)</title><rect x="1.0448%" y="133" width="0.0157%" height="15" fill="rgb(240,54,50)" fg:x="1334" fg:w="20"/><text x="1.2948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (842 samples, 0.66%)</title><rect x="1.0675%" y="133" width="0.6595%" height="15" fill="rgb(233,84,52)" fg:x="1363" fg:w="842"/><text x="1.3175%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,176 samples, 0.92%)</title><rect x="1.7277%" y="133" width="0.9210%" height="15" fill="rgb(207,117,47)" fg:x="2206" fg:w="1176"/><text x="1.9777%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (745 samples, 0.58%)</title><rect x="2.6488%" y="133" width="0.5835%" height="15" fill="rgb(249,43,39)" fg:x="3382" fg:w="745"/><text x="2.8988%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (682 samples, 0.53%)</title><rect x="3.2346%" y="117" width="0.5341%" height="15" fill="rgb(209,38,44)" fg:x="4130" fg:w="682"/><text x="3.4846%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (686 samples, 0.54%)</title><rect x="3.2322%" y="133" width="0.5373%" height="15" fill="rgb(236,212,23)" fg:x="4127" fg:w="686"/><text x="3.4822%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (159 samples, 0.12%)</title><rect x="3.7781%" y="133" width="0.1245%" height="15" fill="rgb(242,79,21)" fg:x="4824" fg:w="159"/><text x="4.0281%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,832 samples, 2.22%)</title><rect x="3.9027%" y="133" width="2.2180%" height="15" fill="rgb(211,96,35)" fg:x="4983" fg:w="2832"/><text x="4.1527%" y="143.50">l..</text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (86 samples, 0.07%)</title><rect x="6.1207%" y="133" width="0.0674%" height="15" fill="rgb(253,215,40)" fg:x="7815" fg:w="86"/><text x="6.3707%" y="143.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (306 samples, 0.24%)</title><rect x="6.1888%" y="133" width="0.2397%" height="15" fill="rgb(211,81,21)" fg:x="7902" fg:w="306"/><text x="6.4388%" y="143.50"></text></g><g><title>publisher`DYLD-STUB$$free (279 samples, 0.22%)</title><rect x="6.4293%" y="133" width="0.2185%" height="15" fill="rgb(208,190,38)" fg:x="8209" fg:w="279"/><text x="6.6793%" y="143.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (230 samples, 0.18%)</title><rect x="6.6478%" y="133" width="0.1801%" height="15" fill="rgb(235,213,38)" fg:x="8488" fg:w="230"/><text x="6.8978%" y="143.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (232 samples, 0.18%)</title><rect x="6.8279%" y="133" width="0.1817%" height="15" fill="rgb(237,122,38)" fg:x="8718" fg:w="232"/><text x="7.0779%" y="143.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (50,622 samples, 39.65%)</title><rect x="7.0151%" y="133" width="39.6469%" height="15" fill="rgb(244,218,35)" fg:x="8957" fg:w="50622"/><text x="7.2651%" y="143.50">publisher`sha2::sha256::soft::compress</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (133 samples, 0.10%)</title><rect x="49.8888%" y="117" width="0.1042%" height="15" fill="rgb(240,68,47)" fg:x="63699" fg:w="133"/><text x="50.1388%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,100 samples, 2.43%)</title><rect x="49.9930%" y="117" width="2.4279%" height="15" fill="rgb(210,16,53)" fg:x="63832" fg:w="3100"/><text x="50.2430%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`free_medium (81 samples, 0.06%)</title><rect x="52.4209%" y="117" width="0.0634%" height="15" fill="rgb(235,124,12)" fg:x="66932" fg:w="81"/><text x="52.6709%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (81 samples, 0.06%)</title><rect x="52.4209%" y="101" width="0.0634%" height="15" fill="rgb(224,169,11)" fg:x="66932" fg:w="81"/><text x="52.6709%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1,659 samples, 1.30%)</title><rect x="52.4866%" y="117" width="1.2993%" height="15" fill="rgb(250,166,2)" fg:x="67016" fg:w="1659"/><text x="52.7366%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,154 samples, 0.90%)</title><rect x="53.7868%" y="101" width="0.9038%" height="15" fill="rgb(242,216,29)" fg:x="68676" fg:w="1154"/><text x="54.0368%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,156 samples, 0.91%)</title><rect x="53.7860%" y="117" width="0.9054%" height="15" fill="rgb(230,116,27)" fg:x="68675" fg:w="1156"/><text x="54.0360%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (188 samples, 0.15%)</title><rect x="54.6913%" y="117" width="0.1472%" height="15" fill="rgb(228,99,48)" fg:x="69831" fg:w="188"/><text x="54.9413%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2,692 samples, 2.11%)</title><rect x="54.8386%" y="117" width="2.1084%" height="15" fill="rgb(253,11,6)" fg:x="70019" fg:w="2692"/><text x="55.0886%" y="127.50">l..</text></g><g><title>publisher`&lt;D as digest::digest::Digest&gt;::finalize_reset (605 samples, 0.47%)</title><rect x="56.9469%" y="117" width="0.4738%" height="15" fill="rgb(247,143,39)" fg:x="72711" fg:w="605"/><text x="57.1969%" y="127.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (921 samples, 0.72%)</title><rect x="57.4208%" y="117" width="0.7213%" height="15" fill="rgb(236,97,10)" fg:x="73316" fg:w="921"/><text x="57.6708%" y="127.50"></text></g><g><title>publisher`DYLD-STUB$$bzero (117 samples, 0.09%)</title><rect x="58.1421%" y="117" width="0.0916%" height="15" fill="rgb(233,208,19)" fg:x="74237" fg:w="117"/><text x="58.3921%" y="127.50"></text></g><g><title>publisher`lido_oracle_core::io::validator_membership::Input::build_initial (125,670 samples, 98.42%)</title><rect x="0.6970%" y="197" width="98.4242%" height="15" fill="rgb(216,164,2)" fg:x="890" fg:w="125670"/><text x="0.9470%" y="207.50">publisher`lido_oracle_core::io::validator_membership::Input::build_initial</text></g><g><title>publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build (125,266 samples, 98.11%)</title><rect x="1.0135%" y="181" width="98.1078%" height="15" fill="rgb(220,129,5)" fg:x="1294" fg:w="125266"/><text x="1.2635%" y="191.50">publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree (125,204 samples, 98.06%)</title><rect x="1.0620%" y="165" width="98.0592%" height="15" fill="rgb(242,17,10)" fg:x="1356" fg:w="125204"/><text x="1.3120%" y="175.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (125,201 samples, 98.06%)</title><rect x="1.0644%" y="149" width="98.0569%" height="15" fill="rgb(242,107,0)" fg:x="1359" fg:w="125201"/><text x="1.3144%" y="159.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (66,978 samples, 52.46%)</title><rect x="46.6644%" y="133" width="52.4569%" height="15" fill="rgb(251,28,31)" fg:x="59582" fg:w="66978"/><text x="46.9144%" y="143.50">publisher`ssz_rs::merkleization::merkleize::Tree::new</text></g><g><title>publisher`sha2::sha256::soft::compress (52,206 samples, 40.89%)</title><rect x="58.2337%" y="117" width="40.8875%" height="15" fill="rgb(233,223,10)" fg:x="74354" fg:w="52206"/><text x="58.4837%" y="127.50">publisher`sha2::sha256::soft::compress</text></g><g><title>dyld`start (126,561 samples, 99.12%)</title><rect x="0.0000%" y="277" width="99.1220%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="126561"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>publisher`main (126,558 samples, 99.12%)</title><rect x="0.0023%" y="261" width="99.1197%" height="15" fill="rgb(232,23,21)" fg:x="3" fg:w="126558"/><text x="0.2523%" y="271.50">publisher`main</text></g><g><title>publisher`std::sys::backtrace::__rust_begin_short_backtrace (126,558 samples, 99.12%)</title><rect x="0.0023%" y="245" width="99.1197%" height="15" fill="rgb(244,5,23)" fg:x="3" fg:w="126558"/><text x="0.2523%" y="255.50">publisher`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>publisher`publisher::main (126,558 samples, 99.12%)</title><rect x="0.0023%" y="229" width="99.1197%" height="15" fill="rgb(226,81,46)" fg:x="3" fg:w="126558"/><text x="0.2523%" y="239.50">publisher`publisher::main</text></g><g><title>publisher`tokio::runtime::park::CachedParkThread::block_on (126,557 samples, 99.12%)</title><rect x="0.0031%" y="213" width="99.1189%" height="15" fill="rgb(247,70,30)" fg:x="4" fg:w="126557"/><text x="0.2531%" y="223.50">publisher`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.02%)</title><rect x="99.1604%" y="213" width="0.0164%" height="15" fill="rgb(212,68,19)" fg:x="126610" fg:w="21"/><text x="99.4104%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (401 samples, 0.31%)</title><rect x="99.1894%" y="213" width="0.3141%" height="15" fill="rgb(240,187,13)" fg:x="126647" fg:w="401"/><text x="99.4394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 0.01%)</title><rect x="99.5348%" y="197" width="0.0149%" height="15" fill="rgb(223,113,26)" fg:x="127088" fg:w="19"/><text x="99.7848%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (13 samples, 0.01%)</title><rect x="99.5512%" y="197" width="0.0102%" height="15" fill="rgb(206,192,2)" fg:x="127109" fg:w="13"/><text x="99.8012%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.02%)</title><rect x="99.5692%" y="197" width="0.0188%" height="15" fill="rgb(241,108,4)" fg:x="127132" fg:w="24"/><text x="99.8192%" y="207.50"></text></g><g><title>publisher`lido_oracle_core::io::validator_membership::Input::build_initial (1,008 samples, 0.79%)</title><rect x="99.1338%" y="277" width="0.7895%" height="15" fill="rgb(247,173,49)" fg:x="126576" fg:w="1008"/><text x="99.3838%" y="287.50"></text></g><g><title>publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build (1,008 samples, 0.79%)</title><rect x="99.1338%" y="261" width="0.7895%" height="15" fill="rgb(224,114,35)" fg:x="126576" fg:w="1008"/><text x="99.3838%" y="271.50"></text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree (1,008 samples, 0.79%)</title><rect x="99.1338%" y="245" width="0.7895%" height="15" fill="rgb(245,159,27)" fg:x="126576" fg:w="1008"/><text x="99.3838%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (1,008 samples, 0.79%)</title><rect x="99.1338%" y="229" width="0.7895%" height="15" fill="rgb(245,172,44)" fg:x="126576" fg:w="1008"/><text x="99.3838%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (536 samples, 0.42%)</title><rect x="99.5035%" y="213" width="0.4198%" height="15" fill="rgb(236,23,11)" fg:x="127048" fg:w="536"/><text x="99.7535%" y="223.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (411 samples, 0.32%)</title><rect x="99.6014%" y="197" width="0.3219%" height="15" fill="rgb(205,117,38)" fg:x="127173" fg:w="411"/><text x="99.8514%" y="207.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (32 samples, 0.03%)</title><rect x="99.9311%" y="181" width="0.0251%" height="15" fill="rgb(237,72,25)" fg:x="127594" fg:w="32"/><text x="100.1811%" y="191.50"></text></g><g><title>all (127,682 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="127682"/><text x="0.2500%" y="303.50"></text></g><g><title>publisher`publisher::main (98 samples, 0.08%)</title><rect x="99.9232%" y="277" width="0.0768%" height="15" fill="rgb(217,125,39)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="287.50"></text></g><g><title>publisher`tokio::runtime::park::CachedParkThread::block_on (98 samples, 0.08%)</title><rect x="99.9232%" y="261" width="0.0768%" height="15" fill="rgb(235,36,10)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="271.50"></text></g><g><title>publisher`lido_oracle_core::io::validator_membership::Input::build_initial (98 samples, 0.08%)</title><rect x="99.9232%" y="245" width="0.0768%" height="15" fill="rgb(251,123,47)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="255.50"></text></g><g><title>publisher`lido_oracle_core::multiproof_builder::MultiproofBuilder::build (98 samples, 0.08%)</title><rect x="99.9232%" y="229" width="0.0768%" height="15" fill="rgb(221,13,13)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree (98 samples, 0.08%)</title><rect x="99.9232%" y="213" width="0.0768%" height="15" fill="rgb(238,131,9)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (98 samples, 0.08%)</title><rect x="99.9232%" y="197" width="0.0768%" height="15" fill="rgb(211,50,8)" fg:x="127584" fg:w="98"/><text x="100.1732%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (56 samples, 0.04%)</title><rect x="99.9561%" y="181" width="0.0439%" height="15" fill="rgb(245,182,24)" fg:x="127626" fg:w="56"/><text x="100.2061%" y="191.50"></text></g><g><title>publisher`sha2::sha256::soft::compress (44 samples, 0.03%)</title><rect x="99.9655%" y="165" width="0.0345%" height="15" fill="rgb(242,14,37)" fg:x="127638" fg:w="44"/><text x="100.2155%" y="175.50"></text></g></svg></svg>