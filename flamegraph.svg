<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="2850"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (2 samples, 0.07%)</title><rect x="0.0000%" y="293" width="0.0702%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.07%)</title><rect x="0.0000%" y="277" width="0.0702%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>publisher`DYLD-STUB$$fcntl (1 samples, 0.04%)</title><rect x="0.0702%" y="293" width="0.0351%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3202%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="0.1053%" y="165" width="0.0351%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3553%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="0.1053%" y="149" width="0.0351%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3553%" y="159.50"></text></g><g><title>publisher`&lt;http_cache::managers::cacache::CACacheManager as http_cache::CacheManager&gt;::get::_{{closure}} (35 samples, 1.23%)</title><rect x="0.1053%" y="181" width="1.2281%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="35"/><text x="0.3553%" y="191.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (34 samples, 1.19%)</title><rect x="0.1404%" y="165" width="1.1930%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="34"/><text x="0.3904%" y="175.50"></text></g><g><title>publisher`reqwest_middleware::client::RequestBuilder::send::_{{closure}} (139 samples, 4.88%)</title><rect x="0.1053%" y="213" width="4.8772%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="139"/><text x="0.3553%" y="223.50">publis..</text></g><g><title>publisher`&lt;http_cache_reqwest::Cache&lt;T&gt; as reqwest_middleware::middleware::Middleware&gt;::handle::_{{closure}} (139 samples, 4.88%)</title><rect x="0.1053%" y="197" width="4.8772%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="139"/><text x="0.3553%" y="207.50">publis..</text></g><g><title>publisher`sha2::sha256::compress256 (104 samples, 3.65%)</title><rect x="1.3333%" y="181" width="3.6491%" height="15" fill="rgb(220,122,19)" fg:x="38" fg:w="104"/><text x="1.5833%" y="191.50">publ..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="5.0175%" y="149" width="0.0351%" height="15" fill="rgb(250,228,42)" fg:x="143" fg:w="1"/><text x="5.2675%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.21%)</title><rect x="5.0877%" y="133" width="0.2105%" height="15" fill="rgb(240,193,28)" fg:x="145" fg:w="6"/><text x="5.3377%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="5.2982%" y="133" width="0.0702%" height="15" fill="rgb(216,20,37)" fg:x="151" fg:w="2"/><text x="5.5482%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.07%)</title><rect x="5.2982%" y="117" width="0.0702%" height="15" fill="rgb(206,188,39)" fg:x="151" fg:w="2"/><text x="5.5482%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.11%)</title><rect x="5.3684%" y="133" width="0.1053%" height="15" fill="rgb(217,207,13)" fg:x="153" fg:w="3"/><text x="5.6184%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.28%)</title><rect x="5.4737%" y="133" width="0.2807%" height="15" fill="rgb(231,73,38)" fg:x="156" fg:w="8"/><text x="5.7237%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="5.7895%" y="117" width="0.0702%" height="15" fill="rgb(225,20,46)" fg:x="165" fg:w="2"/><text x="6.0395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.07%)</title><rect x="5.7895%" y="101" width="0.0702%" height="15" fill="rgb(210,31,41)" fg:x="165" fg:w="2"/><text x="6.0395%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="5.8246%" y="85" width="0.0351%" height="15" fill="rgb(221,200,47)" fg:x="166" fg:w="1"/><text x="6.0746%" y="95.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.14%)</title><rect x="5.7544%" y="133" width="0.1404%" height="15" fill="rgb(226,26,5)" fg:x="164" fg:w="4"/><text x="6.0044%" y="143.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.04%)</title><rect x="5.8596%" y="117" width="0.0351%" height="15" fill="rgb(249,33,26)" fg:x="167" fg:w="1"/><text x="6.1096%" y="127.50"></text></g><g><title>publisher`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.04%)</title><rect x="5.8596%" y="101" width="0.0351%" height="15" fill="rgb(235,183,28)" fg:x="167" fg:w="1"/><text x="6.1096%" y="111.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (2 samples, 0.07%)</title><rect x="5.8947%" y="133" width="0.0702%" height="15" fill="rgb(221,5,38)" fg:x="168" fg:w="2"/><text x="6.1447%" y="143.50"></text></g><g><title>publisher`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (11 samples, 0.39%)</title><rect x="5.9649%" y="133" width="0.3860%" height="15" fill="rgb(247,18,42)" fg:x="170" fg:w="11"/><text x="6.2149%" y="143.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (44 samples, 1.54%)</title><rect x="5.0526%" y="149" width="1.5439%" height="15" fill="rgb(241,131,45)" fg:x="144" fg:w="44"/><text x="5.3026%" y="159.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (7 samples, 0.25%)</title><rect x="6.3509%" y="133" width="0.2456%" height="15" fill="rgb(249,31,29)" fg:x="181" fg:w="7"/><text x="6.6009%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.21%)</title><rect x="6.3860%" y="117" width="0.2105%" height="15" fill="rgb(225,111,53)" fg:x="182" fg:w="6"/><text x="6.6360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.21%)</title><rect x="6.3860%" y="101" width="0.2105%" height="15" fill="rgb(238,160,17)" fg:x="182" fg:w="6"/><text x="6.6360%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.11%)</title><rect x="6.4912%" y="85" width="0.1053%" height="15" fill="rgb(214,148,48)" fg:x="185" fg:w="3"/><text x="6.7412%" y="95.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (47 samples, 1.65%)</title><rect x="4.9825%" y="181" width="1.6491%" height="15" fill="rgb(232,36,49)" fg:x="142" fg:w="47"/><text x="5.2325%" y="191.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (47 samples, 1.65%)</title><rect x="4.9825%" y="165" width="1.6491%" height="15" fill="rgb(209,103,24)" fg:x="142" fg:w="47"/><text x="5.2325%" y="175.50"></text></g><g><title>publisher`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.04%)</title><rect x="6.5965%" y="149" width="0.0351%" height="15" fill="rgb(229,88,8)" fg:x="188" fg:w="1"/><text x="6.8465%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.11%)</title><rect x="6.6316%" y="165" width="0.1053%" height="15" fill="rgb(213,181,19)" fg:x="189" fg:w="3"/><text x="6.8816%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.25%)</title><rect x="7.4386%" y="149" width="0.2456%" height="15" fill="rgb(254,191,54)" fg:x="212" fg:w="7"/><text x="7.6886%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="7.6842%" y="149" width="0.0702%" height="15" fill="rgb(241,83,37)" fg:x="219" fg:w="2"/><text x="7.9342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="7.7544%" y="149" width="0.0702%" height="15" fill="rgb(233,36,39)" fg:x="221" fg:w="2"/><text x="8.0044%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="7.8246%" y="149" width="0.0702%" height="15" fill="rgb(226,3,54)" fg:x="223" fg:w="2"/><text x="8.0746%" y="159.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="7.8947%" y="149" width="0.1404%" height="15" fill="rgb(245,192,40)" fg:x="225" fg:w="4"/><text x="8.1447%" y="159.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.04%)</title><rect x="8.0351%" y="149" width="0.0351%" height="15" fill="rgb(238,167,29)" fg:x="229" fg:w="1"/><text x="8.2851%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.11%)</title><rect x="8.0702%" y="149" width="0.1053%" height="15" fill="rgb(232,182,51)" fg:x="230" fg:w="3"/><text x="8.3202%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="8.0702%" y="133" width="0.1053%" height="15" fill="rgb(231,60,39)" fg:x="230" fg:w="3"/><text x="8.3202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.11%)</title><rect x="8.0702%" y="117" width="0.1053%" height="15" fill="rgb(208,69,12)" fg:x="230" fg:w="3"/><text x="8.3202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.11%)</title><rect x="8.0702%" y="101" width="0.1053%" height="15" fill="rgb(235,93,37)" fg:x="230" fg:w="3"/><text x="8.3202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.11%)</title><rect x="8.0702%" y="85" width="0.1053%" height="15" fill="rgb(213,116,39)" fg:x="230" fg:w="3"/><text x="8.3202%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (3 samples, 0.11%)</title><rect x="8.0702%" y="69" width="0.1053%" height="15" fill="rgb(222,207,29)" fg:x="230" fg:w="3"/><text x="8.3202%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (3 samples, 0.11%)</title><rect x="8.0702%" y="53" width="0.1053%" height="15" fill="rgb(206,96,30)" fg:x="230" fg:w="3"/><text x="8.3202%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.21%)</title><rect x="8.1754%" y="133" width="0.2105%" height="15" fill="rgb(218,138,4)" fg:x="233" fg:w="6"/><text x="8.4254%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="8.3860%" y="133" width="0.0702%" height="15" fill="rgb(250,191,14)" fg:x="239" fg:w="2"/><text x="8.6360%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="8.4211%" y="117" width="0.0351%" height="15" fill="rgb(239,60,40)" fg:x="240" fg:w="1"/><text x="8.6711%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="8.4561%" y="133" width="0.0351%" height="15" fill="rgb(206,27,48)" fg:x="241" fg:w="1"/><text x="8.7061%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="8.4912%" y="133" width="0.0351%" height="15" fill="rgb(225,35,8)" fg:x="242" fg:w="1"/><text x="8.7412%" y="143.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 4.81%)</title><rect x="8.8421%" y="117" width="4.8070%" height="15" fill="rgb(250,213,24)" fg:x="252" fg:w="137"/><text x="9.0921%" y="127.50">publis..</text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.07%)</title><rect x="13.7544%" y="101" width="0.0702%" height="15" fill="rgb(247,123,22)" fg:x="392" fg:w="2"/><text x="14.0044%" y="111.50"></text></g><g><title>publisher`DYLD-STUB$$realloc (1 samples, 0.04%)</title><rect x="13.8246%" y="101" width="0.0351%" height="15" fill="rgb(231,138,38)" fg:x="394" fg:w="1"/><text x="14.0746%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="13.8596%" y="85" width="0.0351%" height="15" fill="rgb(231,145,46)" fg:x="395" fg:w="1"/><text x="14.1096%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="13.9649%" y="53" width="0.0351%" height="15" fill="rgb(251,118,11)" fg:x="398" fg:w="1"/><text x="14.2149%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.21%)</title><rect x="14.1404%" y="37" width="0.2105%" height="15" fill="rgb(217,147,25)" fg:x="403" fg:w="6"/><text x="14.3904%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.53%)</title><rect x="14.0000%" y="53" width="0.5263%" height="15" fill="rgb(247,81,37)" fg:x="399" fg:w="15"/><text x="14.2500%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.18%)</title><rect x="14.3509%" y="37" width="0.1754%" height="15" fill="rgb(209,12,38)" fg:x="409" fg:w="5"/><text x="14.6009%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (22 samples, 0.77%)</title><rect x="13.9298%" y="69" width="0.7719%" height="15" fill="rgb(227,1,9)" fg:x="397" fg:w="22"/><text x="14.1798%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.18%)</title><rect x="14.5263%" y="53" width="0.1754%" height="15" fill="rgb(248,47,43)" fg:x="414" fg:w="5"/><text x="14.7763%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (25 samples, 0.88%)</title><rect x="13.8947%" y="85" width="0.8772%" height="15" fill="rgb(221,10,30)" fg:x="396" fg:w="25"/><text x="14.1447%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.07%)</title><rect x="14.7018%" y="69" width="0.0702%" height="15" fill="rgb(210,229,1)" fg:x="419" fg:w="2"/><text x="14.9518%" y="79.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (179 samples, 6.28%)</title><rect x="8.5263%" y="133" width="6.2807%" height="15" fill="rgb(222,148,37)" fg:x="243" fg:w="179"/><text x="8.7763%" y="143.50">publishe..</text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 1.16%)</title><rect x="13.6491%" y="117" width="1.1579%" height="15" fill="rgb(234,67,33)" fg:x="389" fg:w="33"/><text x="13.8991%" y="127.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (27 samples, 0.95%)</title><rect x="13.8596%" y="101" width="0.9474%" height="15" fill="rgb(247,98,35)" fg:x="395" fg:w="27"/><text x="14.1096%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="14.7719%" y="85" width="0.0351%" height="15" fill="rgb(247,138,52)" fg:x="421" fg:w="1"/><text x="15.0219%" y="95.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (190 samples, 6.67%)</title><rect x="8.1754%" y="149" width="6.6667%" height="15" fill="rgb(213,79,30)" fg:x="233" fg:w="190"/><text x="8.4254%" y="159.50">publisher..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.04%)</title><rect x="14.8070%" y="133" width="0.0351%" height="15" fill="rgb(246,177,23)" fg:x="422" fg:w="1"/><text x="15.0570%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::phase0::operations::Eth1Data&gt;::deserialize (1 samples, 0.04%)</title><rect x="14.8421%" y="149" width="0.0351%" height="15" fill="rgb(230,62,27)" fg:x="423" fg:w="1"/><text x="15.0921%" y="159.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (1 samples, 0.04%)</title><rect x="14.8421%" y="133" width="0.0351%" height="15" fill="rgb(216,154,8)" fg:x="423" fg:w="1"/><text x="15.0921%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (1 samples, 0.04%)</title><rect x="14.8421%" y="117" width="0.0351%" height="15" fill="rgb(244,35,45)" fg:x="423" fg:w="1"/><text x="15.0921%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.21%)</title><rect x="15.1930%" y="133" width="0.2105%" height="15" fill="rgb(251,115,12)" fg:x="433" fg:w="6"/><text x="15.4430%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.21%)</title><rect x="15.4035%" y="133" width="0.2105%" height="15" fill="rgb(240,54,50)" fg:x="439" fg:w="6"/><text x="15.6535%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="15.6140%" y="133" width="0.0351%" height="15" fill="rgb(233,84,52)" fg:x="445" fg:w="1"/><text x="15.8640%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.14%)</title><rect x="15.6491%" y="133" width="0.1404%" height="15" fill="rgb(207,117,47)" fg:x="446" fg:w="4"/><text x="15.8991%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (32 samples, 1.12%)</title><rect x="14.8772%" y="149" width="1.1228%" height="15" fill="rgb(249,43,39)" fg:x="424" fg:w="32"/><text x="15.1272%" y="159.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (6 samples, 0.21%)</title><rect x="15.7895%" y="133" width="0.2105%" height="15" fill="rgb(209,38,44)" fg:x="450" fg:w="6"/><text x="16.0395%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.14%)</title><rect x="15.8596%" y="117" width="0.1404%" height="15" fill="rgb(236,212,23)" fg:x="452" fg:w="4"/><text x="16.1096%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="15.9649%" y="101" width="0.0351%" height="15" fill="rgb(242,79,21)" fg:x="455" fg:w="1"/><text x="16.2149%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="15.9649%" y="85" width="0.0351%" height="15" fill="rgb(211,96,35)" fg:x="455" fg:w="1"/><text x="16.2149%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="16.0351%" y="133" width="0.0702%" height="15" fill="rgb(253,215,40)" fg:x="457" fg:w="2"/><text x="16.2851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.11%)</title><rect x="16.1053%" y="133" width="0.1053%" height="15" fill="rgb(211,81,21)" fg:x="459" fg:w="3"/><text x="16.3553%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.07%)</title><rect x="16.1404%" y="117" width="0.0702%" height="15" fill="rgb(208,190,38)" fg:x="460" fg:w="2"/><text x="16.3904%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.07%)</title><rect x="16.1404%" y="101" width="0.0702%" height="15" fill="rgb(235,213,38)" fg:x="460" fg:w="2"/><text x="16.3904%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="16.2105%" y="133" width="0.0351%" height="15" fill="rgb(237,122,38)" fg:x="462" fg:w="1"/><text x="16.4605%" y="143.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="16.2456%" y="133" width="0.0351%" height="15" fill="rgb(244,218,35)" fg:x="463" fg:w="1"/><text x="16.4956%" y="143.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 2.98%)</title><rect x="16.4211%" y="117" width="2.9825%" height="15" fill="rgb(240,68,47)" fg:x="468" fg:w="85"/><text x="16.6711%" y="127.50">pub..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="19.4386%" y="85" width="0.0351%" height="15" fill="rgb(210,16,53)" fg:x="554" fg:w="1"/><text x="19.6886%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.07%)</title><rect x="19.5088%" y="53" width="0.0702%" height="15" fill="rgb(235,124,12)" fg:x="556" fg:w="2"/><text x="19.7588%" y="63.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (96 samples, 3.37%)</title><rect x="16.2807%" y="133" width="3.3684%" height="15" fill="rgb(224,169,11)" fg:x="464" fg:w="96"/><text x="16.5307%" y="143.50">pub..</text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.25%)</title><rect x="19.4035%" y="117" width="0.2456%" height="15" fill="rgb(250,166,2)" fg:x="553" fg:w="7"/><text x="19.6535%" y="127.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (6 samples, 0.21%)</title><rect x="19.4386%" y="101" width="0.2105%" height="15" fill="rgb(242,216,29)" fg:x="554" fg:w="6"/><text x="19.6886%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.18%)</title><rect x="19.4737%" y="85" width="0.1754%" height="15" fill="rgb(230,116,27)" fg:x="555" fg:w="5"/><text x="19.7237%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.14%)</title><rect x="19.5088%" y="69" width="0.1404%" height="15" fill="rgb(228,99,48)" fg:x="556" fg:w="4"/><text x="19.7588%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.07%)</title><rect x="19.5789%" y="53" width="0.0702%" height="15" fill="rgb(253,11,6)" fg:x="558" fg:w="2"/><text x="19.8289%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="19.5789%" y="37" width="0.0702%" height="15" fill="rgb(247,143,39)" fg:x="558" fg:w="2"/><text x="19.8289%" y="47.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (106 samples, 3.72%)</title><rect x="16.0000%" y="149" width="3.7193%" height="15" fill="rgb(236,97,10)" fg:x="456" fg:w="106"/><text x="16.2500%" y="159.50">publ..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.07%)</title><rect x="19.6491%" y="133" width="0.0702%" height="15" fill="rgb(233,208,19)" fg:x="560" fg:w="2"/><text x="19.8991%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="19.6842%" y="117" width="0.0351%" height="15" fill="rgb(216,164,2)" fg:x="561" fg:w="1"/><text x="19.9342%" y="127.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (372 samples, 13.05%)</title><rect x="6.7368%" y="165" width="13.0526%" height="15" fill="rgb(220,129,5)" fg:x="192" fg:w="372"/><text x="6.9868%" y="175.50">publisher`&lt;ssz_rs::l..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.07%)</title><rect x="19.7193%" y="149" width="0.0702%" height="15" fill="rgb(242,17,10)" fg:x="562" fg:w="2"/><text x="19.9693%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="19.8246%" y="149" width="0.0351%" height="15" fill="rgb(242,107,0)" fg:x="565" fg:w="1"/><text x="20.0746%" y="159.50"></text></g><g><title>publisher`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.11%)</title><rect x="19.8596%" y="149" width="0.1053%" height="15" fill="rgb(251,28,31)" fg:x="566" fg:w="3"/><text x="20.1096%" y="159.50"></text></g><g><title>publisher`&lt;alloy_primitives::bits::serde::&lt;impl serde::de::Deserialize for alloy_primitives::bits::fixed::FixedBytes&lt;_&gt;&gt;::deserialize::FixedVisitor&lt;_&gt; as serde::de::Visitor&gt;::visit_str (3 samples, 0.11%)</title><rect x="19.8596%" y="133" width="0.1053%" height="15" fill="rgb(233,223,10)" fg:x="566" fg:w="3"/><text x="20.1096%" y="143.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (2 samples, 0.07%)</title><rect x="19.9649%" y="149" width="0.0702%" height="15" fill="rgb(215,21,27)" fg:x="569" fg:w="2"/><text x="20.2149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.25%)</title><rect x="20.0351%" y="133" width="0.2456%" height="15" fill="rgb(232,23,21)" fg:x="571" fg:w="7"/><text x="20.2851%" y="143.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="20.2807%" y="133" width="0.0351%" height="15" fill="rgb(244,5,23)" fg:x="578" fg:w="1"/><text x="20.5307%" y="143.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 1.37%)</title><rect x="20.4912%" y="117" width="1.3684%" height="15" fill="rgb(226,81,46)" fg:x="584" fg:w="39"/><text x="20.7412%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="21.8596%" y="101" width="0.0351%" height="15" fill="rgb(247,70,30)" fg:x="623" fg:w="1"/><text x="22.1096%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.07%)</title><rect x="21.8947%" y="53" width="0.0702%" height="15" fill="rgb(212,68,19)" fg:x="624" fg:w="2"/><text x="22.1447%" y="63.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (48 samples, 1.68%)</title><rect x="20.3158%" y="133" width="1.6842%" height="15" fill="rgb(240,187,13)" fg:x="579" fg:w="48"/><text x="20.5658%" y="143.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.14%)</title><rect x="21.8596%" y="117" width="0.1404%" height="15" fill="rgb(223,113,26)" fg:x="623" fg:w="4"/><text x="22.1096%" y="127.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="21.8947%" y="101" width="0.1053%" height="15" fill="rgb(206,192,2)" fg:x="624" fg:w="3"/><text x="22.1447%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.11%)</title><rect x="21.8947%" y="85" width="0.1053%" height="15" fill="rgb(241,108,4)" fg:x="624" fg:w="3"/><text x="22.1447%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.11%)</title><rect x="21.8947%" y="69" width="0.1053%" height="15" fill="rgb(247,173,49)" fg:x="624" fg:w="3"/><text x="22.1447%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="21.9649%" y="53" width="0.0351%" height="15" fill="rgb(224,114,35)" fg:x="626" fg:w="1"/><text x="22.2149%" y="63.50"></text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (65 samples, 2.28%)</title><rect x="19.7895%" y="165" width="2.2807%" height="15" fill="rgb(245,159,27)" fg:x="564" fg:w="65"/><text x="20.0395%" y="175.50">p..</text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (58 samples, 2.04%)</title><rect x="20.0351%" y="149" width="2.0351%" height="15" fill="rgb(245,172,44)" fg:x="571" fg:w="58"/><text x="20.2851%" y="159.50">p..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (2 samples, 0.07%)</title><rect x="22.0000%" y="133" width="0.0702%" height="15" fill="rgb(236,23,11)" fg:x="627" fg:w="2"/><text x="22.2500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="22.0351%" y="117" width="0.0351%" height="15" fill="rgb(205,117,38)" fg:x="628" fg:w="1"/><text x="22.2851%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="22.0702%" y="149" width="0.0351%" height="15" fill="rgb(237,72,25)" fg:x="629" fg:w="1"/><text x="22.3202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="22.1053%" y="149" width="0.0351%" height="15" fill="rgb(244,70,9)" fg:x="630" fg:w="1"/><text x="22.3553%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="22.1404%" y="133" width="0.0351%" height="15" fill="rgb(217,125,39)" fg:x="631" fg:w="1"/><text x="22.3904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.07%)</title><rect x="22.1404%" y="149" width="0.0702%" height="15" fill="rgb(235,36,10)" fg:x="631" fg:w="2"/><text x="22.3904%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.04%)</title><rect x="22.1754%" y="133" width="0.0351%" height="15" fill="rgb(251,123,47)" fg:x="632" fg:w="1"/><text x="22.4254%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.04%)</title><rect x="22.1754%" y="117" width="0.0351%" height="15" fill="rgb(221,13,13)" fg:x="632" fg:w="1"/><text x="22.4254%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="22.1754%" y="101" width="0.0351%" height="15" fill="rgb(238,131,9)" fg:x="632" fg:w="1"/><text x="22.4254%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.14%)</title><rect x="22.2807%" y="133" width="0.1404%" height="15" fill="rgb(211,50,8)" fg:x="635" fg:w="4"/><text x="22.5307%" y="143.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::list::List&lt;ethereum_consensus::phase0::validator::Validator,1099511627776_usize&gt;&gt; (13 samples, 0.46%)</title><rect x="22.0702%" y="165" width="0.4561%" height="15" fill="rgb(245,182,24)" fg:x="629" fg:w="13"/><text x="22.3202%" y="175.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ethereum_consensus::phase0::validator::Validator&gt; (9 samples, 0.32%)</title><rect x="22.2105%" y="149" width="0.3158%" height="15" fill="rgb(242,14,37)" fg:x="633" fg:w="9"/><text x="22.4605%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.11%)</title><rect x="22.4211%" y="133" width="0.1053%" height="15" fill="rgb(246,228,12)" fg:x="639" fg:w="3"/><text x="22.6711%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.11%)</title><rect x="22.4211%" y="117" width="0.1053%" height="15" fill="rgb(213,55,15)" fg:x="639" fg:w="3"/><text x="22.6711%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.11%)</title><rect x="22.4211%" y="101" width="0.1053%" height="15" fill="rgb(209,9,3)" fg:x="639" fg:w="3"/><text x="22.6711%" y="111.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::vector::Vector&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;32_usize&gt;,65536_usize&gt;&gt; (4 samples, 0.14%)</title><rect x="22.5263%" y="165" width="0.1404%" height="15" fill="rgb(230,59,30)" fg:x="642" fg:w="4"/><text x="22.7763%" y="175.50"></text></g><g><title>publisher`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="22.5263%" y="149" width="0.1404%" height="15" fill="rgb(209,121,21)" fg:x="642" fg:w="4"/><text x="22.7763%" y="159.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (1 samples, 0.04%)</title><rect x="22.6667%" y="165" width="0.0351%" height="15" fill="rgb(220,109,13)" fg:x="646" fg:w="1"/><text x="22.9167%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (1 samples, 0.04%)</title><rect x="22.7018%" y="165" width="0.0351%" height="15" fill="rgb(232,18,1)" fg:x="647" fg:w="1"/><text x="22.9518%" y="175.50"></text></g><g><title>publisher`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (509 samples, 17.86%)</title><rect x="4.9825%" y="197" width="17.8596%" height="15" fill="rgb(215,41,42)" fg:x="142" fg:w="509"/><text x="5.2325%" y="207.50">publisher`&lt;serde::__private:..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;::deserialize_any (462 samples, 16.21%)</title><rect x="6.6316%" y="181" width="16.2105%" height="15" fill="rgb(224,123,36)" fg:x="189" fg:w="462"/><text x="6.8816%" y="191.50">publisher`serde_json::val..</text></g><g><title>publisher`ethereum_consensus::serde::seq_of_str::deserialize (3 samples, 0.11%)</title><rect x="22.7368%" y="165" width="0.1053%" height="15" fill="rgb(240,125,3)" fg:x="648" fg:w="3"/><text x="22.9868%" y="175.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.11%)</title><rect x="22.7368%" y="149" width="0.1053%" height="15" fill="rgb(205,98,50)" fg:x="648" fg:w="3"/><text x="22.9868%" y="159.50"></text></g><g><title>publisher`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (12 samples, 0.42%)</title><rect x="23.0526%" y="133" width="0.4211%" height="15" fill="rgb(205,185,37)" fg:x="657" fg:w="12"/><text x="23.3026%" y="143.50"></text></g><g><title>publisher`core::str::converts::from_utf8 (6 samples, 0.21%)</title><rect x="23.2632%" y="117" width="0.2105%" height="15" fill="rgb(238,207,15)" fg:x="663" fg:w="6"/><text x="23.5132%" y="127.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (15 samples, 0.53%)</title><rect x="22.9825%" y="149" width="0.5263%" height="15" fill="rgb(213,199,42)" fg:x="655" fg:w="15"/><text x="23.2325%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.04%)</title><rect x="23.4737%" y="133" width="0.0351%" height="15" fill="rgb(235,201,11)" fg:x="669" fg:w="1"/><text x="23.7237%" y="143.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="23.4737%" y="117" width="0.0351%" height="15" fill="rgb(207,46,11)" fg:x="669" fg:w="1"/><text x="23.7237%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="23.4737%" y="101" width="0.0351%" height="15" fill="rgb(241,35,35)" fg:x="669" fg:w="1"/><text x="23.7237%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="23.4737%" y="85" width="0.0351%" height="15" fill="rgb(243,32,47)" fg:x="669" fg:w="1"/><text x="23.7237%" y="95.50"></text></g><g><title>publisher`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.04%)</title><rect x="23.5088%" y="149" width="0.0351%" height="15" fill="rgb(247,202,23)" fg:x="670" fg:w="1"/><text x="23.7588%" y="159.50"></text></g><g><title>publisher`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (13 samples, 0.46%)</title><rect x="23.5439%" y="149" width="0.4561%" height="15" fill="rgb(219,102,11)" fg:x="671" fg:w="13"/><text x="23.7939%" y="159.50"></text></g><g><title>publisher`core::str::converts::from_utf8 (11 samples, 0.39%)</title><rect x="23.6140%" y="133" width="0.3860%" height="15" fill="rgb(243,110,44)" fg:x="673" fg:w="11"/><text x="23.8640%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="24.0000%" y="133" width="0.0351%" height="15" fill="rgb(222,74,54)" fg:x="684" fg:w="1"/><text x="24.2500%" y="143.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (1 samples, 0.04%)</title><rect x="24.0351%" y="133" width="0.0351%" height="15" fill="rgb(216,99,12)" fg:x="685" fg:w="1"/><text x="24.2851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="24.0702%" y="85" width="0.0351%" height="15" fill="rgb(226,22,26)" fg:x="686" fg:w="1"/><text x="24.3202%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="24.1053%" y="69" width="0.0351%" height="15" fill="rgb(217,163,10)" fg:x="687" fg:w="1"/><text x="24.3553%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.11%)</title><rect x="24.0702%" y="117" width="0.1053%" height="15" fill="rgb(213,25,53)" fg:x="686" fg:w="3"/><text x="24.3202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.11%)</title><rect x="24.0702%" y="101" width="0.1053%" height="15" fill="rgb(252,105,26)" fg:x="686" fg:w="3"/><text x="24.3202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.07%)</title><rect x="24.1053%" y="85" width="0.0702%" height="15" fill="rgb(220,39,43)" fg:x="687" fg:w="2"/><text x="24.3553%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="24.1404%" y="69" width="0.0351%" height="15" fill="rgb(229,68,48)" fg:x="688" fg:w="1"/><text x="24.3904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="24.1404%" y="53" width="0.0351%" height="15" fill="rgb(252,8,32)" fg:x="688" fg:w="1"/><text x="24.3904%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.04%)</title><rect x="24.1404%" y="37" width="0.0351%" height="15" fill="rgb(223,20,43)" fg:x="688" fg:w="1"/><text x="24.3904%" y="47.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.21%)</title><rect x="24.0000%" y="149" width="0.2105%" height="15" fill="rgb(229,81,49)" fg:x="684" fg:w="6"/><text x="24.2500%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (4 samples, 0.14%)</title><rect x="24.0702%" y="133" width="0.1404%" height="15" fill="rgb(236,28,36)" fg:x="686" fg:w="4"/><text x="24.3202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="24.1754%" y="117" width="0.0351%" height="15" fill="rgb(249,185,26)" fg:x="689" fg:w="1"/><text x="24.4254%" y="127.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (40 samples, 1.40%)</title><rect x="22.8421%" y="165" width="1.4035%" height="15" fill="rgb(249,174,33)" fg:x="651" fg:w="40"/><text x="23.0921%" y="175.50"></text></g><g><title>publisher`core::str::converts::from_utf8 (1 samples, 0.04%)</title><rect x="24.2105%" y="149" width="0.0351%" height="15" fill="rgb(233,201,37)" fg:x="690" fg:w="1"/><text x="24.4605%" y="159.50"></text></g><g><title>publisher`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.04%)</title><rect x="24.2456%" y="165" width="0.0351%" height="15" fill="rgb(221,78,26)" fg:x="691" fg:w="1"/><text x="24.4956%" y="175.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::get_state::_{{closure}} (690 samples, 24.21%)</title><rect x="0.1053%" y="229" width="24.2105%" height="15" fill="rgb(250,127,30)" fg:x="3" fg:w="690"/><text x="0.3553%" y="239.50">publisher`apps::beacon_client::BeaconCl..</text></g><g><title>publisher`serde_json::de::from_slice (551 samples, 19.33%)</title><rect x="4.9825%" y="213" width="19.3333%" height="15" fill="rgb(230,49,44)" fg:x="142" fg:w="551"/><text x="5.2325%" y="223.50">publisher`serde_json::de::from..</text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (42 samples, 1.47%)</title><rect x="22.8421%" y="197" width="1.4737%" height="15" fill="rgb(229,67,23)" fg:x="651" fg:w="42"/><text x="23.0921%" y="207.50"></text></g><g><title>publisher`&lt;serde::__private::de::content::Content as serde::de::Deserialize&gt;::deserialize (42 samples, 1.47%)</title><rect x="22.8421%" y="181" width="1.4737%" height="15" fill="rgb(249,83,47)" fg:x="651" fg:w="42"/><text x="23.0921%" y="191.50"></text></g><g><title>publisher`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.04%)</title><rect x="24.2807%" y="165" width="0.0351%" height="15" fill="rgb(215,43,3)" fg:x="692" fg:w="1"/><text x="24.5307%" y="175.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::new_with_cache (1 samples, 0.04%)</title><rect x="24.3158%" y="229" width="0.0351%" height="15" fill="rgb(238,154,13)" fg:x="693" fg:w="1"/><text x="24.5658%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.04%)</title><rect x="24.3158%" y="213" width="0.0351%" height="15" fill="rgb(219,56,2)" fg:x="693" fg:w="1"/><text x="24.5658%" y="223.50"></text></g><g><title>dyld`start (695 samples, 24.39%)</title><rect x="0.0000%" y="309" width="24.3860%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="695"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>publisher`main (692 samples, 24.28%)</title><rect x="0.1053%" y="293" width="24.2807%" height="15" fill="rgb(235,30,7)" fg:x="3" fg:w="692"/><text x="0.3553%" y="303.50">publisher`main</text></g><g><title>publisher`std::sys::backtrace::__rust_begin_short_backtrace (692 samples, 24.28%)</title><rect x="0.1053%" y="277" width="24.2807%" height="15" fill="rgb(250,79,13)" fg:x="3" fg:w="692"/><text x="0.3553%" y="287.50">publisher`std::sys::backtrace::__rust_b..</text></g><g><title>publisher`publisher::main (692 samples, 24.28%)</title><rect x="0.1053%" y="261" width="24.2807%" height="15" fill="rgb(211,146,34)" fg:x="3" fg:w="692"/><text x="0.3553%" y="271.50">publisher`publisher::main</text></g><g><title>publisher`publisher::main::_{{closure}} (692 samples, 24.28%)</title><rect x="0.1053%" y="245" width="24.2807%" height="15" fill="rgb(228,22,38)" fg:x="3" fg:w="692"/><text x="0.3553%" y="255.50">publisher`publisher::main::_{{closure}}</text></g><g><title>publisher`clap_builder::builder::command::Command::_do_parse (1 samples, 0.04%)</title><rect x="24.3509%" y="229" width="0.0351%" height="15" fill="rgb(235,168,5)" fg:x="694" fg:w="1"/><text x="24.6009%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.14%)</title><rect x="24.3860%" y="309" width="0.1404%" height="15" fill="rgb(221,155,16)" fg:x="695" fg:w="4"/><text x="24.6360%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.04%)</title><rect x="24.5263%" y="309" width="0.0351%" height="15" fill="rgb(215,215,53)" fg:x="699" fg:w="1"/><text x="24.7763%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.07%)</title><rect x="24.5614%" y="277" width="0.0702%" height="15" fill="rgb(223,4,10)" fg:x="700" fg:w="2"/><text x="24.8114%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="24.6316%" y="261" width="0.0351%" height="15" fill="rgb(234,103,6)" fg:x="702" fg:w="1"/><text x="24.8816%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1 samples, 0.04%)</title><rect x="24.6667%" y="261" width="0.0351%" height="15" fill="rgb(227,97,0)" fg:x="703" fg:w="1"/><text x="24.9167%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.04%)</title><rect x="24.6667%" y="245" width="0.0351%" height="15" fill="rgb(234,150,53)" fg:x="703" fg:w="1"/><text x="24.9167%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (3 samples, 0.11%)</title><rect x="24.6316%" y="277" width="0.1053%" height="15" fill="rgb(228,201,54)" fg:x="702" fg:w="3"/><text x="24.8816%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.04%)</title><rect x="24.7018%" y="261" width="0.0351%" height="15" fill="rgb(222,22,37)" fg:x="704" fg:w="1"/><text x="24.9518%" y="271.50"></text></g><g><title>publisher`parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.04%)</title><rect x="24.7368%" y="229" width="0.0351%" height="15" fill="rgb(237,53,32)" fg:x="705" fg:w="1"/><text x="24.9868%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.04%)</title><rect x="24.7368%" y="213" width="0.0351%" height="15" fill="rgb(233,25,53)" fg:x="705" fg:w="1"/><text x="24.9868%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (14 samples, 0.49%)</title><rect x="24.5614%" y="309" width="0.4912%" height="15" fill="rgb(210,40,34)" fg:x="700" fg:w="14"/><text x="24.8114%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (14 samples, 0.49%)</title><rect x="24.5614%" y="293" width="0.4912%" height="15" fill="rgb(241,220,44)" fg:x="700" fg:w="14"/><text x="24.8114%" y="303.50"></text></g><g><title>publisher`std::sys::pal::unix::thread::Thread::new::thread_start (9 samples, 0.32%)</title><rect x="24.7368%" y="277" width="0.3158%" height="15" fill="rgb(235,28,35)" fg:x="705" fg:w="9"/><text x="24.9868%" y="287.50"></text></g><g><title>publisher`core::ops::function::FnOnce::call_once{{vtable.shim}} (9 samples, 0.32%)</title><rect x="24.7368%" y="261" width="0.3158%" height="15" fill="rgb(210,56,17)" fg:x="705" fg:w="9"/><text x="24.9868%" y="271.50"></text></g><g><title>publisher`std::sys::backtrace::__rust_begin_short_backtrace (9 samples, 0.32%)</title><rect x="24.7368%" y="245" width="0.3158%" height="15" fill="rgb(224,130,29)" fg:x="705" fg:w="9"/><text x="24.9868%" y="255.50"></text></g><g><title>publisher`tokio::runtime::task::raw::poll (8 samples, 0.28%)</title><rect x="24.7719%" y="229" width="0.2807%" height="15" fill="rgb(235,212,8)" fg:x="706" fg:w="8"/><text x="25.0219%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (8 samples, 0.28%)</title><rect x="24.7719%" y="213" width="0.2807%" height="15" fill="rgb(223,33,50)" fg:x="706" fg:w="8"/><text x="25.0219%" y="223.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.04%)</title><rect x="25.0526%" y="277" width="0.0351%" height="15" fill="rgb(219,149,13)" fg:x="714" fg:w="1"/><text x="25.3026%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.11%)</title><rect x="25.0877%" y="261" width="0.1053%" height="15" fill="rgb(250,156,29)" fg:x="715" fg:w="3"/><text x="25.3377%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.42%)</title><rect x="25.1930%" y="245" width="0.4211%" height="15" fill="rgb(216,193,19)" fg:x="718" fg:w="12"/><text x="25.4430%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="25.6140%" y="245" width="0.0351%" height="15" fill="rgb(216,135,14)" fg:x="730" fg:w="1"/><text x="25.8640%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.11%)</title><rect x="25.6491%" y="245" width="0.1053%" height="15" fill="rgb(241,47,5)" fg:x="731" fg:w="3"/><text x="25.8991%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.11%)</title><rect x="25.6491%" y="229" width="0.1053%" height="15" fill="rgb(233,42,35)" fg:x="731" fg:w="3"/><text x="25.8991%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.11%)</title><rect x="25.6491%" y="213" width="0.1053%" height="15" fill="rgb(231,13,6)" fg:x="731" fg:w="3"/><text x="25.8991%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="25.7544%" y="245" width="0.0351%" height="15" fill="rgb(207,181,40)" fg:x="734" fg:w="1"/><text x="26.0044%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.04%)</title><rect x="26.0000%" y="197" width="0.0351%" height="15" fill="rgb(254,173,49)" fg:x="741" fg:w="1"/><text x="26.2500%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="26.0000%" y="181" width="0.0351%" height="15" fill="rgb(221,1,38)" fg:x="741" fg:w="1"/><text x="26.2500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (2 samples, 0.07%)</title><rect x="26.0351%" y="197" width="0.0702%" height="15" fill="rgb(206,124,46)" fg:x="742" fg:w="2"/><text x="26.2851%" y="207.50"></text></g><g><title>publisher`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (10 samples, 0.35%)</title><rect x="25.7895%" y="245" width="0.3509%" height="15" fill="rgb(249,21,11)" fg:x="735" fg:w="10"/><text x="26.0395%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.28%)</title><rect x="25.8596%" y="229" width="0.2807%" height="15" fill="rgb(222,201,40)" fg:x="737" fg:w="8"/><text x="26.1096%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.14%)</title><rect x="26.0000%" y="213" width="0.1404%" height="15" fill="rgb(235,61,29)" fg:x="741" fg:w="4"/><text x="26.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.04%)</title><rect x="26.1053%" y="197" width="0.0351%" height="15" fill="rgb(219,207,3)" fg:x="744" fg:w="1"/><text x="26.3553%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="26.1053%" y="181" width="0.0351%" height="15" fill="rgb(222,56,46)" fg:x="744" fg:w="1"/><text x="26.3553%" y="191.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 1.16%)</title><rect x="25.0526%" y="293" width="1.1579%" height="15" fill="rgb(239,76,54)" fg:x="714" fg:w="33"/><text x="25.3026%" y="303.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (32 samples, 1.12%)</title><rect x="25.0877%" y="277" width="1.1228%" height="15" fill="rgb(231,124,27)" fg:x="715" fg:w="32"/><text x="25.3377%" y="287.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 1.02%)</title><rect x="25.1930%" y="261" width="1.0175%" height="15" fill="rgb(249,195,6)" fg:x="718" fg:w="29"/><text x="25.4430%" y="271.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.07%)</title><rect x="26.1404%" y="245" width="0.0702%" height="15" fill="rgb(237,174,47)" fg:x="745" fg:w="2"/><text x="26.3904%" y="255.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="26.4561%" y="261" width="0.0702%" height="15" fill="rgb(206,201,31)" fg:x="754" fg:w="2"/><text x="26.7061%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.04%)</title><rect x="26.5263%" y="181" width="0.0351%" height="15" fill="rgb(231,57,52)" fg:x="756" fg:w="1"/><text x="26.7763%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.04%)</title><rect x="26.5263%" y="165" width="0.0351%" height="15" fill="rgb(248,177,22)" fg:x="756" fg:w="1"/><text x="26.7763%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.07%)</title><rect x="26.5263%" y="261" width="0.0702%" height="15" fill="rgb(215,211,37)" fg:x="756" fg:w="2"/><text x="26.7763%" y="271.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="26.5263%" y="245" width="0.0702%" height="15" fill="rgb(241,128,51)" fg:x="756" fg:w="2"/><text x="26.7763%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.07%)</title><rect x="26.5263%" y="229" width="0.0702%" height="15" fill="rgb(227,165,31)" fg:x="756" fg:w="2"/><text x="26.7763%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.07%)</title><rect x="26.5263%" y="213" width="0.0702%" height="15" fill="rgb(228,167,24)" fg:x="756" fg:w="2"/><text x="26.7763%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.07%)</title><rect x="26.5263%" y="197" width="0.0702%" height="15" fill="rgb(228,143,12)" fg:x="756" fg:w="2"/><text x="26.7763%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.04%)</title><rect x="26.5614%" y="181" width="0.0351%" height="15" fill="rgb(249,149,8)" fg:x="757" fg:w="1"/><text x="26.8114%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="26.5614%" y="165" width="0.0351%" height="15" fill="rgb(243,35,44)" fg:x="757" fg:w="1"/><text x="26.8114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="26.5965%" y="245" width="0.0702%" height="15" fill="rgb(246,89,9)" fg:x="758" fg:w="2"/><text x="26.8465%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="26.6667%" y="245" width="0.0702%" height="15" fill="rgb(233,213,13)" fg:x="760" fg:w="2"/><text x="26.9167%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.07%)</title><rect x="26.6667%" y="229" width="0.0702%" height="15" fill="rgb(233,141,41)" fg:x="760" fg:w="2"/><text x="26.9167%" y="239.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 1.23%)</title><rect x="26.8421%" y="229" width="1.2281%" height="15" fill="rgb(239,167,4)" fg:x="765" fg:w="35"/><text x="27.0921%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="28.0702%" y="149" width="0.0351%" height="15" fill="rgb(209,217,16)" fg:x="800" fg:w="1"/><text x="28.3202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="28.1053%" y="149" width="0.0351%" height="15" fill="rgb(219,88,35)" fg:x="801" fg:w="1"/><text x="28.3553%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.11%)</title><rect x="28.0702%" y="165" width="0.1053%" height="15" fill="rgb(220,193,23)" fg:x="800" fg:w="3"/><text x="28.3202%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="28.1404%" y="149" width="0.0351%" height="15" fill="rgb(230,90,52)" fg:x="802" fg:w="1"/><text x="28.3904%" y="159.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (46 samples, 1.61%)</title><rect x="26.5965%" y="261" width="1.6140%" height="15" fill="rgb(252,106,19)" fg:x="758" fg:w="46"/><text x="26.8465%" y="271.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (42 samples, 1.47%)</title><rect x="26.7368%" y="245" width="1.4737%" height="15" fill="rgb(206,74,20)" fg:x="762" fg:w="42"/><text x="26.9868%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.14%)</title><rect x="28.0702%" y="229" width="0.1404%" height="15" fill="rgb(230,138,44)" fg:x="800" fg:w="4"/><text x="28.3202%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (4 samples, 0.14%)</title><rect x="28.0702%" y="213" width="0.1404%" height="15" fill="rgb(235,182,43)" fg:x="800" fg:w="4"/><text x="28.3202%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.14%)</title><rect x="28.0702%" y="197" width="0.1404%" height="15" fill="rgb(242,16,51)" fg:x="800" fg:w="4"/><text x="28.3202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.14%)</title><rect x="28.0702%" y="181" width="0.1404%" height="15" fill="rgb(248,9,4)" fg:x="800" fg:w="4"/><text x="28.3202%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="28.1754%" y="165" width="0.0351%" height="15" fill="rgb(210,31,22)" fg:x="803" fg:w="1"/><text x="28.4254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="28.4211%" y="245" width="0.0702%" height="15" fill="rgb(239,54,39)" fg:x="810" fg:w="2"/><text x="28.6711%" y="255.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (9 samples, 0.32%)</title><rect x="28.2105%" y="261" width="0.3158%" height="15" fill="rgb(230,99,41)" fg:x="804" fg:w="9"/><text x="28.4605%" y="271.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.04%)</title><rect x="28.4912%" y="245" width="0.0351%" height="15" fill="rgb(253,106,12)" fg:x="812" fg:w="1"/><text x="28.7412%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="28.4912%" y="229" width="0.0351%" height="15" fill="rgb(213,46,41)" fg:x="812" fg:w="1"/><text x="28.7412%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="28.5263%" y="245" width="0.0702%" height="15" fill="rgb(215,133,35)" fg:x="813" fg:w="2"/><text x="28.7763%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="28.5614%" y="229" width="0.0351%" height="15" fill="rgb(213,28,5)" fg:x="814" fg:w="1"/><text x="28.8114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="28.5614%" y="213" width="0.0351%" height="15" fill="rgb(215,77,49)" fg:x="814" fg:w="1"/><text x="28.8114%" y="223.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.49%)</title><rect x="28.7018%" y="229" width="0.4912%" height="15" fill="rgb(248,100,22)" fg:x="818" fg:w="14"/><text x="28.9518%" y="239.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (21 samples, 0.74%)</title><rect x="28.5263%" y="261" width="0.7368%" height="15" fill="rgb(208,67,9)" fg:x="813" fg:w="21"/><text x="28.7763%" y="271.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (19 samples, 0.67%)</title><rect x="28.5965%" y="245" width="0.6667%" height="15" fill="rgb(219,133,21)" fg:x="815" fg:w="19"/><text x="28.8465%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="29.1930%" y="229" width="0.0702%" height="15" fill="rgb(246,46,29)" fg:x="832" fg:w="2"/><text x="29.4430%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="29.2281%" y="213" width="0.0351%" height="15" fill="rgb(246,185,52)" fg:x="833" fg:w="1"/><text x="29.4781%" y="223.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (88 samples, 3.09%)</title><rect x="26.2105%" y="277" width="3.0877%" height="15" fill="rgb(252,136,11)" fg:x="747" fg:w="88"/><text x="26.4605%" y="287.50">pub..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.04%)</title><rect x="29.2632%" y="261" width="0.0351%" height="15" fill="rgb(219,138,53)" fg:x="834" fg:w="1"/><text x="29.5132%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="29.2982%" y="261" width="0.0351%" height="15" fill="rgb(211,51,23)" fg:x="835" fg:w="1"/><text x="29.5482%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="29.3333%" y="261" width="0.0351%" height="15" fill="rgb(247,221,28)" fg:x="836" fg:w="1"/><text x="29.5833%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.04%)</title><rect x="29.3333%" y="245" width="0.0351%" height="15" fill="rgb(251,222,45)" fg:x="836" fg:w="1"/><text x="29.5833%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.04%)</title><rect x="29.3333%" y="229" width="0.0351%" height="15" fill="rgb(217,162,53)" fg:x="836" fg:w="1"/><text x="29.5833%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.04%)</title><rect x="29.3333%" y="213" width="0.0351%" height="15" fill="rgb(229,93,14)" fg:x="836" fg:w="1"/><text x="29.5833%" y="223.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::list::List&lt;ethereum_consensus::phase0::validator::Validator,1099511627776_usize&gt;&gt; (5 samples, 0.18%)</title><rect x="29.2982%" y="277" width="0.1754%" height="15" fill="rgb(209,67,49)" fg:x="835" fg:w="5"/><text x="29.5482%" y="287.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ethereum_consensus::phase0::validator::Validator&gt; (3 samples, 0.11%)</title><rect x="29.3684%" y="261" width="0.1053%" height="15" fill="rgb(213,87,29)" fg:x="837" fg:w="3"/><text x="29.6184%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="29.4035%" y="245" width="0.0702%" height="15" fill="rgb(205,151,52)" fg:x="838" fg:w="2"/><text x="29.6535%" y="255.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::vector::Vector&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;32_usize&gt;,65536_usize&gt;&gt; (1 samples, 0.04%)</title><rect x="29.4737%" y="277" width="0.0351%" height="15" fill="rgb(253,215,39)" fg:x="840" fg:w="1"/><text x="29.7237%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="29.4737%" y="261" width="0.0351%" height="15" fill="rgb(221,220,41)" fg:x="840" fg:w="1"/><text x="29.7237%" y="271.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;::deserialize_any (95 samples, 3.33%)</title><rect x="26.2105%" y="293" width="3.3333%" height="15" fill="rgb(218,133,21)" fg:x="747" fg:w="95"/><text x="26.4605%" y="303.50">pub..</text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (1 samples, 0.04%)</title><rect x="29.5088%" y="277" width="0.0351%" height="15" fill="rgb(221,193,43)" fg:x="841" fg:w="1"/><text x="29.7588%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="29.7895%" y="261" width="0.0351%" height="15" fill="rgb(240,128,52)" fg:x="849" fg:w="1"/><text x="30.0395%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="29.8246%" y="261" width="0.0351%" height="15" fill="rgb(253,114,12)" fg:x="850" fg:w="1"/><text x="30.0746%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="29.8596%" y="261" width="0.0351%" height="15" fill="rgb(215,223,47)" fg:x="851" fg:w="1"/><text x="30.1096%" y="271.50"></text></g><g><title>publisher`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="29.8947%" y="261" width="0.0351%" height="15" fill="rgb(248,225,23)" fg:x="852" fg:w="1"/><text x="30.1447%" y="271.50"></text></g><g><title>publisher`&lt;ssz_rs::bitlist::Bitlist&lt;_&gt; as serde::de::Deserialize&gt;::deserialize (1 samples, 0.04%)</title><rect x="29.9298%" y="261" width="0.0351%" height="15" fill="rgb(250,108,0)" fg:x="853" fg:w="1"/><text x="30.1798%" y="271.50"></text></g><g><title>publisher`&lt;ssz_rs::bitlist::Bitlist&lt;_&gt; as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (1 samples, 0.04%)</title><rect x="29.9298%" y="245" width="0.0351%" height="15" fill="rgb(228,208,7)" fg:x="853" fg:w="1"/><text x="30.1798%" y="255.50"></text></g><g><title>publisher`DYLD-STUB$$free (1 samples, 0.04%)</title><rect x="29.9649%" y="261" width="0.0351%" height="15" fill="rgb(244,45,10)" fg:x="854" fg:w="1"/><text x="30.2149%" y="271.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.04%)</title><rect x="30.0000%" y="261" width="0.0351%" height="15" fill="rgb(207,125,25)" fg:x="855" fg:w="1"/><text x="30.2500%" y="271.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="30.0000%" y="245" width="0.0351%" height="15" fill="rgb(210,195,18)" fg:x="855" fg:w="1"/><text x="30.2500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="30.0000%" y="229" width="0.0351%" height="15" fill="rgb(249,80,12)" fg:x="855" fg:w="1"/><text x="30.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="30.0000%" y="213" width="0.0351%" height="15" fill="rgb(221,65,9)" fg:x="855" fg:w="1"/><text x="30.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.04%)</title><rect x="30.0000%" y="197" width="0.0351%" height="15" fill="rgb(235,49,36)" fg:x="855" fg:w="1"/><text x="30.2500%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.04%)</title><rect x="30.0000%" y="181" width="0.0351%" height="15" fill="rgb(225,32,20)" fg:x="855" fg:w="1"/><text x="30.2500%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.04%)</title><rect x="30.0000%" y="165" width="0.0351%" height="15" fill="rgb(215,141,46)" fg:x="855" fg:w="1"/><text x="30.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="30.0351%" y="245" width="0.0702%" height="15" fill="rgb(250,160,47)" fg:x="856" fg:w="2"/><text x="30.2851%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="30.1053%" y="245" width="0.0351%" height="15" fill="rgb(216,222,40)" fg:x="858" fg:w="1"/><text x="30.3553%" y="255.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 1.37%)</title><rect x="30.3860%" y="229" width="1.3684%" height="15" fill="rgb(234,217,39)" fg:x="866" fg:w="39"/><text x="30.6360%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="31.7544%" y="165" width="0.0702%" height="15" fill="rgb(207,178,40)" fg:x="905" fg:w="2"/><text x="32.0044%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="31.8947%" y="149" width="0.0351%" height="15" fill="rgb(221,136,13)" fg:x="909" fg:w="1"/><text x="32.1447%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.14%)</title><rect x="31.8246%" y="165" width="0.1404%" height="15" fill="rgb(249,199,10)" fg:x="907" fg:w="4"/><text x="32.0746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="31.9298%" y="149" width="0.0351%" height="15" fill="rgb(249,222,13)" fg:x="910" fg:w="1"/><text x="32.1798%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 0.28%)</title><rect x="31.7544%" y="181" width="0.2807%" height="15" fill="rgb(244,185,38)" fg:x="905" fg:w="8"/><text x="32.0044%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.07%)</title><rect x="31.9649%" y="165" width="0.0702%" height="15" fill="rgb(236,202,9)" fg:x="911" fg:w="2"/><text x="32.2149%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::crypto::bls::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::crypto::bls::PublicKey&gt;::deserialize (58 samples, 2.04%)</title><rect x="30.0351%" y="261" width="2.0351%" height="15" fill="rgb(250,229,37)" fg:x="856" fg:w="58"/><text x="30.2851%" y="271.50">p..</text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (55 samples, 1.93%)</title><rect x="30.1404%" y="245" width="1.9298%" height="15" fill="rgb(206,174,23)" fg:x="859" fg:w="55"/><text x="30.3904%" y="255.50">p..</text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.32%)</title><rect x="31.7544%" y="229" width="0.3158%" height="15" fill="rgb(211,33,43)" fg:x="905" fg:w="9"/><text x="32.0044%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (9 samples, 0.32%)</title><rect x="31.7544%" y="213" width="0.3158%" height="15" fill="rgb(245,58,50)" fg:x="905" fg:w="9"/><text x="32.0044%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (9 samples, 0.32%)</title><rect x="31.7544%" y="197" width="0.3158%" height="15" fill="rgb(244,68,36)" fg:x="905" fg:w="9"/><text x="32.0044%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="32.0351%" y="181" width="0.0351%" height="15" fill="rgb(232,229,15)" fg:x="913" fg:w="1"/><text x="32.2851%" y="191.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::phase0::operations::AttestationData&gt;::deserialize (1 samples, 0.04%)</title><rect x="32.0702%" y="261" width="0.0351%" height="15" fill="rgb(254,30,23)" fg:x="914" fg:w="1"/><text x="32.3202%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="32.0702%" y="245" width="0.0351%" height="15" fill="rgb(235,160,14)" fg:x="914" fg:w="1"/><text x="32.3202%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="32.2456%" y="245" width="0.0702%" height="15" fill="rgb(212,155,44)" fg:x="919" fg:w="2"/><text x="32.4956%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.18%)</title><rect x="32.3158%" y="245" width="0.1754%" height="15" fill="rgb(226,2,50)" fg:x="921" fg:w="5"/><text x="32.5658%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.07%)</title><rect x="32.4912%" y="245" width="0.0702%" height="15" fill="rgb(234,177,6)" fg:x="926" fg:w="2"/><text x="32.7412%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="32.5614%" y="245" width="0.0351%" height="15" fill="rgb(217,24,9)" fg:x="928" fg:w="1"/><text x="32.8114%" y="255.50"></text></g><g><title>publisher`ethereum_consensus::serde::as_str::deserialize (15 samples, 0.53%)</title><rect x="32.1053%" y="261" width="0.5263%" height="15" fill="rgb(220,13,46)" fg:x="915" fg:w="15"/><text x="32.3553%" y="271.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.04%)</title><rect x="32.5965%" y="245" width="0.0351%" height="15" fill="rgb(239,221,27)" fg:x="929" fg:w="1"/><text x="32.8465%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="32.5965%" y="229" width="0.0351%" height="15" fill="rgb(222,198,25)" fg:x="929" fg:w="1"/><text x="32.8465%" y="239.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (1 samples, 0.04%)</title><rect x="32.6316%" y="261" width="0.0351%" height="15" fill="rgb(211,99,13)" fg:x="930" fg:w="1"/><text x="32.8816%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.04%)</title><rect x="32.6667%" y="245" width="0.0351%" height="15" fill="rgb(232,111,31)" fg:x="931" fg:w="1"/><text x="32.9167%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="32.7018%" y="245" width="0.0351%" height="15" fill="rgb(245,82,37)" fg:x="932" fg:w="1"/><text x="32.9518%" y="255.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.81%)</title><rect x="32.7368%" y="229" width="0.8070%" height="15" fill="rgb(227,149,46)" fg:x="933" fg:w="23"/><text x="32.9868%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.07%)</title><rect x="33.5439%" y="181" width="0.0702%" height="15" fill="rgb(218,36,50)" fg:x="956" fg:w="2"/><text x="33.7939%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.11%)</title><rect x="33.5439%" y="229" width="0.1053%" height="15" fill="rgb(226,80,48)" fg:x="956" fg:w="3"/><text x="33.7939%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="33.5439%" y="213" width="0.1053%" height="15" fill="rgb(238,224,15)" fg:x="956" fg:w="3"/><text x="33.7939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.11%)</title><rect x="33.5439%" y="197" width="0.1053%" height="15" fill="rgb(241,136,10)" fg:x="956" fg:w="3"/><text x="33.7939%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="33.6140%" y="181" width="0.0351%" height="15" fill="rgb(208,32,45)" fg:x="958" fg:w="1"/><text x="33.8640%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::list::List&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (118 samples, 4.14%)</title><rect x="29.5439%" y="277" width="4.1404%" height="15" fill="rgb(207,135,9)" fg:x="842" fg:w="118"/><text x="29.7939%" y="287.50">publi..</text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (29 samples, 1.02%)</title><rect x="32.6667%" y="261" width="1.0175%" height="15" fill="rgb(206,86,44)" fg:x="931" fg:w="29"/><text x="32.9167%" y="271.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (27 samples, 0.95%)</title><rect x="32.7368%" y="245" width="0.9474%" height="15" fill="rgb(245,177,15)" fg:x="933" fg:w="27"/><text x="32.9868%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="33.6491%" y="229" width="0.0351%" height="15" fill="rgb(206,64,50)" fg:x="959" fg:w="1"/><text x="33.8991%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="33.6842%" y="245" width="0.0351%" height="15" fill="rgb(234,36,40)" fg:x="960" fg:w="1"/><text x="33.9342%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="33.6842%" y="229" width="0.0351%" height="15" fill="rgb(213,64,8)" fg:x="960" fg:w="1"/><text x="33.9342%" y="239.50"></text></g><g><title>publisher`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.35%)</title><rect x="33.7544%" y="229" width="0.3509%" height="15" fill="rgb(210,75,36)" fg:x="962" fg:w="10"/><text x="34.0044%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="34.1404%" y="165" width="0.0351%" height="15" fill="rgb(229,88,21)" fg:x="973" fg:w="1"/><text x="34.3904%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::serde::try_bytes_from_hex_str (14 samples, 0.49%)</title><rect x="33.7193%" y="245" width="0.4912%" height="15" fill="rgb(252,204,47)" fg:x="961" fg:w="14"/><text x="33.9693%" y="255.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.11%)</title><rect x="34.1053%" y="229" width="0.1053%" height="15" fill="rgb(208,77,27)" fg:x="972" fg:w="3"/><text x="34.3553%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="34.1053%" y="213" width="0.1053%" height="15" fill="rgb(221,76,26)" fg:x="972" fg:w="3"/><text x="34.3553%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.07%)</title><rect x="34.1404%" y="197" width="0.0702%" height="15" fill="rgb(225,139,18)" fg:x="973" fg:w="2"/><text x="34.3904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.07%)</title><rect x="34.1404%" y="181" width="0.0702%" height="15" fill="rgb(230,137,11)" fg:x="973" fg:w="2"/><text x="34.3904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="34.1754%" y="165" width="0.0351%" height="15" fill="rgb(212,28,1)" fg:x="974" fg:w="1"/><text x="34.4254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="34.1754%" y="149" width="0.0351%" height="15" fill="rgb(248,164,17)" fg:x="974" fg:w="1"/><text x="34.4254%" y="159.50"></text></g><g><title>publisher`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (262 samples, 9.19%)</title><rect x="25.0526%" y="309" width="9.1930%" height="15" fill="rgb(222,171,42)" fg:x="714" fg:w="262"/><text x="25.3026%" y="319.50">publisher`&lt;se..</text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_struct (134 samples, 4.70%)</title><rect x="29.5439%" y="293" width="4.7018%" height="15" fill="rgb(243,84,45)" fg:x="842" fg:w="134"/><text x="29.7939%" y="303.50">publi..</text></g><g><title>publisher`&lt;ssz_rs::vector::Vector&lt;T,_&gt; as serde::de::Deserialize&gt;::deserialize (16 samples, 0.56%)</title><rect x="33.6842%" y="277" width="0.5614%" height="15" fill="rgb(252,49,23)" fg:x="960" fg:w="16"/><text x="33.9342%" y="287.50"></text></g><g><title>publisher`ethereum_consensus::ssz::byte_vector::_::_&lt;impl serde::de::Deserialize for ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt;&gt;::deserialize (16 samples, 0.56%)</title><rect x="33.6842%" y="261" width="0.5614%" height="15" fill="rgb(215,19,7)" fg:x="960" fg:w="16"/><text x="33.9342%" y="271.50"></text></g><g><title>publisher`serde_json::value::de::_&lt;impl serde::de::Deserializer for &amp;serde_json::value::Value&gt;::deserialize_string (1 samples, 0.04%)</title><rect x="34.2105%" y="245" width="0.0351%" height="15" fill="rgb(238,81,41)" fg:x="975" fg:w="1"/><text x="34.4605%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="34.2456%" y="245" width="0.0351%" height="15" fill="rgb(210,199,37)" fg:x="976" fg:w="1"/><text x="34.4956%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.07%)</title><rect x="34.2807%" y="245" width="0.0702%" height="15" fill="rgb(244,192,49)" fg:x="977" fg:w="2"/><text x="34.5307%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.07%)</title><rect x="34.2807%" y="229" width="0.0702%" height="15" fill="rgb(226,211,11)" fg:x="977" fg:w="2"/><text x="34.5307%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.04%)</title><rect x="34.3509%" y="245" width="0.0351%" height="15" fill="rgb(236,162,54)" fg:x="979" fg:w="1"/><text x="34.6009%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.07%)</title><rect x="34.5614%" y="197" width="0.0702%" height="15" fill="rgb(220,229,9)" fg:x="985" fg:w="2"/><text x="34.8114%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.07%)</title><rect x="34.5614%" y="181" width="0.0702%" height="15" fill="rgb(250,87,22)" fg:x="985" fg:w="2"/><text x="34.8114%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.28%)</title><rect x="34.3860%" y="229" width="0.2807%" height="15" fill="rgb(239,43,17)" fg:x="980" fg:w="8"/><text x="34.6360%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.18%)</title><rect x="34.4912%" y="213" width="0.1754%" height="15" fill="rgb(231,177,25)" fg:x="983" fg:w="5"/><text x="34.7412%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.04%)</title><rect x="34.6316%" y="197" width="0.0351%" height="15" fill="rgb(219,179,1)" fg:x="987" fg:w="1"/><text x="34.8816%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="34.6316%" y="181" width="0.0351%" height="15" fill="rgb(238,219,53)" fg:x="987" fg:w="1"/><text x="34.8816%" y="191.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::get_state::_{{closure}} (13 samples, 0.46%)</title><rect x="34.2456%" y="309" width="0.4561%" height="15" fill="rgb(232,167,36)" fg:x="976" fg:w="13"/><text x="34.4956%" y="319.50"></text></g><g><title>publisher`serde_json::de::from_slice (13 samples, 0.46%)</title><rect x="34.2456%" y="293" width="0.4561%" height="15" fill="rgb(244,19,51)" fg:x="976" fg:w="13"/><text x="34.4956%" y="303.50"></text></g><g><title>publisher`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.46%)</title><rect x="34.2456%" y="277" width="0.4561%" height="15" fill="rgb(224,6,22)" fg:x="976" fg:w="13"/><text x="34.4956%" y="287.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (13 samples, 0.46%)</title><rect x="34.2456%" y="261" width="0.4561%" height="15" fill="rgb(224,145,5)" fg:x="976" fg:w="13"/><text x="34.4956%" y="271.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (9 samples, 0.32%)</title><rect x="34.3860%" y="245" width="0.3158%" height="15" fill="rgb(234,130,49)" fg:x="980" fg:w="9"/><text x="34.6360%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="34.6667%" y="229" width="0.0351%" height="15" fill="rgb(254,6,2)" fg:x="988" fg:w="1"/><text x="34.9167%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="34.7018%" y="293" width="0.0351%" height="15" fill="rgb(208,96,46)" fg:x="989" fg:w="1"/><text x="34.9518%" y="303.50"></text></g><g><title>publisher`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.04%)</title><rect x="34.7368%" y="277" width="0.0351%" height="15" fill="rgb(239,3,39)" fg:x="990" fg:w="1"/><text x="34.9868%" y="287.50"></text></g><g><title>publisher`once_cell::imp::initialize_or_wait (1 samples, 0.04%)</title><rect x="34.7368%" y="261" width="0.0351%" height="15" fill="rgb(233,210,1)" fg:x="990" fg:w="1"/><text x="34.9868%" y="271.50"></text></g><g><title>publisher`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.04%)</title><rect x="34.7368%" y="245" width="0.0351%" height="15" fill="rgb(244,137,37)" fg:x="990" fg:w="1"/><text x="34.9868%" y="255.50"></text></g><g><title>publisher`core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="34.7368%" y="229" width="0.0351%" height="15" fill="rgb(240,136,2)" fg:x="990" fg:w="1"/><text x="34.9868%" y="239.50"></text></g><g><title>publisher`regex::builders::string::RegexBuilder::build (1 samples, 0.04%)</title><rect x="34.7368%" y="213" width="0.0351%" height="15" fill="rgb(239,18,37)" fg:x="990" fg:w="1"/><text x="34.9868%" y="223.50"></text></g><g><title>publisher`regex_automata::meta::regex::Builder::build (1 samples, 0.04%)</title><rect x="34.7368%" y="197" width="0.0351%" height="15" fill="rgb(218,185,22)" fg:x="990" fg:w="1"/><text x="34.9868%" y="207.50"></text></g><g><title>publisher`regex_automata::meta::strategy::new (1 samples, 0.04%)</title><rect x="34.7368%" y="181" width="0.0351%" height="15" fill="rgb(225,218,4)" fg:x="990" fg:w="1"/><text x="34.9868%" y="191.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.04%)</title><rect x="34.7368%" y="165" width="0.0351%" height="15" fill="rgb(230,182,32)" fg:x="990" fg:w="1"/><text x="34.9868%" y="175.50"></text></g><g><title>publisher`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="34.7368%" y="149" width="0.0351%" height="15" fill="rgb(242,56,43)" fg:x="990" fg:w="1"/><text x="34.9868%" y="159.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.04%)</title><rect x="34.7368%" y="133" width="0.0351%" height="15" fill="rgb(233,99,24)" fg:x="990" fg:w="1"/><text x="34.9868%" y="143.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.04%)</title><rect x="34.7368%" y="117" width="0.0351%" height="15" fill="rgb(234,209,42)" fg:x="990" fg:w="1"/><text x="34.9868%" y="127.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.04%)</title><rect x="34.7368%" y="101" width="0.0351%" height="15" fill="rgb(227,7,12)" fg:x="990" fg:w="1"/><text x="34.9868%" y="111.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.04%)</title><rect x="34.7368%" y="85" width="0.0351%" height="15" fill="rgb(245,203,43)" fg:x="990" fg:w="1"/><text x="34.9868%" y="95.50"></text></g><g><title>publisher`regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1 samples, 0.04%)</title><rect x="34.7368%" y="69" width="0.0351%" height="15" fill="rgb(238,205,33)" fg:x="990" fg:w="1"/><text x="34.9868%" y="79.50"></text></g><g><title>publisher`DYLD-STUB$$memcpy (1 samples, 0.04%)</title><rect x="34.7368%" y="53" width="0.0351%" height="15" fill="rgb(231,56,7)" fg:x="990" fg:w="1"/><text x="34.9868%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.04%)</title><rect x="34.7719%" y="261" width="0.0351%" height="15" fill="rgb(244,186,29)" fg:x="991" fg:w="1"/><text x="35.0219%" y="271.50"></text></g><g><title>publisher`&lt;risc0_zkvm::host::api::ParentProcessConnector as risc0_zkvm::host::api::Connector&gt;::connect (1 samples, 0.04%)</title><rect x="34.8070%" y="261" width="0.0351%" height="15" fill="rgb(234,111,31)" fg:x="992" fg:w="1"/><text x="35.0570%" y="271.50"></text></g><g><title>publisher`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.04%)</title><rect x="34.8070%" y="245" width="0.0351%" height="15" fill="rgb(241,149,10)" fg:x="992" fg:w="1"/><text x="35.0570%" y="255.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.04%)</title><rect x="34.8070%" y="229" width="0.0351%" height="15" fill="rgb(249,206,44)" fg:x="992" fg:w="1"/><text x="35.0570%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.04%)</title><rect x="34.8070%" y="213" width="0.0351%" height="15" fill="rgb(251,153,30)" fg:x="992" fg:w="1"/><text x="35.0570%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="34.8421%" y="197" width="0.0351%" height="15" fill="rgb(239,152,38)" fg:x="993" fg:w="1"/><text x="35.0921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.04%)</title><rect x="34.8421%" y="181" width="0.0351%" height="15" fill="rgb(249,139,47)" fg:x="993" fg:w="1"/><text x="35.0921%" y="191.50"></text></g><g><title>publisher`prost::encoding::message::merge (3 samples, 0.11%)</title><rect x="34.8421%" y="261" width="0.1053%" height="15" fill="rgb(244,64,35)" fg:x="993" fg:w="3"/><text x="35.0921%" y="271.50"></text></g><g><title>publisher`prost::encoding::message::merge (3 samples, 0.11%)</title><rect x="34.8421%" y="245" width="0.1053%" height="15" fill="rgb(216,46,15)" fg:x="993" fg:w="3"/><text x="35.0921%" y="255.50"></text></g><g><title>publisher`prost::encoding::message::merge (3 samples, 0.11%)</title><rect x="34.8421%" y="229" width="0.1053%" height="15" fill="rgb(250,74,19)" fg:x="993" fg:w="3"/><text x="35.0921%" y="239.50"></text></g><g><title>publisher`prost::encoding::bytes::merge (3 samples, 0.11%)</title><rect x="34.8421%" y="213" width="0.1053%" height="15" fill="rgb(249,42,33)" fg:x="993" fg:w="3"/><text x="35.0921%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.07%)</title><rect x="34.8772%" y="197" width="0.0702%" height="15" fill="rgb(242,149,17)" fg:x="994" fg:w="2"/><text x="35.1272%" y="207.50"></text></g><g><title>publisher`prost::message::Message::decode (1 samples, 0.04%)</title><rect x="34.9474%" y="261" width="0.0351%" height="15" fill="rgb(244,29,21)" fg:x="996" fg:w="1"/><text x="35.1974%" y="271.50"></text></g><g><title>publisher`prost::encoding::message::merge (1 samples, 0.04%)</title><rect x="34.9474%" y="245" width="0.0351%" height="15" fill="rgb(220,130,37)" fg:x="996" fg:w="1"/><text x="35.1974%" y="255.50"></text></g><g><title>publisher`prost::encoding::bytes::merge (1 samples, 0.04%)</title><rect x="34.9474%" y="229" width="0.0351%" height="15" fill="rgb(211,67,2)" fg:x="996" fg:w="1"/><text x="35.1974%" y="239.50"></text></g><g><title>publisher`bytes::bytes::shallow_clone_vec (1 samples, 0.04%)</title><rect x="34.9474%" y="213" width="0.0351%" height="15" fill="rgb(235,68,52)" fg:x="996" fg:w="1"/><text x="35.1974%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="34.9474%" y="197" width="0.0351%" height="15" fill="rgb(246,142,3)" fg:x="996" fg:w="1"/><text x="35.1974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="34.9474%" y="181" width="0.0351%" height="15" fill="rgb(241,25,7)" fg:x="996" fg:w="1"/><text x="35.1974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="34.9474%" y="165" width="0.0351%" height="15" fill="rgb(242,119,39)" fg:x="996" fg:w="1"/><text x="35.1974%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="34.9474%" y="149" width="0.0351%" height="15" fill="rgb(241,98,45)" fg:x="996" fg:w="1"/><text x="35.1974%" y="159.50"></text></g><g><title>publisher`risc0_zkvm::host::api::client::Client::execute (7 samples, 0.25%)</title><rect x="34.7719%" y="277" width="0.2456%" height="15" fill="rgb(254,28,30)" fg:x="991" fg:w="7"/><text x="35.0219%" y="287.50"></text></g><g><title>publisher`std::io::default_read_exact (1 samples, 0.04%)</title><rect x="34.9825%" y="261" width="0.0351%" height="15" fill="rgb(241,142,54)" fg:x="997" fg:w="1"/><text x="35.2325%" y="271.50"></text></g><g><title>publisher`&lt;risc0_zkvm::host::client::prove::external::ExternalProver as risc0_zkvm::host::client::prove::Executor&gt;::execute (9 samples, 0.32%)</title><rect x="34.7368%" y="293" width="0.3158%" height="15" fill="rgb(222,85,15)" fg:x="990" fg:w="9"/><text x="34.9868%" y="303.50"></text></g><g><title>publisher`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.04%)</title><rect x="35.0175%" y="277" width="0.0351%" height="15" fill="rgb(210,85,47)" fg:x="998" fg:w="1"/><text x="35.2675%" y="287.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.04%)</title><rect x="35.0175%" y="261" width="0.0351%" height="15" fill="rgb(224,206,25)" fg:x="998" fg:w="1"/><text x="35.2675%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.04%)</title><rect x="35.0175%" y="245" width="0.0351%" height="15" fill="rgb(243,201,19)" fg:x="998" fg:w="1"/><text x="35.2675%" y="255.50"></text></g><g><title>publisher`apps::beacon_client::BeaconClient::get_state::_{{closure}} (1 samples, 0.04%)</title><rect x="35.0526%" y="293" width="0.0351%" height="15" fill="rgb(236,59,4)" fg:x="999" fg:w="1"/><text x="35.3026%" y="303.50"></text></g><g><title>publisher`bytes::bytes::shared_drop (1 samples, 0.04%)</title><rect x="35.0526%" y="277" width="0.0351%" height="15" fill="rgb(254,179,45)" fg:x="999" fg:w="1"/><text x="35.3026%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="35.0526%" y="261" width="0.0351%" height="15" fill="rgb(226,14,10)" fg:x="999" fg:w="1"/><text x="35.3026%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="35.0526%" y="245" width="0.0351%" height="15" fill="rgb(244,27,41)" fg:x="999" fg:w="1"/><text x="35.3026%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.04%)</title><rect x="35.0877%" y="245" width="0.0351%" height="15" fill="rgb(235,35,32)" fg:x="1000" fg:w="1"/><text x="35.3377%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="35.1228%" y="245" width="0.0702%" height="15" fill="rgb(218,68,31)" fg:x="1001" fg:w="2"/><text x="35.3728%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.04%)</title><rect x="35.1930%" y="245" width="0.0351%" height="15" fill="rgb(207,120,37)" fg:x="1003" fg:w="1"/><text x="35.4430%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.04%)</title><rect x="35.1930%" y="229" width="0.0351%" height="15" fill="rgb(227,98,0)" fg:x="1003" fg:w="1"/><text x="35.4430%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="35.1930%" y="213" width="0.0351%" height="15" fill="rgb(207,7,3)" fg:x="1003" fg:w="1"/><text x="35.4430%" y="223.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::list::List&lt;ethereum_consensus::phase0::validator::Validator,1099511627776_usize&gt;&gt; (7 samples, 0.25%)</title><rect x="35.0877%" y="277" width="0.2456%" height="15" fill="rgb(206,98,19)" fg:x="1000" fg:w="7"/><text x="35.3377%" y="287.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ethereum_consensus::phase0::validator::Validator&gt; (7 samples, 0.25%)</title><rect x="35.0877%" y="261" width="0.2456%" height="15" fill="rgb(217,5,26)" fg:x="1000" fg:w="7"/><text x="35.3377%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.11%)</title><rect x="35.2281%" y="245" width="0.1053%" height="15" fill="rgb(235,190,38)" fg:x="1004" fg:w="3"/><text x="35.4781%" y="255.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ethereum_consensus::types::beacon_state::BeaconState&lt;8192_usize,16777216_usize,2048_usize,1099511627776_usize,65536_usize,8192_usize,2048_usize,4096_usize,512_usize,256_usize,32_usize&gt;&gt; (9 samples, 0.32%)</title><rect x="35.0877%" y="293" width="0.3158%" height="15" fill="rgb(247,86,24)" fg:x="1000" fg:w="9"/><text x="35.3377%" y="303.50"></text></g><g><title>publisher`core::ptr::drop_in_place&lt;ssz_rs::vector::Vector&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;32_usize&gt;,65536_usize&gt;&gt; (2 samples, 0.07%)</title><rect x="35.3333%" y="277" width="0.0702%" height="15" fill="rgb(205,101,16)" fg:x="1007" fg:w="2"/><text x="35.5833%" y="287.50"></text></g><g><title>publisher`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="35.3333%" y="261" width="0.0702%" height="15" fill="rgb(246,168,33)" fg:x="1007" fg:w="2"/><text x="35.5833%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.07%)</title><rect x="35.3333%" y="245" width="0.0702%" height="15" fill="rgb(231,114,1)" fg:x="1007" fg:w="2"/><text x="35.5833%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.07%)</title><rect x="35.3333%" y="229" width="0.0702%" height="15" fill="rgb(207,184,53)" fg:x="1007" fg:w="2"/><text x="35.5833%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.07%)</title><rect x="35.3333%" y="213" width="0.0702%" height="15" fill="rgb(224,95,51)" fg:x="1007" fg:w="2"/><text x="35.5833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.07%)</title><rect x="35.4386%" y="213" width="0.0702%" height="15" fill="rgb(212,188,45)" fg:x="1010" fg:w="2"/><text x="35.6886%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.14%)</title><rect x="35.5088%" y="213" width="0.1404%" height="15" fill="rgb(223,154,38)" fg:x="1012" fg:w="4"/><text x="35.7588%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (1 samples, 0.04%)</title><rect x="35.6491%" y="197" width="0.0351%" height="15" fill="rgb(251,22,52)" fg:x="1016" fg:w="1"/><text x="35.8991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="35.6491%" y="181" width="0.0351%" height="15" fill="rgb(229,209,22)" fg:x="1016" fg:w="1"/><text x="35.8991%" y="191.50"></text></g><g><title>publisher`ethereum_consensus::phase0::operations::PendingAttestation&lt;_&gt;::assemble_chunks (2 samples, 0.07%)</title><rect x="35.6491%" y="213" width="0.0702%" height="15" fill="rgb(234,138,34)" fg:x="1016" fg:w="2"/><text x="35.8991%" y="223.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::mix_in_length (1 samples, 0.04%)</title><rect x="35.6842%" y="197" width="0.0351%" height="15" fill="rgb(212,95,11)" fg:x="1017" fg:w="1"/><text x="35.9342%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="35.6842%" y="181" width="0.0351%" height="15" fill="rgb(240,179,47)" fg:x="1017" fg:w="1"/><text x="35.9342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.18%)</title><rect x="35.7193%" y="197" width="0.1754%" height="15" fill="rgb(240,163,11)" fg:x="1018" fg:w="5"/><text x="35.9693%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="35.8947%" y="197" width="0.0351%" height="15" fill="rgb(236,37,12)" fg:x="1023" fg:w="1"/><text x="36.1447%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.07%)</title><rect x="35.9298%" y="197" width="0.0702%" height="15" fill="rgb(232,164,16)" fg:x="1024" fg:w="2"/><text x="36.1798%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.11%)</title><rect x="36.0000%" y="181" width="0.1053%" height="15" fill="rgb(244,205,15)" fg:x="1026" fg:w="3"/><text x="36.2500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="36.1053%" y="181" width="0.0351%" height="15" fill="rgb(223,117,47)" fg:x="1029" fg:w="1"/><text x="36.3553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="36.1404%" y="181" width="0.0351%" height="15" fill="rgb(244,107,35)" fg:x="1030" fg:w="1"/><text x="36.3904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="36.2105%" y="165" width="0.0702%" height="15" fill="rgb(205,140,8)" fg:x="1032" fg:w="2"/><text x="36.4605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="36.2807%" y="165" width="0.0702%" height="15" fill="rgb(228,84,46)" fg:x="1034" fg:w="2"/><text x="36.5307%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="36.3509%" y="165" width="0.0351%" height="15" fill="rgb(254,188,9)" fg:x="1036" fg:w="1"/><text x="36.6009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="36.4561%" y="149" width="0.0702%" height="15" fill="rgb(206,112,54)" fg:x="1039" fg:w="2"/><text x="36.7061%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (10 samples, 0.35%)</title><rect x="36.5263%" y="149" width="0.3509%" height="15" fill="rgb(216,84,49)" fg:x="1041" fg:w="10"/><text x="36.7763%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.21%)</title><rect x="36.6667%" y="133" width="0.2105%" height="15" fill="rgb(214,194,35)" fg:x="1045" fg:w="6"/><text x="36.9167%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.18%)</title><rect x="36.7018%" y="117" width="0.1754%" height="15" fill="rgb(249,28,3)" fg:x="1046" fg:w="5"/><text x="36.9518%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.07%)</title><rect x="36.8772%" y="149" width="0.0702%" height="15" fill="rgb(222,56,52)" fg:x="1051" fg:w="2"/><text x="37.1272%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (23 samples, 0.81%)</title><rect x="36.1754%" y="181" width="0.8070%" height="15" fill="rgb(245,217,50)" fg:x="1031" fg:w="23"/><text x="36.4254%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (17 samples, 0.60%)</title><rect x="36.3860%" y="165" width="0.5965%" height="15" fill="rgb(213,201,24)" fg:x="1037" fg:w="17"/><text x="36.6360%" y="175.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (1 samples, 0.04%)</title><rect x="36.9474%" y="149" width="0.0351%" height="15" fill="rgb(248,116,28)" fg:x="1053" fg:w="1"/><text x="37.1974%" y="159.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="36.9474%" y="133" width="0.0351%" height="15" fill="rgb(219,72,43)" fg:x="1053" fg:w="1"/><text x="37.1974%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="37.0526%" y="165" width="0.0351%" height="15" fill="rgb(209,138,14)" fg:x="1056" fg:w="1"/><text x="37.3026%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.07%)</title><rect x="37.0877%" y="165" width="0.0702%" height="15" fill="rgb(222,18,33)" fg:x="1057" fg:w="2"/><text x="37.3377%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="37.2982%" y="133" width="0.0351%" height="15" fill="rgb(213,199,7)" fg:x="1063" fg:w="1"/><text x="37.5482%" y="143.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (2 samples, 0.07%)</title><rect x="37.3333%" y="133" width="0.0702%" height="15" fill="rgb(250,110,10)" fg:x="1064" fg:w="2"/><text x="37.5833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="37.4386%" y="85" width="0.0351%" height="15" fill="rgb(248,123,6)" fg:x="1067" fg:w="1"/><text x="37.6886%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="37.4737%" y="69" width="0.0351%" height="15" fill="rgb(206,91,31)" fg:x="1068" fg:w="1"/><text x="37.7237%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.14%)</title><rect x="37.4035%" y="117" width="0.1404%" height="15" fill="rgb(211,154,13)" fg:x="1066" fg:w="4"/><text x="37.6535%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.11%)</title><rect x="37.4386%" y="101" width="0.1053%" height="15" fill="rgb(225,148,7)" fg:x="1067" fg:w="3"/><text x="37.6886%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.07%)</title><rect x="37.4737%" y="85" width="0.0702%" height="15" fill="rgb(220,160,43)" fg:x="1068" fg:w="2"/><text x="37.7237%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="37.5088%" y="69" width="0.0351%" height="15" fill="rgb(213,52,39)" fg:x="1069" fg:w="1"/><text x="37.7588%" y="79.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (45 samples, 1.58%)</title><rect x="36.0000%" y="197" width="1.5789%" height="15" fill="rgb(243,137,7)" fg:x="1026" fg:w="45"/><text x="36.2500%" y="207.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::assemble_chunks (17 samples, 0.60%)</title><rect x="36.9825%" y="181" width="0.5965%" height="15" fill="rgb(230,79,13)" fg:x="1054" fg:w="17"/><text x="37.2325%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (12 samples, 0.42%)</title><rect x="37.1579%" y="165" width="0.4211%" height="15" fill="rgb(247,105,23)" fg:x="1059" fg:w="12"/><text x="37.4079%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.28%)</title><rect x="37.2982%" y="149" width="0.2807%" height="15" fill="rgb(223,179,41)" fg:x="1063" fg:w="8"/><text x="37.5482%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (5 samples, 0.18%)</title><rect x="37.4035%" y="133" width="0.1754%" height="15" fill="rgb(218,9,34)" fg:x="1066" fg:w="5"/><text x="37.6535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.04%)</title><rect x="37.5439%" y="117" width="0.0351%" height="15" fill="rgb(222,106,8)" fg:x="1070" fg:w="1"/><text x="37.7939%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="37.5789%" y="181" width="0.0351%" height="15" fill="rgb(211,220,0)" fg:x="1071" fg:w="1"/><text x="37.8289%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="37.6140%" y="181" width="0.0351%" height="15" fill="rgb(229,52,16)" fg:x="1072" fg:w="1"/><text x="37.8640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="37.6491%" y="181" width="0.0351%" height="15" fill="rgb(212,155,18)" fg:x="1073" fg:w="1"/><text x="37.8991%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="37.7193%" y="165" width="0.0351%" height="15" fill="rgb(242,21,14)" fg:x="1075" fg:w="1"/><text x="37.9693%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="37.7544%" y="165" width="0.0351%" height="15" fill="rgb(222,19,48)" fg:x="1076" fg:w="1"/><text x="38.0044%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="37.7895%" y="165" width="0.0351%" height="15" fill="rgb(232,45,27)" fg:x="1077" fg:w="1"/><text x="38.0395%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="37.8246%" y="165" width="0.0351%" height="15" fill="rgb(249,103,42)" fg:x="1078" fg:w="1"/><text x="38.0746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="37.8947%" y="149" width="0.0351%" height="15" fill="rgb(246,81,33)" fg:x="1080" fg:w="1"/><text x="38.1447%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (8 samples, 0.28%)</title><rect x="37.6842%" y="181" width="0.2807%" height="15" fill="rgb(252,33,42)" fg:x="1074" fg:w="8"/><text x="37.9342%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (3 samples, 0.11%)</title><rect x="37.8596%" y="165" width="0.1053%" height="15" fill="rgb(209,212,41)" fg:x="1079" fg:w="3"/><text x="38.1096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="37.9298%" y="149" width="0.0351%" height="15" fill="rgb(207,154,6)" fg:x="1081" fg:w="1"/><text x="38.1798%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="37.9298%" y="133" width="0.0351%" height="15" fill="rgb(223,64,47)" fg:x="1081" fg:w="1"/><text x="38.1798%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="37.9298%" y="117" width="0.0351%" height="15" fill="rgb(211,161,38)" fg:x="1081" fg:w="1"/><text x="38.1798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="38.0000%" y="165" width="0.0351%" height="15" fill="rgb(219,138,40)" fg:x="1083" fg:w="1"/><text x="38.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.04%)</title><rect x="38.0000%" y="149" width="0.0351%" height="15" fill="rgb(241,228,46)" fg:x="1083" fg:w="1"/><text x="38.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.04%)</title><rect x="38.0000%" y="133" width="0.0351%" height="15" fill="rgb(223,209,38)" fg:x="1083" fg:w="1"/><text x="38.2500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="38.0702%" y="117" width="0.0351%" height="15" fill="rgb(236,164,45)" fg:x="1085" fg:w="1"/><text x="38.3202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="38.0702%" y="101" width="0.0351%" height="15" fill="rgb(231,15,5)" fg:x="1085" fg:w="1"/><text x="38.3202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.04%)</title><rect x="38.0702%" y="85" width="0.0351%" height="15" fill="rgb(252,35,15)" fg:x="1085" fg:w="1"/><text x="38.3202%" y="95.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (16 samples, 0.56%)</title><rect x="37.5789%" y="197" width="0.5614%" height="15" fill="rgb(248,181,18)" fg:x="1071" fg:w="16"/><text x="37.8289%" y="207.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::assemble_chunks (5 samples, 0.18%)</title><rect x="37.9649%" y="181" width="0.1754%" height="15" fill="rgb(233,39,42)" fg:x="1082" fg:w="5"/><text x="38.2149%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (3 samples, 0.11%)</title><rect x="38.0351%" y="165" width="0.1053%" height="15" fill="rgb(238,110,33)" fg:x="1084" fg:w="3"/><text x="38.2851%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="38.0702%" y="149" width="0.0702%" height="15" fill="rgb(233,195,10)" fg:x="1085" fg:w="2"/><text x="38.3202%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="38.0702%" y="133" width="0.0702%" height="15" fill="rgb(254,105,3)" fg:x="1085" fg:w="2"/><text x="38.3202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="38.1053%" y="117" width="0.0351%" height="15" fill="rgb(221,225,9)" fg:x="1086" fg:w="1"/><text x="38.3553%" y="127.50"></text></g><g><title>publisher`DYLD-STUB$$free (2 samples, 0.07%)</title><rect x="38.1404%" y="197" width="0.0702%" height="15" fill="rgb(224,227,45)" fg:x="1087" fg:w="2"/><text x="38.3904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="38.2105%" y="181" width="0.0702%" height="15" fill="rgb(229,198,43)" fg:x="1089" fg:w="2"/><text x="38.4605%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$malloc (1 samples, 0.04%)</title><rect x="38.2807%" y="181" width="0.0351%" height="15" fill="rgb(206,209,35)" fg:x="1091" fg:w="1"/><text x="38.5307%" y="191.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (76 samples, 2.67%)</title><rect x="35.7193%" y="213" width="2.6667%" height="15" fill="rgb(245,195,53)" fg:x="1018" fg:w="76"/><text x="35.9693%" y="223.50">pu..</text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::merkleize::HashTreeRoot for u64&gt;::hash_tree_root (5 samples, 0.18%)</title><rect x="38.2105%" y="197" width="0.1754%" height="15" fill="rgb(240,92,26)" fg:x="1089" fg:w="5"/><text x="38.4605%" y="207.50"></text></g><g><title>publisher`ssz_rs::uint::_&lt;impl ssz_rs::merkleization::proofs::Prove for u64&gt;::chunks (2 samples, 0.07%)</title><rect x="38.3158%" y="181" width="0.0702%" height="15" fill="rgb(207,40,23)" fg:x="1092" fg:w="2"/><text x="38.5658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.07%)</title><rect x="38.3158%" y="165" width="0.0702%" height="15" fill="rgb(223,111,35)" fg:x="1092" fg:w="2"/><text x="38.5658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="38.4211%" y="197" width="0.0351%" height="15" fill="rgb(229,147,28)" fg:x="1095" fg:w="1"/><text x="38.6711%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.04%)</title><rect x="38.4561%" y="197" width="0.0351%" height="15" fill="rgb(211,29,28)" fg:x="1096" fg:w="1"/><text x="38.7061%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.07%)</title><rect x="38.4912%" y="197" width="0.0702%" height="15" fill="rgb(228,72,33)" fg:x="1097" fg:w="2"/><text x="38.7412%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.28%)</title><rect x="38.5614%" y="197" width="0.2807%" height="15" fill="rgb(205,214,31)" fg:x="1099" fg:w="8"/><text x="38.8114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="38.8421%" y="197" width="0.0351%" height="15" fill="rgb(224,111,15)" fg:x="1107" fg:w="1"/><text x="39.0921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.11%)</title><rect x="38.8772%" y="197" width="0.1053%" height="15" fill="rgb(253,21,26)" fg:x="1108" fg:w="3"/><text x="39.1272%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.07%)</title><rect x="38.9825%" y="197" width="0.0702%" height="15" fill="rgb(245,139,43)" fg:x="1111" fg:w="2"/><text x="39.2325%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="39.0526%" y="197" width="0.0351%" height="15" fill="rgb(252,170,7)" fg:x="1113" fg:w="1"/><text x="39.3026%" y="207.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (1 samples, 0.04%)</title><rect x="39.0877%" y="197" width="0.0351%" height="15" fill="rgb(231,118,14)" fg:x="1114" fg:w="1"/><text x="39.3377%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.21%)</title><rect x="39.4386%" y="181" width="0.2105%" height="15" fill="rgb(238,83,0)" fg:x="1124" fg:w="6"/><text x="39.6886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.18%)</title><rect x="39.6491%" y="181" width="0.1754%" height="15" fill="rgb(221,39,39)" fg:x="1130" fg:w="5"/><text x="39.8991%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.11%)</title><rect x="39.8246%" y="181" width="0.1053%" height="15" fill="rgb(222,119,46)" fg:x="1135" fg:w="3"/><text x="40.0746%" y="191.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (4 samples, 0.14%)</title><rect x="39.9298%" y="181" width="0.1404%" height="15" fill="rgb(222,165,49)" fg:x="1138" fg:w="4"/><text x="40.1798%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="40.0702%" y="181" width="0.0351%" height="15" fill="rgb(219,113,52)" fg:x="1142" fg:w="1"/><text x="40.3202%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.35%)</title><rect x="40.2105%" y="165" width="0.3509%" height="15" fill="rgb(214,7,15)" fg:x="1146" fg:w="10"/><text x="40.4605%" y="175.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (10 samples, 0.35%)</title><rect x="40.5614%" y="165" width="0.3509%" height="15" fill="rgb(235,32,4)" fg:x="1156" fg:w="10"/><text x="40.8114%" y="175.50"></text></g><g><title>publisher`sha256_block_armv8 (3 samples, 0.11%)</title><rect x="40.8070%" y="149" width="0.1053%" height="15" fill="rgb(238,90,54)" fg:x="1163" fg:w="3"/><text x="41.0570%" y="159.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (81 samples, 2.84%)</title><rect x="38.3860%" y="213" width="2.8421%" height="15" fill="rgb(213,208,19)" fg:x="1094" fg:w="81"/><text x="38.6360%" y="223.50">pu..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (60 samples, 2.11%)</title><rect x="39.1228%" y="197" width="2.1053%" height="15" fill="rgb(233,156,4)" fg:x="1115" fg:w="60"/><text x="39.3728%" y="207.50">p..</text></g><g><title>publisher`ethereum_hashing::hash32_concat (32 samples, 1.12%)</title><rect x="40.1053%" y="181" width="1.1228%" height="15" fill="rgb(207,194,5)" fg:x="1143" fg:w="32"/><text x="40.3553%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (9 samples, 0.32%)</title><rect x="40.9123%" y="165" width="0.3158%" height="15" fill="rgb(206,111,30)" fg:x="1166" fg:w="9"/><text x="41.1623%" y="175.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::assemble_chunks (167 samples, 5.86%)</title><rect x="35.4035%" y="229" width="5.8596%" height="15" fill="rgb(243,70,54)" fg:x="1009" fg:w="167"/><text x="35.6535%" y="239.50">publish..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (1 samples, 0.04%)</title><rect x="41.2281%" y="213" width="0.0351%" height="15" fill="rgb(242,28,8)" fg:x="1175" fg:w="1"/><text x="41.4781%" y="223.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.2632%" y="213" width="0.0351%" height="15" fill="rgb(219,106,18)" fg:x="1176" fg:w="1"/><text x="41.5132%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.11%)</title><rect x="41.3333%" y="197" width="0.1053%" height="15" fill="rgb(244,222,10)" fg:x="1178" fg:w="3"/><text x="41.5833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="41.4386%" y="197" width="0.0351%" height="15" fill="rgb(236,179,52)" fg:x="1181" fg:w="1"/><text x="41.6886%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="41.4386%" y="181" width="0.0351%" height="15" fill="rgb(213,23,39)" fg:x="1181" fg:w="1"/><text x="41.6886%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.4737%" y="197" width="0.0351%" height="15" fill="rgb(238,48,10)" fg:x="1182" fg:w="1"/><text x="41.7237%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="41.5789%" y="181" width="0.0351%" height="15" fill="rgb(251,196,23)" fg:x="1185" fg:w="1"/><text x="41.8289%" y="191.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (2 samples, 0.07%)</title><rect x="41.6140%" y="181" width="0.0702%" height="15" fill="rgb(250,152,24)" fg:x="1186" fg:w="2"/><text x="41.8640%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (2 samples, 0.07%)</title><rect x="41.6140%" y="165" width="0.0702%" height="15" fill="rgb(209,150,17)" fg:x="1186" fg:w="2"/><text x="41.8640%" y="175.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (180 samples, 6.32%)</title><rect x="35.4035%" y="245" width="6.3158%" height="15" fill="rgb(234,202,34)" fg:x="1009" fg:w="180"/><text x="35.6535%" y="255.50">publishe..</text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (13 samples, 0.46%)</title><rect x="41.2632%" y="229" width="0.4561%" height="15" fill="rgb(253,148,53)" fg:x="1176" fg:w="13"/><text x="41.5132%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (12 samples, 0.42%)</title><rect x="41.2982%" y="213" width="0.4211%" height="15" fill="rgb(218,129,16)" fg:x="1177" fg:w="12"/><text x="41.5482%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (6 samples, 0.21%)</title><rect x="41.5088%" y="197" width="0.2105%" height="15" fill="rgb(216,85,19)" fg:x="1183" fg:w="6"/><text x="41.7588%" y="207.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="41.6842%" y="181" width="0.0351%" height="15" fill="rgb(235,228,7)" fg:x="1188" fg:w="1"/><text x="41.9342%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.7193%" y="213" width="0.0351%" height="15" fill="rgb(245,175,0)" fg:x="1189" fg:w="1"/><text x="41.9693%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (1 samples, 0.04%)</title><rect x="41.7544%" y="213" width="0.0351%" height="15" fill="rgb(208,168,36)" fg:x="1190" fg:w="1"/><text x="42.0044%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="41.7895%" y="197" width="0.0351%" height="15" fill="rgb(246,171,24)" fg:x="1191" fg:w="1"/><text x="42.0395%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="41.8246%" y="197" width="0.0351%" height="15" fill="rgb(215,142,24)" fg:x="1192" fg:w="1"/><text x="42.0746%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="41.8246%" y="181" width="0.0351%" height="15" fill="rgb(250,187,7)" fg:x="1192" fg:w="1"/><text x="42.0746%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.8596%" y="197" width="0.0351%" height="15" fill="rgb(228,66,33)" fg:x="1193" fg:w="1"/><text x="42.1096%" y="207.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="41.8947%" y="181" width="0.0351%" height="15" fill="rgb(234,215,21)" fg:x="1194" fg:w="1"/><text x="42.1447%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="41.8947%" y="165" width="0.0351%" height="15" fill="rgb(222,191,20)" fg:x="1194" fg:w="1"/><text x="42.1447%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (7 samples, 0.25%)</title><rect x="41.7193%" y="229" width="0.2456%" height="15" fill="rgb(245,79,54)" fg:x="1189" fg:w="7"/><text x="41.9693%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (5 samples, 0.18%)</title><rect x="41.7895%" y="213" width="0.1754%" height="15" fill="rgb(240,10,37)" fg:x="1191" fg:w="5"/><text x="42.0395%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (2 samples, 0.07%)</title><rect x="41.8947%" y="197" width="0.0702%" height="15" fill="rgb(214,192,32)" fg:x="1194" fg:w="2"/><text x="42.1447%" y="207.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="41.9298%" y="181" width="0.0351%" height="15" fill="rgb(209,36,54)" fg:x="1195" fg:w="1"/><text x="42.1798%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="41.9649%" y="213" width="0.0351%" height="15" fill="rgb(220,10,11)" fg:x="1196" fg:w="1"/><text x="42.2149%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.04%)</title><rect x="42.0000%" y="213" width="0.0351%" height="15" fill="rgb(221,106,17)" fg:x="1197" fg:w="1"/><text x="42.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="42.0351%" y="197" width="0.0351%" height="15" fill="rgb(251,142,44)" fg:x="1198" fg:w="1"/><text x="42.2851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="42.0702%" y="181" width="0.0351%" height="15" fill="rgb(238,13,15)" fg:x="1199" fg:w="1"/><text x="42.3202%" y="191.50"></text></g><g><title>publisher`DYLD-STUB$$calloc (1 samples, 0.04%)</title><rect x="42.1053%" y="181" width="0.0351%" height="15" fill="rgb(208,107,27)" fg:x="1200" fg:w="1"/><text x="42.3553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.04%)</title><rect x="42.1404%" y="165" width="0.0351%" height="15" fill="rgb(205,136,37)" fg:x="1201" fg:w="1"/><text x="42.3904%" y="175.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (4 samples, 0.14%)</title><rect x="42.0702%" y="197" width="0.1404%" height="15" fill="rgb(250,205,27)" fg:x="1199" fg:w="4"/><text x="42.3202%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (2 samples, 0.07%)</title><rect x="42.1404%" y="181" width="0.0702%" height="15" fill="rgb(210,80,43)" fg:x="1201" fg:w="2"/><text x="42.3904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="42.1754%" y="165" width="0.0351%" height="15" fill="rgb(247,160,36)" fg:x="1202" fg:w="1"/><text x="42.4254%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="42.2807%" y="165" width="0.0351%" height="15" fill="rgb(234,13,49)" fg:x="1205" fg:w="1"/><text x="42.5307%" y="175.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="42.2807%" y="149" width="0.0351%" height="15" fill="rgb(234,122,0)" fg:x="1205" fg:w="1"/><text x="42.5307%" y="159.50"></text></g><g><title>publisher`&lt;ethereum_consensus::types::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_,_,_,_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (199 samples, 6.98%)</title><rect x="35.4035%" y="277" width="6.9825%" height="15" fill="rgb(207,146,38)" fg:x="1009" fg:w="199"/><text x="35.6535%" y="287.50">publisher..</text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (199 samples, 6.98%)</title><rect x="35.4035%" y="261" width="6.9825%" height="15" fill="rgb(207,177,25)" fg:x="1009" fg:w="199"/><text x="35.6535%" y="271.50">publisher..</text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (19 samples, 0.67%)</title><rect x="41.7193%" y="245" width="0.6667%" height="15" fill="rgb(211,178,42)" fg:x="1189" fg:w="19"/><text x="41.9693%" y="255.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::assemble_chunks (12 samples, 0.42%)</title><rect x="41.9649%" y="229" width="0.4211%" height="15" fill="rgb(230,69,54)" fg:x="1196" fg:w="12"/><text x="42.2149%" y="239.50"></text></g><g><title>publisher`&lt;ethereum_consensus::ssz::byte_vector::ByteVector&lt;_&gt; as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (10 samples, 0.35%)</title><rect x="42.0351%" y="213" width="0.3509%" height="15" fill="rgb(214,135,41)" fg:x="1198" fg:w="10"/><text x="42.2851%" y="223.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::assemble_chunks (5 samples, 0.18%)</title><rect x="42.2105%" y="197" width="0.1754%" height="15" fill="rgb(237,67,25)" fg:x="1203" fg:w="5"/><text x="42.4605%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::pack (4 samples, 0.14%)</title><rect x="42.2456%" y="181" width="0.1404%" height="15" fill="rgb(222,189,50)" fg:x="1204" fg:w="4"/><text x="42.4956%" y="191.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="42.3158%" y="165" width="0.0702%" height="15" fill="rgb(245,148,34)" fg:x="1206" fg:w="2"/><text x="42.5658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="42.3860%" y="261" width="0.0351%" height="15" fill="rgb(222,29,6)" fg:x="1208" fg:w="1"/><text x="42.6360%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.04%)</title><rect x="42.4211%" y="245" width="0.0351%" height="15" fill="rgb(221,189,43)" fg:x="1209" fg:w="1"/><text x="42.6711%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.04%)</title><rect x="42.4211%" y="229" width="0.0351%" height="15" fill="rgb(207,36,27)" fg:x="1209" fg:w="1"/><text x="42.6711%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.04%)</title><rect x="42.4561%" y="213" width="0.0351%" height="15" fill="rgb(217,90,24)" fg:x="1210" fg:w="1"/><text x="42.7061%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="42.4912%" y="213" width="0.0351%" height="15" fill="rgb(224,66,35)" fg:x="1211" fg:w="1"/><text x="42.7412%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="42.5614%" y="197" width="0.0702%" height="15" fill="rgb(221,13,50)" fg:x="1213" fg:w="2"/><text x="42.8114%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.07%)</title><rect x="42.5614%" y="181" width="0.0702%" height="15" fill="rgb(236,68,49)" fg:x="1213" fg:w="2"/><text x="42.8114%" y="191.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.14%)</title><rect x="42.6316%" y="197" width="0.1404%" height="15" fill="rgb(229,146,28)" fg:x="1215" fg:w="4"/><text x="42.8816%" y="207.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="42.8070%" y="181" width="0.0351%" height="15" fill="rgb(225,31,38)" fg:x="1220" fg:w="1"/><text x="43.0570%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="42.8070%" y="165" width="0.0351%" height="15" fill="rgb(250,208,3)" fg:x="1220" fg:w="1"/><text x="43.0570%" y="175.50"></text></g><g><title>publisher`ssz_rs::list::List&lt;T,_&gt;::compute_hash_tree_root (14 samples, 0.49%)</title><rect x="42.4561%" y="245" width="0.4912%" height="15" fill="rgb(246,54,23)" fg:x="1210" fg:w="14"/><text x="42.7061%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (14 samples, 0.49%)</title><rect x="42.4561%" y="229" width="0.4912%" height="15" fill="rgb(243,76,11)" fg:x="1210" fg:w="14"/><text x="42.7061%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (12 samples, 0.42%)</title><rect x="42.5263%" y="213" width="0.4211%" height="15" fill="rgb(245,21,50)" fg:x="1212" fg:w="12"/><text x="42.7763%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (5 samples, 0.18%)</title><rect x="42.7719%" y="197" width="0.1754%" height="15" fill="rgb(228,9,43)" fg:x="1219" fg:w="5"/><text x="43.0219%" y="207.50"></text></g><g><title>publisher`sha256_block_armv8 (3 samples, 0.11%)</title><rect x="42.8421%" y="181" width="0.1053%" height="15" fill="rgb(208,100,47)" fg:x="1221" fg:w="3"/><text x="43.0921%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="42.9825%" y="197" width="0.0351%" height="15" fill="rgb(232,26,8)" fg:x="1225" fg:w="1"/><text x="43.2325%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="43.0175%" y="197" width="0.0351%" height="15" fill="rgb(216,166,38)" fg:x="1226" fg:w="1"/><text x="43.2675%" y="207.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="43.0526%" y="197" width="0.0351%" height="15" fill="rgb(251,202,51)" fg:x="1227" fg:w="1"/><text x="43.3026%" y="207.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="43.0877%" y="181" width="0.0351%" height="15" fill="rgb(254,216,34)" fg:x="1228" fg:w="1"/><text x="43.3377%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="43.0877%" y="165" width="0.0351%" height="15" fill="rgb(251,32,27)" fg:x="1228" fg:w="1"/><text x="43.3377%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::phase0::beacon_state::BeaconState&lt;_,_,_,_,_,_,_,_&gt;::assemble_chunks (21 samples, 0.74%)</title><rect x="42.4211%" y="261" width="0.7368%" height="15" fill="rgb(208,127,28)" fg:x="1209" fg:w="21"/><text x="42.6711%" y="271.50"></text></g><g><title>publisher`ssz_rs::vector::Vector&lt;T,_&gt;::compute_hash_tree_root (6 samples, 0.21%)</title><rect x="42.9474%" y="245" width="0.2105%" height="15" fill="rgb(224,137,22)" fg:x="1224" fg:w="6"/><text x="43.1974%" y="255.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (6 samples, 0.21%)</title><rect x="42.9474%" y="229" width="0.2105%" height="15" fill="rgb(254,70,32)" fg:x="1224" fg:w="6"/><text x="43.1974%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (6 samples, 0.21%)</title><rect x="42.9474%" y="213" width="0.2105%" height="15" fill="rgb(229,75,37)" fg:x="1224" fg:w="6"/><text x="43.1974%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (2 samples, 0.07%)</title><rect x="43.0877%" y="197" width="0.0702%" height="15" fill="rgb(252,64,23)" fg:x="1228" fg:w="2"/><text x="43.3377%" y="207.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="43.1228%" y="181" width="0.0351%" height="15" fill="rgb(232,162,48)" fg:x="1229" fg:w="1"/><text x="43.3728%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.04%)</title><rect x="43.1579%" y="245" width="0.0351%" height="15" fill="rgb(246,160,12)" fg:x="1230" fg:w="1"/><text x="43.4079%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.04%)</title><rect x="43.1579%" y="229" width="0.0351%" height="15" fill="rgb(247,166,0)" fg:x="1230" fg:w="1"/><text x="43.4079%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::multiproofs::get_helper_indices (2 samples, 0.07%)</title><rect x="43.1579%" y="261" width="0.0702%" height="15" fill="rgb(249,219,21)" fg:x="1230" fg:w="2"/><text x="43.4079%" y="271.50"></text></g><g><title>publisher`core::slice::sort::stable::driftsort_main (1 samples, 0.04%)</title><rect x="43.1930%" y="245" width="0.0351%" height="15" fill="rgb(205,209,3)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="255.50"></text></g><g><title>publisher`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.04%)</title><rect x="43.1930%" y="229" width="0.0351%" height="15" fill="rgb(243,44,1)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="239.50"></text></g><g><title>publisher`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.04%)</title><rect x="43.1930%" y="213" width="0.0351%" height="15" fill="rgb(206,159,16)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="223.50"></text></g><g><title>publisher`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.04%)</title><rect x="43.1930%" y="197" width="0.0351%" height="15" fill="rgb(244,77,30)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="207.50"></text></g><g><title>publisher`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.04%)</title><rect x="43.1930%" y="181" width="0.0351%" height="15" fill="rgb(218,69,12)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="191.50"></text></g><g><title>publisher`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.04%)</title><rect x="43.1930%" y="165" width="0.0351%" height="15" fill="rgb(212,87,7)" fg:x="1231" fg:w="1"/><text x="43.4430%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="43.2281%" y="245" width="0.0351%" height="15" fill="rgb(245,114,25)" fg:x="1232" fg:w="1"/><text x="43.4781%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (137 samples, 4.81%)</title><rect x="43.2632%" y="229" width="4.8070%" height="15" fill="rgb(210,61,42)" fg:x="1233" fg:w="137"/><text x="43.5132%" y="239.50">libsys..</text></g><g><title>libsystem_kernel.dylib`madvise (136 samples, 4.77%)</title><rect x="43.2982%" y="213" width="4.7719%" height="15" fill="rgb(211,52,33)" fg:x="1234" fg:w="136"/><text x="43.5482%" y="223.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,458 samples, 51.16%)</title><rect x="48.0702%" y="229" width="51.1579%" height="15" fill="rgb(234,58,33)" fg:x="1370" fg:w="1458"/><text x="48.3202%" y="239.50">libsystem_platform.dylib`_platform_memmove</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="99.2281%" y="213" width="0.0351%" height="15" fill="rgb(220,115,36)" fg:x="2828" fg:w="1"/><text x="99.4781%" y="223.50"></text></g><g><title>publisher`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="99.2281%" y="229" width="0.0702%" height="15" fill="rgb(243,153,54)" fg:x="2828" fg:w="2"/><text x="99.4781%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="99.2632%" y="213" width="0.0351%" height="15" fill="rgb(251,47,18)" fg:x="2829" fg:w="1"/><text x="99.5132%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.04%)</title><rect x="99.2632%" y="197" width="0.0351%" height="15" fill="rgb(242,102,42)" fg:x="2829" fg:w="1"/><text x="99.5132%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.04%)</title><rect x="99.2632%" y="181" width="0.0351%" height="15" fill="rgb(234,31,38)" fg:x="2829" fg:w="1"/><text x="99.5132%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="99.2632%" y="165" width="0.0351%" height="15" fill="rgb(221,117,51)" fg:x="2829" fg:w="1"/><text x="99.5132%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="99.2982%" y="165" width="0.0351%" height="15" fill="rgb(212,20,18)" fg:x="2830" fg:w="1"/><text x="99.5482%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="99.2982%" y="149" width="0.0351%" height="15" fill="rgb(245,133,36)" fg:x="2830" fg:w="1"/><text x="99.5482%" y="159.50"></text></g><g><title>publisher`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.07%)</title><rect x="99.2982%" y="229" width="0.0702%" height="15" fill="rgb(212,6,19)" fg:x="2830" fg:w="2"/><text x="99.5482%" y="239.50"></text></g><g><title>publisher`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="99.2982%" y="213" width="0.0702%" height="15" fill="rgb(218,1,36)" fg:x="2830" fg:w="2"/><text x="99.5482%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.07%)</title><rect x="99.2982%" y="197" width="0.0702%" height="15" fill="rgb(246,84,54)" fg:x="2830" fg:w="2"/><text x="99.5482%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.07%)</title><rect x="99.2982%" y="181" width="0.0702%" height="15" fill="rgb(242,110,6)" fg:x="2830" fg:w="2"/><text x="99.5482%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.04%)</title><rect x="99.3333%" y="165" width="0.0351%" height="15" fill="rgb(214,47,5)" fg:x="2831" fg:w="1"/><text x="99.5833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.04%)</title><rect x="99.3333%" y="149" width="0.0351%" height="15" fill="rgb(218,159,25)" fg:x="2831" fg:w="1"/><text x="99.5833%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.04%)</title><rect x="99.3684%" y="213" width="0.0351%" height="15" fill="rgb(215,211,28)" fg:x="2832" fg:w="1"/><text x="99.6184%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="99.4035%" y="213" width="0.0351%" height="15" fill="rgb(238,59,32)" fg:x="2833" fg:w="1"/><text x="99.6535%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="99.4035%" y="197" width="0.0351%" height="15" fill="rgb(226,82,3)" fg:x="2833" fg:w="1"/><text x="99.6535%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="99.4386%" y="213" width="0.0351%" height="15" fill="rgb(240,164,32)" fg:x="2834" fg:w="1"/><text x="99.6886%" y="223.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="99.4737%" y="213" width="0.0351%" height="15" fill="rgb(232,46,7)" fg:x="2835" fg:w="1"/><text x="99.7237%" y="223.50"></text></g><g><title>publisher`&lt;ssz_rs::merkleization::merkleize::Tree as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="99.5088%" y="213" width="0.0351%" height="15" fill="rgb(229,129,53)" fg:x="2836" fg:w="1"/><text x="99.7588%" y="223.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (3 samples, 0.11%)</title><rect x="99.6491%" y="197" width="0.1053%" height="15" fill="rgb(234,188,29)" fg:x="2840" fg:w="3"/><text x="99.8991%" y="207.50"></text></g><g><title>publisher`sha256_block_armv8 (3 samples, 0.11%)</title><rect x="99.6491%" y="181" width="0.1053%" height="15" fill="rgb(246,141,4)" fg:x="2840" fg:w="3"/><text x="99.8991%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (12 samples, 0.42%)</title><rect x="99.3684%" y="229" width="0.4211%" height="15" fill="rgb(229,23,39)" fg:x="2832" fg:w="12"/><text x="99.6184%" y="239.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (7 samples, 0.25%)</title><rect x="99.5439%" y="213" width="0.2456%" height="15" fill="rgb(206,12,3)" fg:x="2837" fg:w="7"/><text x="99.7939%" y="223.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="99.7544%" y="197" width="0.0351%" height="15" fill="rgb(252,226,20)" fg:x="2843" fg:w="1"/><text x="100.0044%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.04%)</title><rect x="99.7895%" y="165" width="0.0351%" height="15" fill="rgb(216,123,35)" fg:x="2844" fg:w="1"/><text x="100.0395%" y="175.50"></text></g><g><title>publisher`ethereum_consensus::phase0::validator::Validator::assemble_chunks (2 samples, 0.07%)</title><rect x="99.7895%" y="213" width="0.0702%" height="15" fill="rgb(212,68,40)" fg:x="2844" fg:w="2"/><text x="100.0395%" y="223.50"></text></g><g><title>publisher`&lt;ethereum_consensus::crypto::bls::PublicKey as ssz_rs::merkleization::merkleize::HashTreeRoot&gt;::hash_tree_root (2 samples, 0.07%)</title><rect x="99.7895%" y="197" width="0.0702%" height="15" fill="rgb(254,125,32)" fg:x="2844" fg:w="2"/><text x="100.0395%" y="207.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::merkleize (2 samples, 0.07%)</title><rect x="99.7895%" y="181" width="0.0702%" height="15" fill="rgb(253,97,22)" fg:x="2844" fg:w="2"/><text x="100.0395%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (1 samples, 0.04%)</title><rect x="99.8246%" y="165" width="0.0351%" height="15" fill="rgb(241,101,14)" fg:x="2845" fg:w="1"/><text x="100.0746%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="99.8246%" y="149" width="0.0351%" height="15" fill="rgb(238,103,29)" fg:x="2845" fg:w="1"/><text x="100.0746%" y="159.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="99.8596%" y="197" width="0.0351%" height="15" fill="rgb(233,195,47)" fg:x="2846" fg:w="1"/><text x="100.1096%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="99.8947%" y="181" width="0.0351%" height="15" fill="rgb(246,218,30)" fg:x="2847" fg:w="1"/><text x="100.1447%" y="191.50"></text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree (1,617 samples, 56.74%)</title><rect x="43.2281%" y="261" width="56.7368%" height="15" fill="rgb(219,145,47)" fg:x="1232" fg:w="1617"/><text x="43.4781%" y="271.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof_cached_tree</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (1,616 samples, 56.70%)</title><rect x="43.2632%" y="245" width="56.7018%" height="15" fill="rgb(243,12,26)" fg:x="1233" fg:w="1616"/><text x="43.5132%" y="255.50">publisher`ssz_rs::merkleization::proofs::Prover::compute_proof</text></g><g><title>publisher`ssz_rs::merkleization::proofs::Prover::compute_proof (5 samples, 0.18%)</title><rect x="99.7895%" y="229" width="0.1754%" height="15" fill="rgb(214,87,16)" fg:x="2844" fg:w="5"/><text x="100.0395%" y="239.50"></text></g><g><title>publisher`ssz_rs::merkleization::merkleize::Tree::new (3 samples, 0.11%)</title><rect x="99.8596%" y="213" width="0.1053%" height="15" fill="rgb(208,99,42)" fg:x="2846" fg:w="3"/><text x="100.1096%" y="223.50"></text></g><g><title>publisher`ethereum_hashing::hash32_concat (2 samples, 0.07%)</title><rect x="99.8947%" y="197" width="0.0702%" height="15" fill="rgb(253,99,2)" fg:x="2847" fg:w="2"/><text x="100.1447%" y="207.50"></text></g><g><title>publisher`&lt;ring::digest::Context as ethereum_hashing::Sha256Context&gt;::update (1 samples, 0.04%)</title><rect x="99.9298%" y="181" width="0.0351%" height="15" fill="rgb(220,168,23)" fg:x="2848" fg:w="1"/><text x="100.1798%" y="191.50"></text></g><g><title>publisher`sha256_block_armv8 (1 samples, 0.04%)</title><rect x="99.9298%" y="165" width="0.0351%" height="15" fill="rgb(242,38,24)" fg:x="2848" fg:w="1"/><text x="100.1798%" y="175.50"></text></g><g><title>all (2,850 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(225,182,9)" fg:x="0" fg:w="2850"/><text x="0.2500%" y="335.50"></text></g><g><title>publisher`publisher::main::_{{closure}} (1,861 samples, 65.30%)</title><rect x="34.7018%" y="309" width="65.2982%" height="15" fill="rgb(243,178,37)" fg:x="989" fg:w="1861"/><text x="34.9518%" y="319.50">publisher`publisher::main::_{{closure}}</text></g><g><title>publisher`lido_oracle_core::io::validator_membership::Input::build_initial (1,841 samples, 64.60%)</title><rect x="35.4035%" y="293" width="64.5965%" height="15" fill="rgb(232,139,19)" fg:x="1009" fg:w="1841"/><text x="35.6535%" y="303.50">publisher`lido_oracle_core::io::validator_membership::Input::build_initial</text></g><g><title>publisher`lido_oracle_core::io::build_with_versioned_state (1,642 samples, 57.61%)</title><rect x="42.3860%" y="277" width="57.6140%" height="15" fill="rgb(225,201,24)" fg:x="1208" fg:w="1642"/><text x="42.6360%" y="287.50">publisher`lido_oracle_core::io::build_with_versioned_state</text></g><g><title>publisher`ssz_rs::merkleization::proofs::compute_local_merkle_coordinates (1 samples, 0.04%)</title><rect x="99.9649%" y="261" width="0.0351%" height="15" fill="rgb(221,47,46)" fg:x="2849" fg:w="1"/><text x="100.2149%" y="271.50"></text></g></svg></svg>